{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | InscryptionAPI",
    "keywords": "API Documentation Hello, and welcome to the documentation section of the Inscryption API! This section documents the various classes and members of the API, providing information on what they do."
  },
  "api/InscryptionAPI.Ascension.AscensionChallengePaginator.html": {
    "href": "api/InscryptionAPI.Ascension.AscensionChallengePaginator.html",
    "title": "Class AscensionChallengePaginator | InscryptionAPI",
    "keywords": "Class AscensionChallengePaginator Inheritance System.Object Object Component Behaviour MonoBehaviour AscensionChallengePaginator Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class AscensionChallengePaginator : MonoBehaviour Fields challengeObjectsForPages A List representing the entire collection of challenge pages. Declaration public List<List<GameObject>> challengeObjectsForPages Field Value Type Description List < List < GameObject >> initialized Declaration public bool initialized Field Value Type Description System.Boolean leftArrow Declaration public AscensionMenuInteractable leftArrow Field Value Type Description DiskCardGame.AscensionMenuInteractable missingChallengeInfo Declaration public static AscensionChallengeInfo missingChallengeInfo Field Value Type Description DiskCardGame.AscensionChallengeInfo missingChallengeSprite Declaration public static Sprite missingChallengeSprite Field Value Type Description Sprite pageIndex Declaration public int pageIndex Field Value Type Description System.Int32 pageLength Declaration public int pageLength Field Value Type Description System.Int32 rightArrow Declaration public AscensionMenuInteractable rightArrow Field Value Type Description DiskCardGame.AscensionMenuInteractable screen Declaration public AscensionChallengeScreen screen Field Value Type Description DiskCardGame.AscensionChallengeScreen transition Declaration public AscensionMenuScreenTransition transition Field Value Type Description DiskCardGame.AscensionMenuScreenTransition Methods AddPage(List<AscensionChallengeInfo>) Declaration public void AddPage(List<AscensionChallengeInfo> challengeInfos) Parameters Type Name Description List < DiskCardGame.AscensionChallengeInfo > challengeInfos InitialiseMissingChallengeInfo() Declaration public void InitialiseMissingChallengeInfo() Initialize(AscensionChallengeScreen, AscensionMenuScreenTransition) Declaration public void Initialize(AscensionChallengeScreen screen, AscensionMenuScreenTransition transition = null) Parameters Type Name Description DiskCardGame.AscensionChallengeScreen screen DiskCardGame.AscensionMenuScreenTransition transition InstantiateArrowObjects(List<AscensionIconInteractable>) Declaration public void InstantiateArrowObjects(List<AscensionIconInteractable> icons) Parameters Type Name Description List < DiskCardGame.AscensionIconInteractable > icons LoadPage(Int32) Declaration public void LoadPage(int page) Parameters Type Name Description System.Int32 page NextPage() Declaration public void NextPage() OnEnable() Declaration public void OnEnable() PreviousPage() Declaration public void PreviousPage() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.AscensionChallengePaginatorSetupifier.html": {
    "href": "api/InscryptionAPI.Ascension.AscensionChallengePaginatorSetupifier.html",
    "title": "Class AscensionChallengePaginatorSetupifier | InscryptionAPI",
    "keywords": "Class AscensionChallengePaginatorSetupifier Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour AscensionChallengePaginatorSetupifier Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class AscensionChallengePaginatorSetupifier : ManagedBehaviour Methods Start() Declaration public void Start() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.AscensionRunSetupScreenBase.html": {
    "href": "api/InscryptionAPI.Ascension.AscensionRunSetupScreenBase.html",
    "title": "Class AscensionRunSetupScreenBase | InscryptionAPI",
    "keywords": "Class AscensionRunSetupScreenBase Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour AscensionRunSetupScreenBase Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public abstract class AscensionRunSetupScreenBase : ManagedBehaviour Fields backButton Declaration public AscensionMenuBackButton backButton Field Value Type Description DiskCardGame.AscensionMenuBackButton cardInfoLines Declaration public SequentialPixelTextLines cardInfoLines Field Value Type Description DiskCardGame.SequentialPixelTextLines cardPanel Declaration public GameObject cardPanel Field Value Type Description GameObject cards Declaration public List<PixelSelectableCard> cards Field Value Type Description List < GBC.PixelSelectableCard > CENTER_DASHES Declaration public const string CENTER_DASHES = \"-------------------------------------------------------------------------------------------------------------------------------\" Field Value Type Description System.String challengeFooterLines Declaration public SequentialPixelTextLines challengeFooterLines Field Value Type Description DiskCardGame.SequentialPixelTextLines challengeHeaderDisplay Declaration public ChallengeLevelText challengeHeaderDisplay Field Value Type Description DiskCardGame.ChallengeLevelText continueButton Declaration public AscensionMenuInteractable continueButton Field Value Type Description DiskCardGame.AscensionMenuInteractable FULL_DASHES Declaration public const string FULL_DASHES = \"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\" Field Value Type Description System.String leftButton Declaration public MainInputInteractable leftButton Field Value Type Description DiskCardGame.MainInputInteractable rightButton Declaration public MainInputInteractable rightButton Field Value Type Description DiskCardGame.MainInputInteractable screenTitle Declaration public PixelText screenTitle Field Value Type Description GBC.PixelText secondaryInfoDisplayer Declaration public PixelText secondaryInfoDisplayer Field Value Type Description GBC.PixelText transitionController Declaration public AscensionMenuScreenTransition transitionController Field Value Type Description DiskCardGame.AscensionMenuScreenTransition Properties headerText Declaration public abstract string headerText { get; } Property Value Type Description System.String showCardDisplayer Declaration public abstract bool showCardDisplayer { get; } Property Value Type Description System.Boolean showCardPanel Declaration public abstract bool showCardPanel { get; } Property Value Type Description System.Boolean Methods BuildPaginators(Transform, Boolean) Declaration public static (AscensionMenuInteractable, AscensionMenuInteractable) BuildPaginators(Transform parent, bool upperPosition = false) Parameters Type Name Description Transform parent System.Boolean upperPosition Returns Type Description System.ValueTuple < DiskCardGame.AscensionMenuInteractable , DiskCardGame.AscensionMenuInteractable > BuildScreen(Type, AscensionMenuScreens.Screen, AscensionMenuScreens.Screen) Declaration public static AscensionRunSetupScreenBase BuildScreen(Type screenType, AscensionMenuScreens.Screen previousScreen, AscensionMenuScreens.Screen nextScreen) Parameters Type Name Description Type screenType DiskCardGame.AscensionMenuScreens.Screen previousScreen DiskCardGame.AscensionMenuScreens.Screen nextScreen Returns Type Description AscensionRunSetupScreenBase CardClicked(PixelSelectableCard) Declaration public virtual void CardClicked(PixelSelectableCard card) Parameters Type Name Description GBC.PixelSelectableCard card CardCursorEntered(PixelSelectableCard) Declaration public virtual void CardCursorEntered(PixelSelectableCard card) Parameters Type Name Description GBC.PixelSelectableCard card ClearCardInfo(Boolean) Declaration public void ClearCardInfo(bool immediate = true) Parameters Type Name Description System.Boolean immediate ClearMessage() Declaration public virtual void ClearMessage() DisplayCardInfo(CardInfo, String, String, Boolean) Declaration public void DisplayCardInfo(CardInfo info, string nameOverride = null, string descOverride = null, bool immediate = false) Parameters Type Name Description DiskCardGame.CardInfo info System.String nameOverride System.String descOverride System.Boolean immediate DisplayChallengeInfo(AscensionChallenge, Boolean) Declaration public void DisplayChallengeInfo(AscensionChallenge challenge, bool immediate = false) Parameters Type Name Description DiskCardGame.AscensionChallenge challenge System.Boolean immediate DisplayChallengeInfo(String, Int32, Boolean) Declaration public void DisplayChallengeInfo(string message, int points, bool immediate = false) Parameters Type Name Description System.String message System.Int32 points System.Boolean immediate DisplayMessage(String) Declaration public virtual void DisplayMessage(string message) Parameters Type Name Description System.String message InitializeScreen(GameObject) Declaration public virtual void InitializeScreen(GameObject partialScreen) Parameters Type Name Description GameObject partialScreen LeftButtonClicked(MainInputInteractable) Declaration public virtual void LeftButtonClicked(MainInputInteractable button) Parameters Type Name Description DiskCardGame.MainInputInteractable button OnEnable() Declaration public override void OnEnable() Overrides ManagedBehaviour.OnEnable() RightButtonClicked(MainInputInteractable) Declaration public virtual void RightButtonClicked(MainInputInteractable button) Parameters Type Name Description DiskCardGame.MainInputInteractable button ShowCards(List<CardInfo>) Declaration public void ShowCards(List<CardInfo> cardsToDisplay) Parameters Type Name Description List < DiskCardGame.CardInfo > cardsToDisplay Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.AscensionScreenManager.html": {
    "href": "api/InscryptionAPI.Ascension.AscensionScreenManager.html",
    "title": "Class AscensionScreenManager | InscryptionAPI",
    "keywords": "Class AscensionScreenManager Inheritance System.Object AscensionScreenManager Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class AscensionScreenManager Methods InitializeAllScreens() Declaration public static void InitializeAllScreens() RegisterScreen<T>() Declaration public static void RegisterScreen<T>() where T : AscensionRunSetupScreenBase Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Ascension.AscensionScreenSort.Direction.html": {
    "href": "api/InscryptionAPI.Ascension.AscensionScreenSort.Direction.html",
    "title": "Enum AscensionScreenSort.Direction | InscryptionAPI",
    "keywords": "Enum AscensionScreenSort.Direction Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public enum Direction Fields Name Description NoPreference PrefersEnd PrefersStart RequiresEnd RequiresStart Extension Methods ListExtensions.Repeat<AscensionScreenSort.Direction>(Int32)"
  },
  "api/InscryptionAPI.Ascension.AscensionScreenSort.html": {
    "href": "api/InscryptionAPI.Ascension.AscensionScreenSort.html",
    "title": "Class AscensionScreenSort | InscryptionAPI",
    "keywords": "Class AscensionScreenSort Inheritance System.Object System.Attribute AscensionScreenSort Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class AscensionScreenSort : Attribute Constructors AscensionScreenSort(AscensionScreenSort.Direction) Declaration public AscensionScreenSort(AscensionScreenSort.Direction preferredDirection = AscensionScreenSort.Direction.NoPreference) Parameters Type Name Description AscensionScreenSort.Direction preferredDirection Fields preferredDirection Declaration public AscensionScreenSort.Direction preferredDirection Field Value Type Description AscensionScreenSort.Direction Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.ChallengeBehaviour.html": {
    "href": "api/InscryptionAPI.Ascension.ChallengeBehaviour.html",
    "title": "Class ChallengeBehaviour | InscryptionAPI",
    "keywords": "Class ChallengeBehaviour Base class for all custom Challenge Handlers. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.NonCardTriggerReceiver ChallengeBehaviour Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class ChallengeBehaviour : NonCardTriggerReceiver Properties challenge The unique id for this challenge. Declaration public ChallengeManager.FullChallenge challenge { get; } Property Value Type Description ChallengeManager.FullChallenge instanceNumber The instance number for this challenge once instantiated. Declaration public int instanceNumber { get; } Property Value Type Description System.Int32 Methods AnyInstancesOfType(AscensionChallenge) Indicates if there are any active challenge behaviours of the given type. Declaration public static bool AnyInstancesOfType(AscensionChallenge type) Parameters Type Name Description DiskCardGame.AscensionChallenge type The challenge type to search for. Returns Type Description System.Boolean True if there is at least one challenge of the given type; false otherwise. CountInstancesOfType(AscensionChallenge) Gets the count of active challenge behaviours for the given challenge type. Declaration public static int CountInstancesOfType(AscensionChallenge type) Parameters Type Name Description DiskCardGame.AscensionChallenge type The challenge type to search for. Returns Type Description System.Int32 The count of all challenge behaviours that are active in battle. FindInstancesOfType(AscensionChallenge) Gets all active challenge behaviours for the challenge boon type. Declaration public static List<ChallengeBehaviour> FindInstancesOfType(AscensionChallenge type) Parameters Type Name Description DiskCardGame.AscensionChallenge type The challenge type to search for. Returns Type Description List < ChallengeBehaviour > A list of all challenge behaviours that are active in battle. OnDestroy() Fires when the challenge behaviour is destroyed Declaration public void OnDestroy() OnPostBattleCleanup() Override this to have your challenge take an action at the end of battle after battle cleanup Declaration public virtual IEnumerator OnPostBattleCleanup() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. OnPostBattleSetup() Override this to have your challenge take an action at the beginning of battle after all setup Declaration public virtual IEnumerator OnPostBattleSetup() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. OnPreBattleCleanup() Override this to have your challenge take an action at the end of battle before battle cleanup Declaration public virtual IEnumerator OnPreBattleCleanup() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. OnPreBattleSetup() Override this to have your challenge take an action at the beginning of battle before all setup. Declaration public virtual IEnumerator OnPreBattleSetup() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. RespondsToPostBattleCleanup() Override this to indicate if this challenge needs to take an action at the end of battle after battle cleanup Declaration public virtual bool RespondsToPostBattleCleanup() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. RespondsToPostBattleSetup() Override this to indicate if this challenge needs to take an action at the beginning of battle after all setup. Declaration public virtual bool RespondsToPostBattleSetup() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. RespondsToPreBattleCleanup() Override this to indicate if this challenge needs to take an action at the end of battle before battle cleanup Declaration public virtual bool RespondsToPreBattleCleanup() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. RespondsToPreBattleSetup() Override this to indicate if this challenge needs to take an action at the beginning of battle before all setup. Declaration public virtual bool RespondsToPreBattleSetup() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. ShowActivation() Plays the command line animation to show the challenge responsible for an action. Declaration protected void ShowActivation() Start() Fires when the challenge behavior starts up. Declaration public void Start() Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.ChallengeDisplayerPlus.html": {
    "href": "api/InscryptionAPI.Ascension.ChallengeDisplayerPlus.html",
    "title": "Class ChallengeDisplayerPlus | InscryptionAPI",
    "keywords": "Class ChallengeDisplayerPlus Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour ChallengeDisplayerPlus Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class ChallengeDisplayerPlus : ManagedBehaviour Properties displayer Declaration public AscensionChallengeDisplayer displayer { get; } Property Value Type Description DiskCardGame.AscensionChallengeDisplayer Methods DisplayChallenge(AscensionChallengeInfo, Boolean) Declaration public void DisplayChallenge(AscensionChallengeInfo challengeInfo, bool immediate = false) Parameters Type Name Description DiskCardGame.AscensionChallengeInfo challengeInfo System.Boolean immediate DisplayText(String, String, Boolean) Declaration public void DisplayText(string dependency, string incompatibility, bool immediate = false) Parameters Type Name Description System.String dependency System.String incompatibility System.Boolean immediate GetBestAvailableY() Declaration public float GetBestAvailableY() Returns Type Description System.Single TryAddChallengeDisplayerPlusToDisplayer(AscensionChallengeDisplayer) Declaration public static ChallengeDisplayerPlus TryAddChallengeDisplayerPlusToDisplayer(AscensionChallengeDisplayer displayer) Parameters Type Name Description DiskCardGame.AscensionChallengeDisplayer displayer Returns Type Description ChallengeDisplayerPlus Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.ChallengeDisplayerPlus.PrefixedString.html": {
    "href": "api/InscryptionAPI.Ascension.ChallengeDisplayerPlus.PrefixedString.html",
    "title": "Class ChallengeDisplayerPlus.PrefixedString | InscryptionAPI",
    "keywords": "Class ChallengeDisplayerPlus.PrefixedString Inheritance System.Object ChallengeDisplayerPlus.PrefixedString Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class PrefixedString Fields challenge Declaration public AscensionChallenge challenge Field Value Type Description DiskCardGame.AscensionChallenge number Declaration public int number Field Value Type Description System.Int32 prefix Declaration public string prefix Field Value Type Description System.String Properties FullText Declaration public string FullText { get; } Property Value Type Description System.String RedPrefixText Declaration public string RedPrefixText { get; } Property Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.ChallengeManager.FullChallenge.html": {
    "href": "api/InscryptionAPI.Ascension.ChallengeManager.FullChallenge.html",
    "title": "Class ChallengeManager.FullChallenge | InscryptionAPI",
    "keywords": "Class ChallengeManager.FullChallenge Class that stores full info about challenges, including unlock level, stackability, handlers and incompatible/dependant challenges. Inheritance System.Object ChallengeManager.FullChallenge Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class FullChallenge Properties AppearancesInChallengeScreen Number of times this challenge appears in the challenge screen. Declaration public int AppearancesInChallengeScreen { get; set; } Property Value Type Description System.Int32 AppearsInChallengeScreen True if this challenge appears in the challenge screen (AppearancesInChallengeScreen > 0), false otherwise. Declaration public bool AppearsInChallengeScreen { get; set; } Property Value Type Description System.Boolean Boss If true, this challenge's icon(s) will occupy the entire column like the Final Boss challenge icon, and be ordered to the right of regular challenges. Declaration public bool Boss { get; set; } Property Value Type Description System.Boolean BossSortValue This challenge's SortValue, accounting for if Boss is true. -2 - Positive Boss -3 - Zero Boss -4 - Negative Boss Declaration public int BossSortValue { get; } Property Value Type Description System.Int32 Challenge The challenge info of this FullChallenge. Declaration public AscensionChallengeInfo Challenge { get; set; } Property Value Type Description DiskCardGame.AscensionChallengeInfo ChallengeHandler The challenge handler type for this challenge. For this to be valid, it should inherit ChallengeBehaviour, not be abstract and not be null. This is basically a trigger receiver that will be instantiated every time the player enters a card battle for easy challenge effects. Declaration public Type ChallengeHandler { get; set; } Property Value Type Description Type CustomUnlockCheck A function that needs to return true for the challenge to be unlocked. Optional. If this isn't set, this check will be bypassed. The int argument is the current Kaycee's Mod challenge level. Declaration public Func<int, bool> CustomUnlockCheck { get; set; } Property Value Type Description Func < System.Int32 , System.Boolean > DependantChallengeGetter A func that will return the list of the challenges required for this challenge to be activated. Defaults to null, or no dependencies. Declaration public Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> DependantChallengeGetter { get; set; } Property Value Type Description Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> Flags The object flags for the challenge. Doesn't do anything by itself, but can be used for building a list of incompatible and dependant challenges. Defaults to null. Declaration public List<object> Flags { get; set; } Property Value Type Description List < System.Object > IncompatibleChallengeGetter A func that will return the list of the challenges incompatible with this challenge, that will get disabled when this challenge is activated. Defaults to null, or no incompatibilities. Declaration public Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> IncompatibleChallengeGetter { get; set; } Property Value Type Description Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> SortValue The sorting value of this challenge based on its pointValue. 1 - Positive 0 - Zero -1 - Negative Declaration public int SortValue { get; } Property Value Type Description System.Int32 Stackable True if this challenge appears more than 1 time in the challenge screen, false otherwise. Declaration public bool Stackable { get; set; } Property Value Type Description System.Boolean UnlockLevel The minimum unlock level required for the challenge to be playable. Declaration public int UnlockLevel { get; set; } Property Value Type Description System.Int32 Methods HasValidHandler() Returns true if this challenge has a valid handler type (inherits ChallengeBehaviour, not abstract and not null), false otherwise. Declaration public bool HasValidHandler() Returns Type Description System.Boolean True if this challenge has a valid handler type (inherits ChallengeBehaviour, not abstract and not null), false otherwise. SetAppearancesInChallengeScreen(Int32) Sets the number of appearances in challenge screen of this full challenge. Declaration public ChallengeManager.FullChallenge SetAppearancesInChallengeScreen(int appearancesInChallengeScreen) Parameters Type Name Description System.Int32 appearancesInChallengeScreen The new number of appearances in challenge screen for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetBoss(Boolean) Declaration public ChallengeManager.FullChallenge SetBoss(bool boss) Parameters Type Name Description System.Boolean boss Returns Type Description ChallengeManager.FullChallenge SetChallenge(AscensionChallengeInfo) Sets the AscensionChallengeInfo of this full challenge. Declaration public ChallengeManager.FullChallenge SetChallenge(AscensionChallengeInfo challenge) Parameters Type Name Description DiskCardGame.AscensionChallengeInfo challenge The new AscensionChallengeInfo for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetChallengeHandler(Type) Sets the challenge handler type of this full challenge. Declaration public ChallengeManager.FullChallenge SetChallengeHandler(Type challengeHandler) Parameters Type Name Description Type challengeHandler The new challenge handler for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetCustomUnlock(Func<Int32, Boolean>) Sets the custom unlock check of this full challenge Declaration public ChallengeManager.FullChallenge SetCustomUnlock(Func<int, bool> check) Parameters Type Name Description Func < System.Int32 , System.Boolean > check The new custom unlock check for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetDependantChallengeGetter(Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>) Sets the dependant challenge getter of this full challenge. Declaration public ChallengeManager.FullChallenge SetDependantChallengeGetter(Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> dependantChallengeGetter) Parameters Type Name Description Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> dependantChallengeGetter The new dependant challenge getter for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetDependantChallengeGetterFlagBlacklist(String[]) Sets the dependant blacklist challenge flags (flags that challenges should NOT have to be counted dependencies for this challenge) of this full challenge. Declaration public ChallengeManager.FullChallenge SetDependantChallengeGetterFlagBlacklist(params string[] blacklistFlags) Parameters Type Name Description System.String [] blacklistFlags The new dependant blacklist challenge flags for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetDependantChallengeGetterFlagWhitelist(String[]) Sets the dependant whitelist challenge flags (flags that challenges should have to be counted dependencies for this challenge) of this full challenge. Declaration public ChallengeManager.FullChallenge SetDependantChallengeGetterFlagWhitelist(params string[] whitelistFlags) Parameters Type Name Description System.String [] whitelistFlags The new dependant whitelist challenge flags for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetDependantChallengeGetterStatic(AscensionChallenge[]) Sets the dependency challenges of this full challenge. Declaration public ChallengeManager.FullChallenge SetDependantChallengeGetterStatic(params AscensionChallenge[] dependantChallenges) Parameters Type Name Description DiskCardGame.AscensionChallenge [] dependantChallenges The new dependency challenges for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetFlags(Object[]) Sets the flags of this full challenge Declaration public ChallengeManager.FullChallenge SetFlags(params object[] flags) Parameters Type Name Description System.Object [] flags The new flags for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetIncompatibleChallengeGetter(Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>) Sets the incompatible challenge getter of this full challenge. Declaration public ChallengeManager.FullChallenge SetIncompatibleChallengeGetter(Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> incompatibleChallengeGetter) Parameters Type Name Description Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> incompatibleChallengeGetter The new incompatible challenge getter for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetIncompatibleChallengeGetterFlagBlacklist(String[]) Sets the incompatible blacklist challenge flags (flags that challenges should NOT have to be counted incompatible with this challenge) of this full challenge. Declaration public ChallengeManager.FullChallenge SetIncompatibleChallengeGetterFlagBlacklist(params string[] blacklistFlags) Parameters Type Name Description System.String [] blacklistFlags The new incompatible blacklist challenge flags for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetIncompatibleChallengeGetterFlagWhitelist(String[]) Sets the incompatible whitelist challenge flags (flags that challenges should have to be counted incompatible with this challenge) of this full challenge. Declaration public ChallengeManager.FullChallenge SetIncompatibleChallengeGetterFlagWhitelist(params string[] whitelistFlags) Parameters Type Name Description System.String [] whitelistFlags The new incompatible whitelist challenge flags for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetIncompatibleChallengeGetterStatic(AscensionChallenge[]) Sets the incompatible challenges of this full challenge. Declaration public ChallengeManager.FullChallenge SetIncompatibleChallengeGetterStatic(params AscensionChallenge[] incompatibleChallenges) Parameters Type Name Description DiskCardGame.AscensionChallenge [] incompatibleChallenges The new incompatible challenges for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. SetUnlockLevel(Int32) Sets the unlock level of this full challenge. Declaration public ChallengeManager.FullChallenge SetUnlockLevel(int unlockLevel) Parameters Type Name Description System.Int32 unlockLevel The new unlock level for this challenge. Returns Type Description ChallengeManager.FullChallenge This full challenge, for chaining purposes. ValidHandlerType(Type) Returns true if t is a valid challenge handler type (inherits ChallengeBehaviour, not abstract and not null), false otherwise. Declaration public static bool ValidHandlerType(Type t) Parameters Type Name Description Type t The type to check. Returns Type Description System.Boolean True if t is a valid challenge handler type (inherits ChallengeBehaviour, not abstract and not null), false otherwise. Operators Implicit(ChallengeManager.FullChallenge to AscensionChallengeInfo) Converts this full challenge to an AscensionChallengeInfo, returning this.Challenge. Declaration public static implicit operator AscensionChallengeInfo(ChallengeManager.FullChallenge fc) Parameters Type Name Description ChallengeManager.FullChallenge fc this.Challenge. Returns Type Description DiskCardGame.AscensionChallengeInfo Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.ChallengeManager.html": {
    "href": "api/InscryptionAPI.Ascension.ChallengeManager.html",
    "title": "Class ChallengeManager | InscryptionAPI",
    "keywords": "Class ChallengeManager The core class for handling and adding challenges, Inheritance System.Object ChallengeManager Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class ChallengeManager Fields AllChallenges All challenges in the form of ChallengeManager.FullChallenge, including both basegame and new challenges. Declaration public static List<ChallengeManager.FullChallenge> AllChallenges Field Value Type Description List < ChallengeManager.FullChallenge > BaseGameChallenges The list of all base game challenges in the form of ChallengeManager.FullChallenge. Declaration public static readonly ReadOnlyCollection<ChallengeManager.FullChallenge> BaseGameChallenges Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < ChallengeManager.FullChallenge > DEFAULT_ACTIVATED_SPRITE The default activated eye sprite for challenges. Declaration public static readonly Texture2D DEFAULT_ACTIVATED_SPRITE Field Value Type Description Texture2D HAPPY_ACTIVATED_SPRITE The activated eye sprite for the \"More Difficult\" challenge. Can be used for other challenges with that form of eyes. Declaration public static readonly Texture2D HAPPY_ACTIVATED_SPRITE Field Value Type Description Texture2D NewChallenges The list of all new challenges added with the API in the form of ChallengeManager.FullChallenge. Declaration public static readonly ReadOnlyCollection<ChallengeManager.FullChallenge> NewChallenges Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < ChallengeManager.FullChallenge > Properties AllInfo All challenges in the form of AscensionChallengeInfo, including both basegame and new challenges. Declaration public static List<AscensionChallengeInfo> AllInfo { get; } Property Value Type Description List < DiskCardGame.AscensionChallengeInfo > Methods Add(String, AscensionChallengeInfo, Int32, Boolean) Adds a new challenge with the info of AscensionChallengeInfo, adds the additional info to it and returns it. Declaration public static ChallengeManager.FullChallenge Add(string pluginGuid, AscensionChallengeInfo info, int unlockLevel = 0, bool stackable = false) Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. DiskCardGame.AscensionChallengeInfo info The challenge info to add. System.Int32 unlockLevel The minimum unlock level required for the challenge to be playable. Defaults to 0. System.Boolean stackable True if the challenge should appear twice in the challenge screen, false otherwise. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the challenge info and other additional info. Add(String, String, String, Int32, Texture2D, Texture2D, Int32, Boolean) Adds a new challenge with the info of AscensionChallengeInfo, adds the additional info to it and returns it. Declaration public static ChallengeManager.FullChallenge Add(string pluginGuid, string title, string description, int pointValue, Texture2D iconTexture, Texture2D activatedTexture, int unlockLevel = 0, bool stackable = false) Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. System.String title The name of the challenge that will be displayed in the challenge screen. System.String description The description of the challenge that will be displayed in the challenge screen. System.Int32 pointValue The points given for activating the challenge. Texture2D iconTexture The icon of the challenge that will appear in the challenge screen. Texture2D activatedTexture The glowy part of the icon that will be shown when the challenge is activated. System.Int32 unlockLevel The minimum level required for the challenge to be playable. Defaults to 0. System.Boolean stackable True if the challenge should appear twice in the challenge screen, false otherwise. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the built challenge info and other additional info. AddSpecific(String, AscensionChallengeInfo, Int32, Int32) Adds a new challenge with the info of AscensionChallengeInfo, adds the additional info to it and returns it. Declaration public static ChallengeManager.FullChallenge AddSpecific(string pluginGuid, AscensionChallengeInfo info, int unlockLevel = 0, int numAppearancesInChallengeScreen = 1) Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. DiskCardGame.AscensionChallengeInfo info The challenge info to add. System.Int32 unlockLevel The minimum unlock level required for the challenge to be playable. Defaults to 0. System.Int32 numAppearancesInChallengeScreen The number of times this challenge should appear in the challenge screen. Defaults to 1. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the challenge info and other additional info. AddSpecific(String, AscensionChallengeInfo, Type, Int32, List<Object>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Int32) Adds a new challenge with the info of AscensionChallengeInfo, adds the additional info to it and returns it. Declaration public static ChallengeManager.FullChallenge AddSpecific(string pluginGuid, AscensionChallengeInfo info, Type handlerType = null, int unlockLevel = 0, List<object> flags = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> dependantChallengeGetter = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> incompatibleChallengeGetter = null, int numAppearancesInChallengeScreen = 1) Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. DiskCardGame.AscensionChallengeInfo info The challenge info to add. Type handlerType The challenge handler type for the challenge. System.Int32 unlockLevel The minimum level required for the challenge to be playable. Defaults to 0. List < System.Object > flags The object flags for the challenge. Doesn't do anything by itself, but can be used for building a list of incompatible and dependant challenges. Defaults to null. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> dependantChallengeGetter A func that will return the list of the challenges required for this challenge to be activated. Defaults to null, or no dependencies. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> incompatibleChallengeGetter A func that will return the list of the challenges incompatible with this challenge, that will get disabled when this challenge is activated. Defaults to null, or no incompatibilities. System.Int32 numAppearancesInChallengeScreen The number of times this challenge should appear in the challenge screen. Defaults to 1. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the challenge info and other additional info. AddSpecific(String, String, String, Int32, Texture2D, Texture2D, Int32, Int32) Creates and registers a new challenge. Declaration public static ChallengeManager.FullChallenge AddSpecific(string pluginGuid, string title, string description, int pointValue, Texture2D iconTexture, Texture2D activatedTexture, int unlockLevel = 0, int numAppearancesInChallengeScreen = 1) Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. System.String title The name of the challenge that will be displayed in the challenge screen. System.String description The description of the challenge that will be displayed in the challenge screen. System.Int32 pointValue The points given for activating the challenge. Texture2D iconTexture The icon of the challenge that will appear in the challenge screen. Texture2D activatedTexture The glowy part of the icon that will be shown when the challenge is activated. System.Int32 unlockLevel The minimum level required for the challenge to be playable. Defaults to 0. System.Int32 numAppearancesInChallengeScreen The number of times this challenge should appear in the challenge screen. Defaults to 1. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the built challenge info and other additional info. AddSpecific(String, String, String, Int32, Texture2D, Texture2D, Type, Int32, List<Object>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Int32) Creates and registers a new challenge. Declaration public static ChallengeManager.FullChallenge AddSpecific(string pluginGuid, string title, string description, int pointValue, Texture2D iconTexture, Texture2D activatedTexture, Type handlerType = null, int unlockLevel = 0, List<object> flags = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> dependantChallengeGetter = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> incompatibleChallengeGetter = null, int numAppearancesInChallengeScreen = 1) Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. System.String title The name of the challenge that will be displayed in the challenge screen. System.String description The description of the challenge that will be displayed in the challenge screen. System.Int32 pointValue The points given for activating the challenge. Texture2D iconTexture The icon of the challenge that will appear in the challenge screen. Texture2D activatedTexture The glowy part of the icon that will be shown when the challenge is activated. Type handlerType The challenge handler type for the challenge. System.Int32 unlockLevel The minimum level required for the challenge to be playable. Defaults to 0. List < System.Object > flags The object flags for the challenge. Doesn't do anything by itself, but can be used for building a list of incompatible and dependant challenges. Defaults to null. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> dependantChallengeGetter A func that will return the list of the challenges required for this challenge to be activated. Defaults to null, or no dependencies. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> incompatibleChallengeGetter A func that will return the list of the challenges incompatible with this challenge, that will get disabled when this challenge is activated. Defaults to null, or no incompatibilities. System.Int32 numAppearancesInChallengeScreen The number of times this challenge should appear in the challenge screen. Defaults to 1. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the built challenge info and other additional info. AddSpecific<T>(String, AscensionChallengeInfo, Int32, List<Object>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Int32) Adds a new challenge with the info of AscensionChallengeInfo, adds the additional info to it and returns it. Declaration public static ChallengeManager.FullChallenge AddSpecific<T>(string pluginGuid, AscensionChallengeInfo info, int unlockLevel = 0, List<object> flags = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> dependantChallengeGetter = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> incompatibleChallengeGetter = null, int numAppearancesInChallengeScreen = 1) where T : ChallengeBehaviour Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. DiskCardGame.AscensionChallengeInfo info The challenge info to add. System.Int32 unlockLevel The minimum level required for the challenge to be playable. Defaults to 0. List < System.Object > flags The object flags for the challenge. Doesn't do anything by itself, but can be used for building a list of incompatible and dependant challenges. Defaults to null. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> dependantChallengeGetter A func that will return the list of the challenges required for this challenge to be activated. Defaults to null, or no dependencies. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> incompatibleChallengeGetter A func that will return the list of the challenges incompatible with this challenge, that will get disabled when this challenge is activated. Defaults to null, or no incompatibilities. System.Int32 numAppearancesInChallengeScreen The number of times this challenge should appear in the challenge screen. Defaults to 1. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the challenge info and other additional info. Type Parameters Name Description T The challenge handler type for the challenge. AddSpecific<T>(String, String, String, Int32, Texture2D, Texture2D, Int32, List<Object>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>>, Int32) Creates and registers a new challenge. Declaration public static ChallengeManager.FullChallenge AddSpecific<T>(string pluginGuid, string title, string description, int pointValue, Texture2D iconTexture, Texture2D activatedTexture, int unlockLevel = 0, List<object> flags = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> dependantChallengeGetter = null, Func<ChallengeManager.FullChallenge[], IEnumerable<AscensionChallenge>> incompatibleChallengeGetter = null, int numAppearancesInChallengeScreen = 1) where T : ChallengeBehaviour Parameters Type Name Description System.String pluginGuid The GUID of the plugin adding the challenge. System.String title The name of the challenge that will be displayed in the challenge screen. System.String description The description of the challenge that will be displayed in the challenge screen. System.Int32 pointValue The points given for activating the challenge. Texture2D iconTexture The icon of the challenge that will appear in the challenge screen. Texture2D activatedTexture The glowy part of the icon that will be shown when the challenge is activated. System.Int32 unlockLevel The minimum level required for the challenge to be playable. Defaults to 0. List < System.Object > flags The object flags for the challenge. Doesn't do anything by itself, but can be used for building a list of incompatible and dependant challenges. Defaults to null. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> dependantChallengeGetter A func that will return the list of the challenges required for this challenge to be activated. Defaults to null, or no dependencies. Func < ChallengeManager.FullChallenge [], System.Collections.IEnumerable < DiskCardGame.AscensionChallenge >> incompatibleChallengeGetter A func that will return the list of the challenges incompatible with this challenge, that will get disabled when this challenge is activated. Defaults to null, or no incompatibilities. System.Int32 numAppearancesInChallengeScreen The number of times this challenge should appear in the challenge screen. Defaults to 1. Returns Type Description ChallengeManager.FullChallenge The built ChallengeManager.FullChallenge, with the built challenge info and other additional info. Type Parameters Name Description T The challenge handler type for the challenge. GetFullChallenge(AscensionChallenge) Gets the ChallengeManager.FullChallenge with the challengeType equal to info. Declaration public static ChallengeManager.FullChallenge GetFullChallenge(this AscensionChallenge info) Parameters Type Name Description DiskCardGame.AscensionChallenge info The challenge type to search for. Returns Type Description ChallengeManager.FullChallenge The full challenge that was found. GetFullChallenge(AscensionChallengeInfo) Gets the ChallengeManager.FullChallenge with the challengeType equal to info's challengeType. Declaration public static ChallengeManager.FullChallenge GetFullChallenge(this AscensionChallengeInfo info) Parameters Type Name Description DiskCardGame.AscensionChallengeInfo info The AscensionChallengeInfo with the challenge type to search for. Returns Type Description ChallengeManager.FullChallenge The full challenge that was found. GetInfo(AscensionChallenge) Gets the AscensionChallengeInfo with the challengeType equal to info. Declaration public static AscensionChallengeInfo GetInfo(this AscensionChallenge info) Parameters Type Name Description DiskCardGame.AscensionChallenge info The challenge type to search for. Returns Type Description DiskCardGame.AscensionChallengeInfo The challenge that was found. IsStackable(AscensionChallenge) Returns true if the challenge with the challengeType of id is stackable, false otherwise. Declaration public static bool IsStackable(AscensionChallenge id) Parameters Type Name Description DiskCardGame.AscensionChallenge id The challenge type to search for. Returns Type Description System.Boolean True if the challenge with the challengeType of id is stackable, false otherwise. SyncChallengeList() Declaration public static void SyncChallengeList() Events ModifyChallenges Declaration public static event Func<List<ChallengeManager.FullChallenge>, List<ChallengeManager.FullChallenge>> ModifyChallenges Event Type Type Description Func < List < ChallengeManager.FullChallenge >, List < ChallengeManager.FullChallenge >>"
  },
  "api/InscryptionAPI.Ascension.html": {
    "href": "api/InscryptionAPI.Ascension.html",
    "title": "Namespace InscryptionAPI.Ascension | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Ascension This namespace is dedicated to managing systems relating specifically to Kaycee's Mod, such as challenges and starter decks. Classes AscensionChallengePaginator AscensionChallengePaginatorSetupifier AscensionRunSetupScreenBase AscensionScreenManager AscensionScreenSort ChallengeBehaviour Base class for all custom Challenge Handlers. ChallengeDisplayerPlus ChallengeDisplayerPlus.PrefixedString ChallengeManager The core class for handling and adding challenges, ChallengeManager.FullChallenge Class that stores full info about challenges, including unlock level, stackability, handlers and incompatible/dependant challenges. StarterDeckManager StarterDeckManager.FullStarterDeck StarterDeckPaginator Enums AscensionScreenSort.Direction"
  },
  "api/InscryptionAPI.Ascension.StarterDeckManager.FullStarterDeck.html": {
    "href": "api/InscryptionAPI.Ascension.StarterDeckManager.FullStarterDeck.html",
    "title": "Class StarterDeckManager.FullStarterDeck | InscryptionAPI",
    "keywords": "Class StarterDeckManager.FullStarterDeck Inheritance System.Object StarterDeckManager.FullStarterDeck Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class FullStarterDeck Properties CardNames Declaration public List<string> CardNames { get; set; } Property Value Type Description List < System.String > CustomUnlockCheck A function that needs to return true for the starter deck to be unlocked. Optional. If this isn't set, this check will be bypassed. The int argument is the current Kaycee's Mod challenge level. Declaration public Func<int, bool> CustomUnlockCheck { get; set; } Property Value Type Description Func < System.Int32 , System.Boolean > Info Declaration public StarterDeckInfo Info { get; set; } Property Value Type Description DiskCardGame.StarterDeckInfo UnlockLevel Declaration public int UnlockLevel { get; set; } Property Value Type Description System.Int32 Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Ascension.StarterDeckManager.html": {
    "href": "api/InscryptionAPI.Ascension.StarterDeckManager.html",
    "title": "Class StarterDeckManager | InscryptionAPI",
    "keywords": "Class StarterDeckManager Inheritance System.Object StarterDeckManager Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class StarterDeckManager Fields AllDeckInfos Declaration public static List<StarterDeckInfo> AllDeckInfos Field Value Type Description List < DiskCardGame.StarterDeckInfo > AllDecks Declaration public static List<StarterDeckManager.FullStarterDeck> AllDecks Field Value Type Description List < StarterDeckManager.FullStarterDeck > BaseGameDecks Declaration public static readonly ReadOnlyCollection<StarterDeckManager.FullStarterDeck> BaseGameDecks Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < StarterDeckManager.FullStarterDeck > Methods Add(String, StarterDeckInfo, Int32) Declaration public static StarterDeckManager.FullStarterDeck Add(string pluginGuid, StarterDeckInfo info, int unlockLevel = 0) Parameters Type Name Description System.String pluginGuid DiskCardGame.StarterDeckInfo info System.Int32 unlockLevel Returns Type Description StarterDeckManager.FullStarterDeck New(String, String, String, String[], Int32) Declaration public static StarterDeckManager.FullStarterDeck New(string pluginGuid, string title, string pathToIconTexture, string[] cardNames, int unlockLevel = 0) Parameters Type Name Description System.String pluginGuid System.String title System.String pathToIconTexture System.String [] cardNames System.Int32 unlockLevel Returns Type Description StarterDeckManager.FullStarterDeck New(String, String, Texture2D, String[], Int32) Declaration public static StarterDeckManager.FullStarterDeck New(string pluginGuid, string title, Texture2D iconTexture, string[] cardNames, int unlockLevel = 0) Parameters Type Name Description System.String pluginGuid System.String title Texture2D iconTexture System.String [] cardNames System.Int32 unlockLevel Returns Type Description StarterDeckManager.FullStarterDeck SyncDeckList() Declaration public static void SyncDeckList() Events ModifyDeckList Declaration public static event Func<List<StarterDeckManager.FullStarterDeck>, List<StarterDeckManager.FullStarterDeck>> ModifyDeckList Event Type Type Description Func < List < StarterDeckManager.FullStarterDeck >, List < StarterDeckManager.FullStarterDeck >>"
  },
  "api/InscryptionAPI.Ascension.StarterDeckPaginator.html": {
    "href": "api/InscryptionAPI.Ascension.StarterDeckPaginator.html",
    "title": "Class StarterDeckPaginator | InscryptionAPI",
    "keywords": "Class StarterDeckPaginator Inheritance System.Object Object Component Behaviour MonoBehaviour StarterDeckPaginator Namespace : InscryptionAPI.Ascension Assembly : InscryptionAPI.dll Syntax public class StarterDeckPaginator : MonoBehaviour Fields leftArrow Declaration public GameObject leftArrow Field Value Type Description GameObject pageIndex Declaration public int pageIndex Field Value Type Description System.Int32 pageLength Declaration public int pageLength Field Value Type Description System.Int32 pages Declaration public List<List<StarterDeckInfo>> pages Field Value Type Description List < List < DiskCardGame.StarterDeckInfo >> rightArrow Declaration public GameObject rightArrow Field Value Type Description GameObject screen Declaration public AscensionChooseStarterDeckScreen screen Field Value Type Description DiskCardGame.AscensionChooseStarterDeckScreen Methods AddPage(List<StarterDeckInfo>) Declaration public void AddPage(List<StarterDeckInfo> page) Parameters Type Name Description List < DiskCardGame.StarterDeckInfo > page LoadPage(List<StarterDeckInfo>) Declaration public void LoadPage(List<StarterDeckInfo> page) Parameters Type Name Description List < DiskCardGame.StarterDeckInfo > page NextPage() Declaration public void NextPage() OnEnable() Declaration public void OnEnable() PreviousPage() Declaration public void PreviousPage() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Boons.BoonBehaviour.html": {
    "href": "api/InscryptionAPI.Boons.BoonBehaviour.html",
    "title": "Class BoonBehaviour | InscryptionAPI",
    "keywords": "Class BoonBehaviour Base class for all custom Boons Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.NonCardTriggerReceiver BoonBehaviour Namespace : InscryptionAPI.Boons Assembly : InscryptionAPI.dll Syntax public class BoonBehaviour : NonCardTriggerReceiver Properties boon The unique id for this boon Declaration public BoonManager.FullBoon boon { get; } Property Value Type Description BoonManager.FullBoon instanceNumber The instance number for this boon once instantiated Declaration public int instanceNumber { get; } Property Value Type Description System.Int32 Methods AnyInstancesOfType(BoonData.Type) Indicates if there are any active boon behaviours of the given type Declaration public static bool AnyInstancesOfType(BoonData.Type type) Parameters Type Name Description DiskCardGame.BoonData.Type type The boon type to search for. Returns Type Description System.Boolean True if there is at least one boon of the given type; false otherwise. CountInstancesOfType(BoonData.Type) Gets the count of active boon behaviours for the given boon type Declaration public static int CountInstancesOfType(BoonData.Type type) Parameters Type Name Description DiskCardGame.BoonData.Type type The boon type to search for. Returns Type Description System.Int32 The count of all boon behaviours that are active in battle. FindInstancesOfType(BoonData.Type) Gets all active boon behaviours for the given boon type Declaration public static List<BoonBehaviour> FindInstancesOfType(BoonData.Type type) Parameters Type Name Description DiskCardGame.BoonData.Type type The boon type to search for. Returns Type Description List < BoonBehaviour > A list of all boon behaviours that are active in battle. OnDestroy() Fires when the boon behaviour is destroyed Declaration public void OnDestroy() OnPostBattleCleanup() Override this to have your boon take an action at the end of battle after vanilla boons activate Declaration public virtual IEnumerator OnPostBattleCleanup() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. OnPostBoonActivation() Override this to have your boon take an action at the beginning of battle after vanilla boons activate Declaration public virtual IEnumerator OnPostBoonActivation() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. OnPreBattleCleanup() Override this to have your boon take an action at the end of battle before vanilla boons activate Declaration public virtual IEnumerator OnPreBattleCleanup() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. OnPreBoonActivation() Override this to have your boon take an action at the beginning of battle before vanilla boons activate Declaration public virtual IEnumerator OnPreBoonActivation() Returns Type Description System.Collections.IEnumerator A sequence of Unity events containing those actions. PlayBoonAnimation() Displays the boon card in battle to indicate to the player that the boon is responsible for the effect that is happening Declaration protected IEnumerator PlayBoonAnimation() Returns Type Description System.Collections.IEnumerator A sequence of Unity events that plays the boon card animation. RespondsToPostBattleCleanup() Override this to indicate if this boon needs to take an action at the end of battle after vanilla boons activate Declaration public virtual bool RespondsToPostBattleCleanup() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. RespondsToPostBoonActivation() Override this to indicate if this boon needs to take an action at the beginning of battle after vanilla boons activate Declaration public virtual bool RespondsToPostBoonActivation() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. RespondsToPreBattleCleanup() Override this to indicate if this boon needs to take an action at the end of battle before vanilla boons activate Declaration public virtual bool RespondsToPreBattleCleanup() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. RespondsToPreBoonActivation() Override this to indicate if this boon needs to take an action at the beginning of battle before vanilla boons activate Declaration public virtual bool RespondsToPreBoonActivation() Returns Type Description System.Boolean True if the boon wants to respond, false otherwise. Start() Fires when the boon behavior starts up Declaration public void Start() Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Boons.BoonManager.FullBoon.html": {
    "href": "api/InscryptionAPI.Boons.BoonManager.FullBoon.html",
    "title": "Class BoonManager.FullBoon | InscryptionAPI",
    "keywords": "Class BoonManager.FullBoon Maps custom BoonData objects to the trigger handler that manages them. Inheritance System.Object BoonManager.FullBoon Namespace : InscryptionAPI.Boons Assembly : InscryptionAPI.dll Syntax public class FullBoon Fields appearInRulebook Indicates if the boon should appear in the rulebook under the Boons section. Declaration public bool appearInRulebook Field Value Type Description System.Boolean boon Describes the boon Declaration public BoonData boon Field Value Type Description DiskCardGame.BoonData boonHandlerType A subclass of BoonBehaviour that implements the boon's behaviour. Declaration public Type boonHandlerType Field Value Type Description Type stacks Indicates if the player can have multiple instances of this boon in their deck. Declaration public bool stacks Field Value Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Boons.BoonManager.html": {
    "href": "api/InscryptionAPI.Boons.BoonManager.html",
    "title": "Class BoonManager | InscryptionAPI",
    "keywords": "Class BoonManager This manager handles the creation of new Boons and ensures they are properly attached to battles. Inheritance System.Object BoonManager Namespace : InscryptionAPI.Boons Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class BoonManager Fields BaseGameBoons All boons that come as part of the vanilla game. Declaration public static readonly ReadOnlyCollection<BoonData> BaseGameBoons Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < DiskCardGame.BoonData > Properties AllBoonsCopy All boons, including vanilla and mod-added boons. Declaration public static List<BoonData> AllBoonsCopy { get; } Property Value Type Description List < DiskCardGame.BoonData > Methods New(String, String, Type, String, String, String, Boolean, Boolean, Boolean) Creates a new boon and adds it to the list of boons the player can receive. Declaration public static BoonData.Type New(string guid, string name, Type boonHandlerType, string rulebookDescription, string pathToIcon, string pathToCardArt, bool stackable = true, bool appearInLeshyTrials = true, bool appearInRulebook = true) Parameters Type Name Description System.String guid The guid of the mod adding the boon. System.String name The name of the boom as it should appear in the rulebook. Type boonHandlerType A subclass of BoonBehaviour that implements the boon's behaviour. System.String rulebookDescription The description of this boon in the rulebook. System.String pathToIcon Path to the icon that appears in the center of the card art and in the rulebook. System.String pathToCardArt Path to the art that surrounds the boon. System.Boolean stackable Indicates if the player can have multiple instances of this boon. System.Boolean appearInLeshyTrials Indicates if the boon should appear in Leshy trials (the boon trials that happen right before battling Leshy in a non-Kaycee's mod run. System.Boolean appearInRulebook Indicates if the boon should appear in the rulebook. Returns Type Description DiskCardGame.BoonData.Type The unique identifier for this boon. New(String, String, Type, String, Texture, Texture, Boolean, Boolean, Boolean) Creates a new boon and adds it to the list of boons the player can receive. Declaration public static BoonData.Type New(string guid, string name, Type boonHandlerType, string rulebookDescription, Texture icon, Texture cardArt, bool stackable = true, bool appearInLeshyTrials = true, bool appearInRulebook = true) Parameters Type Name Description System.String guid The guid of the mod adding the boon. System.String name The name of the boom as it should appear in the rulebook. Type boonHandlerType A subclass of BoonBehaviour that implements the boon's behaviour. System.String rulebookDescription The description of this boon in the rulebook. Texture icon The icon that appears in the center of the card art and in the rulebook. Texture cardArt The art that surrounds the boon. System.Boolean stackable Indicates if the player can have multiple instances of this boon. System.Boolean appearInLeshyTrials Indicates if the boon should appear in Leshy trials (the boon trials that happen right before battling Leshy in a non-Kaycee's mod run. System.Boolean appearInRulebook Indicates if the boon should appear in the rulebook. Returns Type Description DiskCardGame.BoonData.Type The unique identifier for this boon. New<T>(String, String, String, String, String, Boolean, Boolean, Boolean) Creates a new boon and adds it to the list of boons the player can receive. Declaration public static BoonData.Type New<T>(string guid, string name, string rulebookDescription, string pathToIcon, string pathToCardArt, bool stackable = true, bool appearInLeshyTrials = true, bool appearInRulebook = true) where T : BoonBehaviour Parameters Type Name Description System.String guid The guid of the mod adding the boon. System.String name The name of the boom as it should appear in the rulebook. System.String rulebookDescription The description of this boon in the rulebook. System.String pathToIcon Path to the icon that appears in the center of the card art and in the rulebook. System.String pathToCardArt Path to the art that surrounds the boon. System.Boolean stackable Indicates if the player can have multiple instances of this boon. System.Boolean appearInLeshyTrials Indicates if the boon should appear in Leshy trials (the boon trials that happen right before battling Leshy in a non-Kaycee's mod run. System.Boolean appearInRulebook Indicates if the boon should appear in the rulebook. Returns Type Description DiskCardGame.BoonData.Type The unique identifier for this boon. Type Parameters Name Description T A subclass of BoonBehaviour that implements the boon's behaviour New<T>(String, String, String, Texture, Texture, Boolean, Boolean, Boolean) Creates a new boon and adds it to the list of boons the player can receive. Declaration public static BoonData.Type New<T>(string guid, string name, string rulebookDescription, Texture icon, Texture cardArt, bool stackable = true, bool appearInLeshyTrials = true, bool appearInRulebook = true) where T : BoonBehaviour Parameters Type Name Description System.String guid The guid of the mod adding the boon. System.String name The name of the boom as it should appear in the rulebook. System.String rulebookDescription The description of this boon in the rulebook. Texture icon The icon that appears in the center of the card art and in the rulebook. Texture cardArt The art that surrounds the boon. System.Boolean stackable Indicates if the player can have multiple instances of this boon. System.Boolean appearInLeshyTrials Indicates if the boon should appear in Leshy trials (the boon trials that happen right before battling Leshy in a non-Kaycee's mod run. System.Boolean appearInRulebook Indicates if the boon should appear in the rulebook. Returns Type Description DiskCardGame.BoonData.Type The unique identifier for this boon. Type Parameters Name Description T A subclass of BoonBehaviour that implements the boon's behaviour"
  },
  "api/InscryptionAPI.Boons.DeckInfoExtensions.html": {
    "href": "api/InscryptionAPI.Boons.DeckInfoExtensions.html",
    "title": "Class DeckInfoExtensions | InscryptionAPI",
    "keywords": "Class DeckInfoExtensions This contains helper extension methods for the DeckInfo class Inheritance System.Object DeckInfoExtensions Namespace : InscryptionAPI.Boons Assembly : InscryptionAPI.dll Syntax public static class DeckInfoExtensions Methods RemoveAllBoonsOfType(DeckInfo, BoonData.Type) Removes all boons of a give type from the deck Declaration public static void RemoveAllBoonsOfType(this DeckInfo self, BoonData.Type type) Parameters Type Name Description DiskCardGame.DeckInfo self The deck to remove the boons from. DiskCardGame.BoonData.Type type The type of the boons to remove. RemoveBoon(DeckInfo, BoonData.Type) Removes a single boon of a given type from the deck Declaration public static void RemoveBoon(this DeckInfo self, BoonData.Type type) Parameters Type Name Description DiskCardGame.DeckInfo self The deck to remove the boon from. DiskCardGame.BoonData.Type type The type of the boon to remove."
  },
  "api/InscryptionAPI.Boons.html": {
    "href": "api/InscryptionAPI.Boons.html",
    "title": "Namespace InscryptionAPI.Boons | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Boons This namespace is dedicated to managing Boons, which provide unique passive effects during battles. Classes BoonBehaviour Base class for all custom Boons BoonManager This manager handles the creation of new Boons and ensures they are properly attached to battles. BoonManager.FullBoon Maps custom BoonData objects to the trigger handler that manages them. DeckInfoExtensions This contains helper extension methods for the DeckInfo class"
  },
  "api/InscryptionAPI.Card.AbilityExtensions.html": {
    "href": "api/InscryptionAPI.Card.AbilityExtensions.html",
    "title": "Class AbilityExtensions | InscryptionAPI",
    "keywords": "Class AbilityExtensions Helper extension methods for abilities Inheritance System.Object AbilityExtensions Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public static class AbilityExtensions Methods AbilityByID(IEnumerable<AbilityInfo>, Ability) Gets an ability based on its unique identifier. Declaration public static AbilityInfo AbilityByID(this IEnumerable<AbilityInfo> abilities, Ability id) Parameters Type Name Description IEnumerable < DiskCardGame.AbilityInfo > abilities The list of abiliites to search. DiskCardGame.Ability id The unique ID of the ability. Returns Type Description DiskCardGame.AbilityInfo The first ability with the given ID, or null if it was not found. AbilityByID(IEnumerable<AbilityManager.FullAbility>, Ability) Gets an ability based on its unique identifier. Declaration public static AbilityManager.FullAbility AbilityByID(this IEnumerable<AbilityManager.FullAbility> abilities, Ability id) Parameters Type Name Description IEnumerable < AbilityManager.FullAbility > abilities The list of abiliites to search. DiskCardGame.Ability id The unique ID of the ability. Returns Type Description AbilityManager.FullAbility The first ability with the given ID, or null if it was not found. AddMetaCategories(AbilityInfo, AbilityMetaCategory[]) Adds one or more metacategories to the ability. Duplicate categories will not be added. Declaration public static AbilityInfo AddMetaCategories(this AbilityInfo info, params AbilityMetaCategory[] categories) Parameters Type Name Description DiskCardGame.AbilityInfo info The instance of AbilityInfo. DiskCardGame.AbilityMetaCategory [] categories The metacategories to add. Returns Type Description DiskCardGame.AbilityInfo The same ability so a chain can continue. AddMetaCategories(StatIconInfo, AbilityMetaCategory[]) Adds one or more metacategories to the stati icon. Duplicate categories will not be added. Declaration public static StatIconInfo AddMetaCategories(this StatIconInfo info, params AbilityMetaCategory[] categories) Parameters Type Name Description DiskCardGame.StatIconInfo info The instance of StatIconInfo. DiskCardGame.AbilityMetaCategory [] categories The metacategories to add. Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. GetBaseRulebookDescription(AbilityInfo) Declaration public static string GetBaseRulebookDescription(this AbilityInfo info) Parameters Type Name Description DiskCardGame.AbilityInfo info Returns Type Description System.String GetExtendedProperty(Ability, String) Gets a custom property value from the card. Declaration public static string GetExtendedProperty(this Ability ability, string propertyName) Parameters Type Name Description DiskCardGame.Ability ability Ability to access. System.String propertyName The name of the property to get the value of. Returns Type Description System.String The retrieved property if it exists. GetExtendedProperty(AbilityInfo, String) Gets a custom property value from the card. Declaration public static string GetExtendedProperty(this AbilityInfo info, string propertyName) Parameters Type Name Description DiskCardGame.AbilityInfo info Ability to access. System.String propertyName The name of the property to get the value of. Returns Type Description System.String The retrieved property if it exists. GetExtendedPropertyAsBool(Ability, String) Gets a custom property as a boolean (can be null) Declaration public static bool? GetExtendedPropertyAsBool(this Ability ability, string propertyName) Parameters Type Name Description DiskCardGame.Ability ability Ability to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Boolean > Returns the value of the property as a boolean or null if it didn't exist or couldn't be parsed as boolean. GetExtendedPropertyAsBool(AbilityInfo, String) Gets a custom property as a boolean (can be null) Declaration public static bool? GetExtendedPropertyAsBool(this AbilityInfo info, string propertyName) Parameters Type Name Description DiskCardGame.AbilityInfo info Ability to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Boolean > Returns the value of the property as a boolean or null if it didn't exist or couldn't be parsed as boolean. GetExtendedPropertyAsFloat(Ability, String) Gets a custom property as a float (can by null) Declaration public static float? GetExtendedPropertyAsFloat(this Ability ability, string propertyName) Parameters Type Name Description DiskCardGame.Ability ability Ability to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Single > Returns the value of the property as a float or null if it didn't exist or couldn't be parsed as float. GetExtendedPropertyAsFloat(AbilityInfo, String) Gets a custom property as a float (can by null) Declaration public static float? GetExtendedPropertyAsFloat(this AbilityInfo info, string propertyName) Parameters Type Name Description DiskCardGame.AbilityInfo info Ability to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Single > Returns the value of the property as a float or null if it didn't exist or couldn't be parsed as float. GetExtendedPropertyAsInt(Ability, String) Gets a custom property as an int (can by null) Declaration public static int? GetExtendedPropertyAsInt(this Ability ability, string propertyName) Parameters Type Name Description DiskCardGame.Ability ability Ability to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Int32 > Returns the value of the property as an int or null if it didn't exist or couldn't be parsed as int. GetExtendedPropertyAsInt(AbilityInfo, String) Gets a custom property as an int (can by null) Declaration public static int? GetExtendedPropertyAsInt(this AbilityInfo info, string propertyName) Parameters Type Name Description DiskCardGame.AbilityInfo info Ability to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Int32 > Returns the value of the property as an int or null if it didn't exist or couldn't be parsed as int. GetHideSingleStacks(Ability) Gets the value of HideSingleStacks. Returns false if HideSingleStacks has not been set. Declaration public static bool GetHideSingleStacks(this Ability ability) Parameters Type Name Description DiskCardGame.Ability ability Returns Type Description System.Boolean Whether single stacks of this ability will be hidden when added to hiddenAbilities. GetHideSingleStacks(AbilityInfo) Gets the value of HideSingleStacks. Returns false if HideSingleStacks has not been set. Declaration public static bool GetHideSingleStacks(this AbilityInfo abilityInfo) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. Returns Type Description System.Boolean Whether single stacks of this ability will be hidden when added to hiddenAbilities. GetTriggersOncePerStack(Ability) Gets the value of TriggersOncePerStack. Returns false if TriggersOncePerStack has not been set. Declaration public static bool GetTriggersOncePerStack(this Ability ability) Parameters Type Name Description DiskCardGame.Ability ability Returns Type Description System.Boolean Whether double triggering is disabled. GetTriggersOncePerStack(AbilityInfo) Gets the value of TriggersOncePerStack. Returns false if TriggersOncePerStack has not been set. Declaration public static bool GetTriggersOncePerStack(this AbilityInfo abilityInfo) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. Returns Type Description System.Boolean Whether double triggering is disabled. HasMetaCategories(AbilityInfo, AbilityMetaCategory[]) Declaration public static bool HasMetaCategories(this AbilityInfo info, params AbilityMetaCategory[] categories) Parameters Type Name Description DiskCardGame.AbilityInfo info DiskCardGame.AbilityMetaCategory [] categories Returns Type Description System.Boolean HasMetaCategory(AbilityInfo, AbilityMetaCategory) Declaration public static bool HasMetaCategory(this AbilityInfo info, AbilityMetaCategory category) Parameters Type Name Description DiskCardGame.AbilityInfo info DiskCardGame.AbilityMetaCategory category Returns Type Description System.Boolean ResetDescription(AbilityInfo) Resets the AbilityInfo's rulebook description to its vanilla version. Useful for anyone messing with altering descriptions. Declaration public static AbilityInfo ResetDescription(this AbilityInfo abilityInfo) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetAbilityLearnedDialogue(AbilityInfo, DialogueEvent.Line[]) Sets the text displayed when this ability is marked as learned. Declaration public static AbilityInfo SetAbilityLearnedDialogue(this AbilityInfo abilityInfo, params DialogueEvent.Line[] lines) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. DialogueEvent.Line [] lines The text to display, represented by DialogueEvent.Line's. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetAbilityLearnedDialogue(AbilityInfo, String[]) Sets the text displayed when this ability is marked as learned. Declaration public static AbilityInfo SetAbilityLearnedDialogue(this AbilityInfo abilityInfo, params string[] lines) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.String [] lines The text to display, represented by strings. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetActivated(AbilityInfo, Boolean) Sets whether or not the ability is an activated ability. Declaration public static AbilityInfo SetActivated(this AbilityInfo abilityInfo, bool activated = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean activated If the ability is activated. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetAppliesToStats(StatIconInfo, Boolean, Boolean) Sets the StatIconInfo's appliesToAttack and appliesToHealth fields. Note these fields don't make the stat icon affect the stat; you still need to implement that logic. Declaration public static StatIconInfo SetAppliesToStats(this StatIconInfo info, bool appliesToAttack, bool appliesToHealth) Parameters Type Name Description DiskCardGame.StatIconInfo info System.Boolean appliesToAttack If the stat icon should cover a card's Power. System.Boolean appliesToHealth If the stat icon should cover a card's Health. Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. SetCanStack(AbilityInfo, Boolean, Boolean) Sets whether or not the ability can stack on a card, triggering once for each stack. Optional parameter for setting the ability to only trigger once per stack when a card evolves (only affects abilities that can stack). Declaration public static AbilityInfo SetCanStack(this AbilityInfo abilityInfo, bool canStack = true, bool triggersOncePerStack = false) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean canStack System.Boolean triggersOncePerStack Whether or not to prevent double triggering. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetConduit(AbilityInfo, Boolean) Sets whether or not the ability is a conduit. Declaration public static AbilityInfo SetConduit(this AbilityInfo abilityInfo, bool conduit = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean conduit If the ability is a conduit. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetConduitCell(AbilityInfo, Boolean) Sets whether or not the ability is a conduit cell. Declaration public static AbilityInfo SetConduitCell(this AbilityInfo abilityInfo, bool conduitCell = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean conduitCell If the ability is a conduit cell. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetCustomFlippedTexture(AbilityInfo, Texture2D) Sets the flipped texture for the ability (used when the ability belongs to the opponent). Declaration public static AbilityInfo SetCustomFlippedTexture(this AbilityInfo info, Texture2D icon) Parameters Type Name Description DiskCardGame.AbilityInfo info The ability info to set the texture for. Texture2D icon A 49x49 texture containing the icon. Returns Type Description DiskCardGame.AbilityInfo The same ability info so a chain can continue. Remarks You cannot do this unless the ability has been registered with the API. Unless the API knows about this ability, it will not have the required information to be able to process the texture, so an exception will be thrown if you try to do this to an instance of AbilityInfo that did not get processed through the API. Exceptions Type Condition System.InvalidOperationException Thrown if the ability info has not yet been added to the AbilityManager SetCustomFlippedTexture(AbilityManager.FullAbility, Texture2D) Sets the flipped texture for the ability (used when the ability belongs to the opponent). Declaration public static void SetCustomFlippedTexture(this AbilityManager.FullAbility info, Texture2D icon) Parameters Type Name Description AbilityManager.FullAbility info The ability info to set the texture for. Texture2D icon A 49x49 texture containing the icon. SetDefaultPart1Ability(AbilityInfo) Helper method: automatically adds the Part1Modular and Part1Rulebook metacategories to the ability. Declaration public static AbilityInfo SetDefaultPart1Ability(this AbilityInfo info) Parameters Type Name Description DiskCardGame.AbilityInfo info The instance of AbilityInfo. Returns Type Description DiskCardGame.AbilityInfo The same ability so a chain can continue. SetDefaultPart1Ability(StatIconInfo) Helper method: automatically adds the Part1Rulebook metacategories to the stat icon. Declaration public static StatIconInfo SetDefaultPart1Ability(this StatIconInfo info) Parameters Type Name Description DiskCardGame.StatIconInfo info The instance of StatIconInfo. Returns Type Description DiskCardGame.StatIconInfo The same stati icon so a chain can continue. SetDefaultPart2Ability(AbilityInfo) Helper method: automatically adds the custom metacategory Part2Modular to the ability. Declaration public static AbilityInfo SetDefaultPart2Ability(this AbilityInfo info) Parameters Type Name Description DiskCardGame.AbilityInfo info The instance of AbilityInfo. Returns Type Description DiskCardGame.AbilityInfo The same ability so a chain can continue. SetDefaultPart3Ability(AbilityInfo) Helper method: automatically adds the Part3Modular, Part3BuildACard, and Part3Rulebook metacategories to the ability. Declaration public static AbilityInfo SetDefaultPart3Ability(this AbilityInfo info) Parameters Type Name Description DiskCardGame.AbilityInfo info The instance of AbilityInfo. Returns Type Description DiskCardGame.AbilityInfo The same ability so a chain can continue. SetDefaultPart3Ability(StatIconInfo) Helper method: automatically adds the Part3Rulebook metacategories to the stat icon. Declaration public static StatIconInfo SetDefaultPart3Ability(this StatIconInfo info) Parameters Type Name Description DiskCardGame.StatIconInfo info The instance of StatIconInfo. Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. SetExtendedProperty(AbilityInfo, String, Object) Adds a custom property value to the AbilityInfo. Declaration public static AbilityInfo SetExtendedProperty(this AbilityInfo info, string propertyName, object value) Parameters Type Name Description DiskCardGame.AbilityInfo info Ability to access. System.String propertyName The name of the property to set. System.Object value The value of the property. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetExtendedProperty(AbilityManager.FullAbility, String, Object) Adds a custom property value to the FullAbility's AbilityInfo - intended as a shorthand for when modders are first adding abilities to the game. Declaration public static AbilityManager.FullAbility SetExtendedProperty(this AbilityManager.FullAbility fullAbility, string propertyName, object value) Parameters Type Name Description AbilityManager.FullAbility fullAbility FullAbility object to access. System.String propertyName The name of the property to set. System.Object value The value of the property. Returns Type Description AbilityManager.FullAbility The same FullAbility so a chain can continue. SetFlipYIfOpponent(AbilityInfo, Boolean) Sets whether or not the ability's icon should be flipped upside-down when it's on an opponent card. Declaration public static AbilityInfo SetFlipYIfOpponent(this AbilityInfo abilityInfo, bool flipY = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean flipY If the icon should be flipped. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetGBCTriggerText(AbilityInfo, String) Sets the text displayed whenever OnAbilityTriggered is called by this ability in Act 2. Declaration public static AbilityInfo SetGBCTriggerText(this AbilityInfo abilityInfo, string triggerText) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.String triggerText The text to display when OnAbilityTriggered is called. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetHasColorOverride(AbilityInfo, Boolean, Color) Sets whether or not the ability's icon's colour should be overridden, and what the override colour should be. The colour override only applies to the default ability icons; totem and merge icons are unaffected. Declaration public static AbilityInfo SetHasColorOverride(this AbilityInfo abilityInfo, bool hasOverride, Color colorOverride = default(Color)) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean hasOverride If the ability icon's colour should be overridden. Color colorOverride The colour that will override the icon. Only applies if hasOverride is true. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetHideSingleStacks(AbilityInfo, Boolean) Sets an ability to only have one stack of it be hidden whenever the ability is added to a card status's hiddenAbilities field. Adding the same ability to hiddenAbilities will hide more stacks. Only affects cards that can stack. Declaration public static AbilityInfo SetHideSingleStacks(this AbilityInfo abilityInfo, bool hideSingleStacks = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean hideSingleStacks Whether all stacks of this ability will be hidden when added to hiddenAbilities. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetIcon(AbilityInfo, Texture2D) Sets the icon texture for the ability. Declaration public static AbilityInfo SetIcon(this AbilityInfo info, Texture2D icon) Parameters Type Name Description DiskCardGame.AbilityInfo info The ability info to set the texture for. Texture2D icon A 49x49 texture containing the icon. Returns Type Description DiskCardGame.AbilityInfo The same ability info so a chain can continue. Remarks You cannot do this unless the ability has been registered with the API. Unless the API knows about this ability, it will not have the required information to be able to process the texture, so an exception will be thrown if you try to do this to an instance of AbilityInfo that did not get processed through the API. Exceptions Type Condition System.InvalidOperationException Thrown if the ability info has not yet been added to the AbilityManager SetIcon(StatIconInfo, String, Nullable<FilterMode>) Sets the icon that will be displayed for this stat icon when the card is in the player's hand. Declaration public static StatIconInfo SetIcon(this StatIconInfo info, string pathToArt, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.StatIconInfo info The instance of StatIconInfo. System.String pathToArt The path to a 49x49 texture containing the icon on disk. System.Nullable < FilterMode > filterMode The filter mode for the icon texture. Leave this at its default value unless you have a specific reason to change it. Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. SetIcon(StatIconInfo, Texture2D, Nullable<FilterMode>) Sets the icon that will be displayed for this stat icon when the card is in the player's hand. Declaration public static StatIconInfo SetIcon(this StatIconInfo info, Texture2D icon, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.StatIconInfo info The instance of StatIconInfo. Texture2D icon A 49x49 texture containing the icon. System.Nullable < FilterMode > filterMode The filter mode for the icon texture. Leave this at its default value unless you have a specific reason to change it. Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. SetIcon(AbilityManager.FullAbility, Texture2D) Sets the icon texture for the ability. Declaration public static void SetIcon(this AbilityManager.FullAbility info, Texture2D icon) Parameters Type Name Description AbilityManager.FullAbility info The ability info to set the texture for. Texture2D icon A 49x49 texture containing the icon. SetKeywordAbility(AbilityInfo, Boolean) Sets whether or not the ability's name should precede its description in Act 2. If false, only the ability's description will be shown. Declaration public static AbilityInfo SetKeywordAbility(this AbilityInfo abilityInfo, bool keyword = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean keyword If the ability's name should precede its Act 2 description. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetOpponentUsable(AbilityInfo, Boolean) Sets whether or not the ability can be used by the opponent. Declaration public static AbilityInfo SetOpponentUsable(this AbilityInfo abilityInfo, bool opponentUsable = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean opponentUsable If the ability is usable by the opponent. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetPassive(AbilityInfo, Boolean) Sets whether or not the ability is passive (will not trigger). Declaration public static AbilityInfo SetPassive(this AbilityInfo abilityInfo, bool passive = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean passive If the ability is passive. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetPixelAbilityIcon(AbilityInfo, Texture2D, Nullable<FilterMode>) Sets the icon that will be displayed for this ability icon in Act 2. Declaration public static AbilityInfo SetPixelAbilityIcon(this AbilityInfo info, Texture2D icon, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.AbilityInfo info The instance of AbilityInfo. Texture2D icon A 17x17 or 22x10 texture containing the icon; for regular and activated sigil icons respectively. System.Nullable < FilterMode > filterMode The filter mode for the icon texture. Leave this at its default value unless you have a specific reason to change it. Returns Type Description DiskCardGame.AbilityInfo The same ability so a chain can continue. SetPixelIcon(StatIconInfo, String, Nullable<FilterMode>) Declaration public static StatIconInfo SetPixelIcon(this StatIconInfo info, string pathToArt, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.StatIconInfo info System.String pathToArt System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.StatIconInfo SetPixelIcon(StatIconInfo, Texture2D, Nullable<FilterMode>) Sets the icon that will be displayed for this stat icon when the card is in the player's hand in Act 2. Declaration public static StatIconInfo SetPixelIcon(this StatIconInfo info, Texture2D icon, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.StatIconInfo info The instance of StatIconInfo. Texture2D icon A 16x8 texture containing the icon . System.Nullable < FilterMode > filterMode The filter mode for the icon texture. Leave this at its default value unless you have a specific reason to change it. Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. SetPowerlevel(AbilityInfo, Int32) Sets the power level of the ability, used in some game logic like determining the opponent totem's ability. Vanilla power levels range from -3 to 5, and values above or below are ignored in most cases. Declaration public static AbilityInfo SetPowerlevel(this AbilityInfo abilityInfo, int powerLevel) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Int32 powerLevel The ability's power level. Should be equal to or between -3 and 5. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue. SetRulebookDescription(AbilityInfo, String) Declaration public static AbilityInfo SetRulebookDescription(this AbilityInfo abilityInfo, string description) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo System.String description Returns Type Description DiskCardGame.AbilityInfo SetRulebookInfo(StatIconInfo, String, String) Set the StatIconInfo's rulebookName and rulebookDescription. Does not make the stat icon appear in the Rulebook. Declaration public static StatIconInfo SetRulebookInfo(this StatIconInfo info, string rulebookName, string rulebookDescription = null) Parameters Type Name Description DiskCardGame.StatIconInfo info System.String rulebookName System.String rulebookDescription Returns Type Description DiskCardGame.StatIconInfo The same StatIconInfo so a chain can continue. SetRulebookName(AbilityInfo, String) Declaration public static AbilityInfo SetRulebookName(this AbilityInfo abilityInfo, string name) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo System.String name Returns Type Description DiskCardGame.AbilityInfo SetTriggersOncePerStack(AbilityInfo, Boolean) Sets the ability to only ever trigger once per stack. This prevents abilities from triggering twice per stack after a card evolves. This only affects cards that evolve into a card that possesses the same stackable ability (eg, default evolutions). Declaration public static AbilityInfo SetTriggersOncePerStack(this AbilityInfo abilityInfo, bool triggersOncePerStack = true) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo The instance of AbilityInfo. System.Boolean triggersOncePerStack Whether or not to prevent double triggering. Returns Type Description DiskCardGame.AbilityInfo The same AbilityInfo so a chain can continue."
  },
  "api/InscryptionAPI.Card.AbilityManager.FullAbility.html": {
    "href": "api/InscryptionAPI.Card.AbilityManager.FullAbility.html",
    "title": "Class AbilityManager.FullAbility | InscryptionAPI",
    "keywords": "Class AbilityManager.FullAbility A utility class that holds all of the required information about an ability in order to be able to use it in-game. Inheritance System.Object AbilityManager.FullAbility Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class FullAbility Constructors FullAbility(Ability, AbilityInfo, Type, Texture) Creates a new instance of FullAbility and registers its behaviour type with the TypeManager . Declaration public FullAbility(Ability id, AbilityInfo info, Type behaviour, Texture texture) Parameters Type Name Description DiskCardGame.Ability id The unique ID for this ability. DiskCardGame.AbilityInfo info The description object for this ability. Type behaviour A subclass of AbilityBehaviour that implements the logic for the ability. Texture texture A 49x49 texture for the ability icon. FullAbility(String, Ability, AbilityInfo, Type, Texture) Creates a new instance of FullAbility and registers its behaviour type with the TypeManager . Declaration public FullAbility(string modGUID, Ability id, AbilityInfo info, Type behaviour, Texture texture) Parameters Type Name Description System.String modGUID The GUID of the mod that added this. DiskCardGame.Ability id The unique ID for this ability. DiskCardGame.AbilityInfo info The description object for this ability. Type behaviour A subclass of AbilityBehaviour that implements the logic for the ability. Texture texture A 49x49 texture for the ability icon. Fields AbilityBehavior A subclass of AbilityBehaviour that implements the logic for the ability Declaration public readonly Type AbilityBehavior Field Value Type Description Type Id The unique ID for this ability Declaration public readonly Ability Id Field Value Type Description DiskCardGame.Ability Info The description object for this ability Declaration public readonly AbilityInfo Info Field Value Type Description DiskCardGame.AbilityInfo ModGUID The guid of the mod that added this ability Declaration public readonly string ModGUID Field Value Type Description System.String Properties BaseRulebookDescription Declaration public string BaseRulebookDescription { get; } Property Value Type Description System.String CustomFlippedTexture A 49x49 texture for the ability icon, used when the card belongs to the opponent Declaration public Texture CustomFlippedTexture { get; } Property Value Type Description Texture Texture A 49x49 texture for the ability icon Declaration public Texture Texture { get; } Property Value Type Description Texture Methods Clone() Makes a deep copy of the current FullAbility object Declaration public AbilityManager.FullAbility Clone() Returns Type Description AbilityManager.FullAbility Extension Methods AbilityExtensions.SetIcon(AbilityManager.FullAbility, Texture2D) AbilityExtensions.SetCustomFlippedTexture(AbilityManager.FullAbility, Texture2D) AbilityExtensions.SetExtendedProperty(AbilityManager.FullAbility, String, Object) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.AbilityManager.html": {
    "href": "api/InscryptionAPI.Card.AbilityManager.html",
    "title": "Class AbilityManager | InscryptionAPI",
    "keywords": "Class AbilityManager This manager class handles the creation and management of mod-added abilities (sigils). Inheritance System.Object AbilityManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class AbilityManager Fields BaseGameAbilities All of the vanilla game's abilities. Declaration public static readonly ReadOnlyCollection<AbilityManager.FullAbility> BaseGameAbilities Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < AbilityManager.FullAbility > SIGILCOST Declaration public const string SIGILCOST = \"[sigilcost:\" Field Value Type Description System.String Properties AllAbilities The current processed list of all abilities in the game, including vanilla and mod-added abilities. Declaration public static List<AbilityManager.FullAbility> AllAbilities { get; } Property Value Type Description List < AbilityManager.FullAbility > AllAbilityInfos The current processed list of all AbilityInfos in the game, including vanilla and mod-added abilities. Declaration public static List<AbilityInfo> AllAbilityInfos { get; } Property Value Type Description List < DiskCardGame.AbilityInfo > Part2Modular Declaration public static AbilityMetaCategory Part2Modular { get; } Property Value Type Description DiskCardGame.AbilityMetaCategory Methods AbilityIconInteractable_AssignAbility(IEnumerable<CodeInstruction>) Declaration [HarmonyTranspiler] [HarmonyPatch(typeof(AbilityIconInteractable), \"AssignAbility\")] public static IEnumerable<CodeInstruction> AbilityIconInteractable_AssignAbility(IEnumerable<CodeInstruction> instructions) Parameters Type Name Description System.Collections.IEnumerable < HarmonyLib.CodeInstruction > instructions Returns Type Description System.Collections.IEnumerable < HarmonyLib.CodeInstruction > Add(String, AbilityInfo, Type, Texture) Creates a new ability and registers it to be able to be added to cards Declaration public static AbilityManager.FullAbility Add(string guid, AbilityInfo info, Type behavior, Texture tex) Parameters Type Name Description System.String guid The guid of the mod adding the ability. DiskCardGame.AbilityInfo info An instance of AbilityInfo describing the ability. Type behavior A subclass of AbilityBehaviour that implements the logic for the ability. Texture tex The ability icon as a 49x49 texture. Returns Type Description AbilityManager.FullAbility An instance of AbilityInfo describing the new ability. Remarks The actual unique identifier for the new ability will be found in the 'ability' field of the returned AbilityInfo object. There is no way for the modder to create a specific ability ID; it will always be assigned by the API. NOTE : Even if you manually create an Ability identifier for your ability and attach it to the AbilityInfo object before you pass it to the API, the API will still generate a unique ability ID for you, which may or may not be the same as the ID you created for yourself. As such, it is best practice to not set the ablity ID yourself and leave it as its default value. New(String, String, String, Type, String) Creates a new ability and registers it to be able to be added to cards Declaration public static AbilityInfo New(string guid, string rulebookName, string rulebookDescription, Type behavior, string pathToArt) Parameters Type Name Description System.String guid The guid of the mod adding the ability. System.String rulebookName The name of the ability. System.String rulebookDescription The description as it appears in the game's rulebook. Type behavior A subclass of AbilityBehaviour that implements the logic for the ability. System.String pathToArt Path to the ability texture on disk. Returns Type Description DiskCardGame.AbilityInfo An instance of AbilityInfo describing the new ability. Remarks The actual unique identifier for the new ability will be found in the 'ability' field of the returned AbilityInfo object. There is no way for the modder to create a specific ability ID; it will always be assigned by the API. New(String, String, String, Type, Texture) Creates a new ability and registers it to be able to be added to cards Declaration public static AbilityInfo New(string guid, string rulebookName, string rulebookDescription, Type behavior, Texture tex) Parameters Type Name Description System.String guid The guid of the mod adding the ability. System.String rulebookName The name of the ability. System.String rulebookDescription The description as it appears in the game's rulebook. Type behavior A subclass of AbilityBehaviour that implements the logic for the ability. Texture tex The ability icon as a 49x49 texture. Returns Type Description DiskCardGame.AbilityInfo An instance of AbilityInfo describing the new ability. Remarks The actual unique identifier for the new ability will be found in the 'ability' field of the returned AbilityInfo object. There is no way for the modder to create a specific ability ID; it will always be assigned by the API. OriginalLoadAbilityIcon(String, Boolean, Boolean) Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(AbilitiesUtil), \"LoadAbilityIcon\")] public static Texture OriginalLoadAbilityIcon(string abilityName, bool fillerAbility = false, bool something = false) Parameters Type Name Description System.String abilityName System.Boolean fillerAbility System.Boolean something Returns Type Description Texture Remove(Ability) Removes an ability from the game based on ability ID. Can only remove mod-added abilities, not vanilla abilities. Declaration public static void Remove(Ability id) Parameters Type Name Description DiskCardGame.Ability id The unique ID of the ability to remove. Remove(AbilityManager.FullAbility) Removes an ability from the game based on ability ID. Can only remove mod-added abilities, not vanilla abilities. Declaration public static void Remove(AbilityManager.FullAbility ability) Parameters Type Name Description AbilityManager.FullAbility ability The instance of the ability to remove. SyncAbilityList() Resynchronizes the ablity list. Declaration public static void SyncAbilityList() Remarks Most importantly, this re-executes all custom code that was added to the ModifyAbilityList event. If you are doing any sort of context-aware processing of the ability list, you may need to manually call this method in order to make sure that your code executes correctly. However, this automatically gets called every time that the game transitions from either the main menu into the base game, or whenever a new run is started inside of Kaycee's Mod. Only in extreme edge cases should you need to manually call this. Events ModifyAbilityList A hook for modders to add custom code to modify the ability list dynamically. Declaration public static event Func<List<AbilityManager.FullAbility>, List<AbilityManager.FullAbility>> ModifyAbilityList Event Type Type Description Func < List < AbilityManager.FullAbility >, List < AbilityManager.FullAbility >> Remarks There are two primary use cases for this hook: Making changes to abilities that may be added after your plugin initializes Making context-aware changes to abilities The way this operates is as follows: The AbilityManager makes a copy of all FullAbility objects. Note that unlike the similar code in CardManager, this is actually a deep copy of the AbilityInfo. The code in ModifyAbiltyList is executed on the copy of those abilities. The modified list becomes the game's new official list of abilities. The reason the abilities are cloned before processing is so that you can make any change to them you wish without affecting the original ability. This means that you do not need to try to track changes or remember what the original version of the ability looked like before you started changing it; the next time SyncAbilityList is called, all changes will be reverted and then re-applied. To use this, you need to add a delegate that accepts the current list of all abilities, then returns that same list back. AbilityManager.ModifyAbilityList += delegate(List&lt;FullAbility> abilities) { // Add the rulebook metacategories to every single ability foreach (var ability in abilities) ability.info.AddMetaCategories(AbilityMetaCategory.Part1Rulebook, AbilityMetaCategory.Part3Rulebook); return abilities; }"
  },
  "api/InscryptionAPI.Card.ActivatedDamageShieldBehaviour.html": {
    "href": "api/InscryptionAPI.Card.ActivatedDamageShieldBehaviour.html",
    "title": "Class ActivatedDamageShieldBehaviour | InscryptionAPI",
    "keywords": "Class ActivatedDamageShieldBehaviour A custom class combining DamageShieldBehaviour and ExtendedActivatedBehaviour . Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.AbilityBehaviour DamageShieldBehaviour ActivatedDamageShieldBehaviour Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public abstract class ActivatedDamageShieldBehaviour : DamageShieldBehaviour Fields bloodCostMod Declaration public int bloodCostMod Field Value Type Description System.Int32 bonesCostMod Declaration public int bonesCostMod Field Value Type Description System.Int32 currentSacrificedCardInfos Declaration public Dictionary<CardInfo, CardSlot> currentSacrificedCardInfos Field Value Type Description Dictionary < DiskCardGame.CardInfo , DiskCardGame.CardSlot > energyCostMod Declaration public int energyCostMod Field Value Type Description System.Int32 healthCostMod Declaration public int healthCostMod Field Value Type Description System.Int32 Properties BloodCost Declaration public int BloodCost { get; } Property Value Type Description System.Int32 BonesCost Declaration public int BonesCost { get; } Property Value Type Description System.Int32 EnergyCost Declaration public int EnergyCost { get; } Property Value Type Description System.Int32 HealthCost Declaration public int HealthCost { get; } Property Value Type Description System.Int32 OnActivateBloodCostMod Declaration public virtual int OnActivateBloodCostMod { get; set; } Property Value Type Description System.Int32 OnActivateBonesCostMod Declaration public virtual int OnActivateBonesCostMod { get; set; } Property Value Type Description System.Int32 OnActivateEnergyCostMod Declaration public virtual int OnActivateEnergyCostMod { get; set; } Property Value Type Description System.Int32 OnActivateHealthCostMod Declaration public virtual int OnActivateHealthCostMod { get; set; } Property Value Type Description System.Int32 StartingBloodCost Declaration public virtual int StartingBloodCost { get; } Property Value Type Description System.Int32 StartingBonesCost Declaration public virtual int StartingBonesCost { get; } Property Value Type Description System.Int32 StartingEnergyCost Declaration public virtual int StartingEnergyCost { get; } Property Value Type Description System.Int32 StartingHealthCost Declaration public virtual int StartingHealthCost { get; } Property Value Type Description System.Int32 Methods Activate() Declaration public abstract IEnumerator Activate() Returns Type Description System.Collections.IEnumerator CanActivate() Declaration public virtual bool CanActivate() Returns Type Description System.Boolean OnActivatedAbility() Declaration public sealed override IEnumerator OnActivatedAbility() Returns Type Description System.Collections.IEnumerator Overrides DiskCardGame.TriggerReceiver.OnActivatedAbility() OnPostResolveOnBoard() Declaration public virtual IEnumerator OnPostResolveOnBoard() Returns Type Description System.Collections.IEnumerator OnResolveOnBoard() Declaration public sealed override IEnumerator OnResolveOnBoard() Returns Type Description System.Collections.IEnumerator Overrides DiskCardGame.TriggerReceiver.OnResolveOnBoard() PostActivate() Declaration public virtual IEnumerator PostActivate() Returns Type Description System.Collections.IEnumerator RespondsToActivatedAbility(Ability) Declaration public sealed override bool RespondsToActivatedAbility(Ability ability) Parameters Type Name Description DiskCardGame.Ability ability Returns Type Description System.Boolean Overrides DiskCardGame.TriggerReceiver.RespondsToActivatedAbility(DiskCardGame.Ability) RespondsToPostResolveOnBoard() Declaration public virtual bool RespondsToPostResolveOnBoard() Returns Type Description System.Boolean RespondsToResolveOnBoard() Declaration public sealed override bool RespondsToResolveOnBoard() Returns Type Description System.Boolean Overrides DiskCardGame.TriggerReceiver.RespondsToResolveOnBoard() Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.APIDeathShield.html": {
    "href": "api/InscryptionAPI.Card.APIDeathShield.html",
    "title": "Class APIDeathShield | InscryptionAPI",
    "keywords": "Class APIDeathShield A custom AbilityBehaviour that's attached to the DeathShield ability so it functions with the API's shield logic changes. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.AbilityBehaviour DamageShieldBehaviour APIDeathShield Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class APIDeathShield : DamageShieldBehaviour Properties Ability Declaration public override Ability Ability { get; } Property Value Type Description DiskCardGame.Ability Overrides DiskCardGame.AbilityBehaviour.Ability StartingNumShields Declaration public override int StartingNumShields { get; } Property Value Type Description System.Int32 Overrides DamageShieldBehaviour.StartingNumShields Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.CardAppearanceBehaviourManager.FullCardAppearanceBehaviour.html": {
    "href": "api/InscryptionAPI.Card.CardAppearanceBehaviourManager.FullCardAppearanceBehaviour.html",
    "title": "Class CardAppearanceBehaviourManager.FullCardAppearanceBehaviour | InscryptionAPI",
    "keywords": "Class CardAppearanceBehaviourManager.FullCardAppearanceBehaviour Inheritance System.Object CardAppearanceBehaviourManager.FullCardAppearanceBehaviour Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class FullCardAppearanceBehaviour Constructors FullCardAppearanceBehaviour(CardAppearanceBehaviour.Appearance, Type) Declaration public FullCardAppearanceBehaviour(CardAppearanceBehaviour.Appearance id, Type appearanceBehaviour) Parameters Type Name Description DiskCardGame.CardAppearanceBehaviour.Appearance id Type appearanceBehaviour Fields AppearanceBehaviour Declaration public readonly Type AppearanceBehaviour Field Value Type Description Type Id Declaration public readonly CardAppearanceBehaviour.Appearance Id Field Value Type Description DiskCardGame.CardAppearanceBehaviour.Appearance Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.CardAppearanceBehaviourManager.html": {
    "href": "api/InscryptionAPI.Card.CardAppearanceBehaviourManager.html",
    "title": "Class CardAppearanceBehaviourManager | InscryptionAPI",
    "keywords": "Class CardAppearanceBehaviourManager Inheritance System.Object CardAppearanceBehaviourManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public static class CardAppearanceBehaviourManager Fields BaseGameAppearances Declaration public static readonly ReadOnlyCollection<CardAppearanceBehaviourManager.FullCardAppearanceBehaviour> BaseGameAppearances Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < CardAppearanceBehaviourManager.FullCardAppearanceBehaviour > Properties AllAppearances Declaration public static List<CardAppearanceBehaviourManager.FullCardAppearanceBehaviour> AllAppearances { get; } Property Value Type Description List < CardAppearanceBehaviourManager.FullCardAppearanceBehaviour > Methods Add(String, String, Type) Declaration public static CardAppearanceBehaviourManager.FullCardAppearanceBehaviour Add(string guid, string abilityName, Type behavior) Parameters Type Name Description System.String guid System.String abilityName Type behavior Returns Type Description CardAppearanceBehaviourManager.FullCardAppearanceBehaviour Remove(CardAppearanceBehaviour.Appearance) Declaration public static void Remove(CardAppearanceBehaviour.Appearance id) Parameters Type Name Description DiskCardGame.CardAppearanceBehaviour.Appearance id Remove(CardAppearanceBehaviourManager.FullCardAppearanceBehaviour) Declaration public static void Remove(CardAppearanceBehaviourManager.FullCardAppearanceBehaviour ability) Parameters Type Name Description CardAppearanceBehaviourManager.FullCardAppearanceBehaviour ability"
  },
  "api/InscryptionAPI.Card.CardExtensions.html": {
    "href": "api/InscryptionAPI.Card.CardExtensions.html",
    "title": "Class CardExtensions | InscryptionAPI",
    "keywords": "Class CardExtensions Inheritance System.Object CardExtensions Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public static class CardExtensions Methods AddAbilities(CardInfo, Ability[]) Adds any number of abilities to the card. Abilities can be added multiple times. Declaration public static CardInfo AddAbilities(this CardInfo info, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.Ability [] abilities The abilities to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddAppearances(CardInfo, CardAppearanceBehaviour.Appearance[]) Adds any number of appearance behaviors to the card. Duplicate appearance behaviors are ignored. Declaration public static CardInfo AddAppearances(this CardInfo info, params CardAppearanceBehaviour.Appearance[] appearances) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardAppearanceBehaviour.Appearance [] appearances The appearances to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddDecal(CardInfo, String[]) Adds any number of decals to the card. Duplicate decals are ignored. Declaration public static CardInfo AddDecal(this CardInfo info, params string[] decals) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String [] decals The paths to the .png files containing the decals (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddDecal(CardInfo, Texture[]) Adds any number of decals to the card. Duplicate decals are ignored. Declaration public static CardInfo AddDecal(this CardInfo info, params Texture[] decals) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture [] decals The decals to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddMetaCategories(CardInfo, CardMetaCategory[]) Adds any number of metacategories to the card. Duplicate metacategories are ignored. Declaration public static CardInfo AddMetaCategories(this CardInfo info, params CardMetaCategory[] categories) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardMetaCategory [] categories The categories to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddShieldCount(PlayableCard, Int32, Ability, Boolean) Increases the amount of shields a specific ability is currently giving. Declaration public static void AddShieldCount(this PlayableCard card, int amount, Ability ability, bool updateDisplay = true) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. System.Int32 amount How many shields to add. DiskCardGame.Ability ability The shield-giving ability to add more shields to. System.Boolean updateDisplay Whether to update the card's display, meaning sigil stack numbers and any shield effects. AddShieldCount(PlayableCard, Int32, Boolean) Increases the amount of shields the card has. Affects the internal counter; does not add or remove shield sigil stacks. Declaration public static void AddShieldCount(this PlayableCard card, int amount, bool updateDisplay = true) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. System.Int32 amount How many shields to add. System.Boolean updateDisplay Whether to update the card's display, meaning sigil stack numbers and any shield effects. AddShieldCount<T>(PlayableCard, Int32, Boolean) Increases the amount of shields a specific ability's AbilityBehaviour is currently giving. Declaration public static void AddShieldCount<T>(this PlayableCard card, int amount, bool updateDisplay = true) where T : DamageShieldBehaviour Parameters Type Name Description DiskCardGame.PlayableCard card System.Int32 amount System.Boolean updateDisplay Type Parameters Name Description T AddSpecialAbilities(CardInfo, SpecialTriggeredAbility[]) Adds any number of special abilities to the card. Duplicate special abilities are ignored. Declaration public static CardInfo AddSpecialAbilities(this CardInfo info, params SpecialTriggeredAbility[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] abilities The abilities to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddTemporaryMods(PlayableCard, CardModificationInfo[]) Declaration public static void AddTemporaryMods(this PlayableCard card, params CardModificationInfo[] mods) Parameters Type Name Description DiskCardGame.PlayableCard card DiskCardGame.CardModificationInfo [] mods AddTraits(CardInfo, Trait[]) Adds any number of traits to the card. Duplicate traits are ignored. Declaration public static CardInfo AddTraits(this CardInfo info, params Trait[] traits) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.Trait [] traits The traits to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AddTribes(CardInfo, Tribe[]) Adds any number of tribes to the card. Duplicate tribes are ignored. Declaration public static CardInfo AddTribes(this CardInfo info, params Tribe[] tribes) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.Tribe [] tribes The tribes to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. AllAbilities(PlayableCard) Retrieve a list of all abilities that exist on the PlayableCard. This will retrieve all Abilities from both TemporaryMods and from the underlying CardInfo object. Declaration public static List<Ability> AllAbilities(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. Returns Type Description List < DiskCardGame.Ability > A list of Abilities from the PlayableCard and underlying CardInfo object. AllAbilities(PlayableCard, Boolean) A variant of PlayableCard.AllAbilities that can account for negated abilities in the PlayableCard's TemporaryMods. Declaration public static List<Ability> AllAbilities(this PlayableCard playableCard, bool accountForNegation) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. System.Boolean accountForNegation Whether or not to check TemporaryMods for negated abilities. Returns Type Description List < DiskCardGame.Ability > A list of Abilities from the PlayableCard and underlying CardInfo object AllCardModificationInfos(PlayableCard) Retrieve a list of all CardModificationInfos that exist on the PlayableCard. This will retrieve all mods from TemporaryMods and the underlying CardInfo.Mods. Declaration public static List<CardModificationInfo> AllCardModificationInfos(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. Returns Type Description List < DiskCardGame.CardModificationInfo > A list of CardModificationInfos from the PlayableCard and underlying CardInfo object. AllSpecialAbilities(PlayableCard) Retrieve a list of all special triggered abilities that exist on the PlayableCard. This will retrieve all SpecialTriggeredAbility from both TemporaryMods and from the underlying CardInfo object. Declaration public static List<SpecialTriggeredAbility> AllSpecialAbilities(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. Returns Type Description List < DiskCardGame.SpecialTriggeredAbility > A list of SpecialTriggeredAbility from the PlayableCard and underlying CardInfo object. BloodCost(PlayableCard) Returns the Blood cost of a card. This function can be overridden if someone wants to inject new cost logic into a card's Blood cost. Declaration public static int BloodCost(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Int32 BonesCost(PlayableCard) Returns the Bone cost of a card. This function can be overridden if someone wants to inject new cost logic into a card's Bone cost. Declaration public static int BonesCost(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Int32 CardByName(IEnumerable<CardInfo>, String) Gets the first card matching the given name, or null if it does not exist. Declaration public static CardInfo CardByName(this IEnumerable<CardInfo> cards, string name) Parameters Type Name Description System.Collections.IEnumerable < DiskCardGame.CardInfo > cards An enumeration of Inscryption cards. System.String name The name to search for (case sensitive). Returns Type Description DiskCardGame.CardInfo The first matching card, or null if no match. CreateBlueprint(CardInfo) Creates a basic EncounterBlueprintData.CardBlueprint based off the CardInfo object. Declaration public static EncounterBlueprintData.CardBlueprint CreateBlueprint(this CardInfo cardInfo) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to create the blueprint with. Returns Type Description DiskCardGame.EncounterBlueprintData.CardBlueprint The CardBlueprint object that can be used when creating EncounterData. GemsCost(PlayableCard) Returns the Gem cost of a card as a list. This function can be overridden if someone wants to inject new cost logic into a card's Gem cost. Declaration public static List<GemType> GemsCost(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description List < DiskCardGame.GemType > GetAbilitiesFromAllMods(PlayableCard) Retrieve a list of Ability that exist in TemporaryMods and the underlying CardInfo.Mods lists. Declaration public static List<Ability> GetAbilitiesFromAllMods(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. Returns Type Description List < DiskCardGame.Ability > A list of Ability from the PlayableCard and underlying CardInfo object. GetAbilityStacks(PlayableCard, Ability) Gets the number of Ability stacks a card has. Declaration public static int GetAbilityStacks(this PlayableCard card, Ability ability) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. DiskCardGame.Ability ability The Ability to check for. Returns Type Description System.Int32 The number of Ability stacks the card has. GetCustomCardCosts(Card) Declaration public static List<CustomCardCost> GetCustomCardCosts(this Card card) Parameters Type Name Description DiskCardGame.Card card Returns Type Description List < CustomCardCost > GetCustomCost(CardInfo, CardCostManager.FullCardCost) Declaration public static int GetCustomCost(this CardInfo cardInfo, CardCostManager.FullCardCost fullCardCost) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardCostManager.FullCardCost fullCardCost Returns Type Description System.Int32 GetCustomCost(CardInfo, String, Boolean) Declaration public static int GetCustomCost(this CardInfo cardInfo, string costName, bool canBeNegative = false) Parameters Type Name Description DiskCardGame.CardInfo cardInfo System.String costName System.Boolean canBeNegative Returns Type Description System.Int32 GetCustomCost(PlayableCard, CardCostManager.FullCardCost) Declaration public static int GetCustomCost(this PlayableCard card, CardCostManager.FullCardCost fullCardCost) Parameters Type Name Description DiskCardGame.PlayableCard card CardCostManager.FullCardCost fullCardCost Returns Type Description System.Int32 GetCustomCost(PlayableCard, String, Boolean) Declaration public static int GetCustomCost(this PlayableCard card, string costName, bool canBeNegative = false) Parameters Type Name Description DiskCardGame.PlayableCard card System.String costName System.Boolean canBeNegative Returns Type Description System.Int32 GetCustomCost<T>(CardInfo, Boolean) Declaration public static int GetCustomCost<T>(this CardInfo cardInfo, bool canBeNegative = false) where T : CustomCardCost Parameters Type Name Description DiskCardGame.CardInfo cardInfo System.Boolean canBeNegative Returns Type Description System.Int32 Type Parameters Name Description T GetCustomCost<T>(PlayableCard, Boolean) Declaration public static int GetCustomCost<T>(this PlayableCard card, bool canBeNegative = false) where T : CustomCardCost Parameters Type Name Description DiskCardGame.PlayableCard card System.Boolean canBeNegative Returns Type Description System.Int32 Type Parameters Name Description T GetCustomCostAmount(CardInfo, String) Declaration public static int GetCustomCostAmount(this CardInfo cardInfo, string costName) Parameters Type Name Description DiskCardGame.CardInfo cardInfo System.String costName Returns Type Description System.Int32 GetCustomCostAmount(PlayableCard, String) Variant of GetCustomCost that automatically retrieves the given cost's canBeNegative value. Declaration public static int GetCustomCostAmount(this PlayableCard card, string costName) Parameters Type Name Description DiskCardGame.PlayableCard card System.String costName Returns Type Description System.Int32 GetCustomCostAmount<T>(CardInfo) Declaration public static int GetCustomCostAmount<T>(this CardInfo cardInfo) where T : CustomCardCost Parameters Type Name Description DiskCardGame.CardInfo cardInfo Returns Type Description System.Int32 Type Parameters Name Description T GetCustomCostAmount<T>(PlayableCard) Declaration public static int GetCustomCostAmount<T>(this PlayableCard card) where T : CustomCardCost Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Int32 Type Parameters Name Description T GetCustomCosts(CardInfo) Declaration public static List<CardCostManager.FullCardCost> GetCustomCosts(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description List < CardCostManager.FullCardCost > GetEmissiveAltPortrait(CardInfo) Declaration public static Sprite GetEmissiveAltPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetEmissiveBrokenShieldPortrait(CardInfo) Declaration public static Sprite GetEmissiveBrokenShieldPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetEmissivePortrait(CardInfo) Declaration public static Sprite GetEmissivePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetEmissiveSacrificablePortrait(CardInfo) Declaration public static Sprite GetEmissiveSacrificablePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetEmissiveSteelTrapPortrait(CardInfo) Declaration public static Sprite GetEmissiveSteelTrapPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetExtendedProperty(CardInfo, String) Gets a custom property value from the card. Declaration public static string GetExtendedProperty(this CardInfo info, string propertyName) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String propertyName The name of the property to get the value of. Returns Type Description System.String The custom property value as a string. If it doesn't exist, returns null. GetExtendedPropertyAsBool(CardInfo, String) Gets a custom property as a nullable boolean. Declaration public static bool? GetExtendedPropertyAsBool(this CardInfo info, string propertyName) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Boolean > Returns the value of the property as a boolean or null if it didn't exist or couldn't be parsed as boolean. GetExtendedPropertyAsFloat(CardInfo, String) Gets a custom property as a nullable float. Declaration public static float? GetExtendedPropertyAsFloat(this CardInfo info, string propertyName) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Single > Returns the value of the property as a float or null if it didn't exist or couldn't be parsed as float. GetExtendedPropertyAsInt(CardInfo, String) Gets a custom property as a nullable int. Declaration public static int? GetExtendedPropertyAsInt(this CardInfo info, string propertyName) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Int32 > Returns the value of the property as an int or null if it didn't exist or couldn't be parsed as int. GetModPrefix(CardInfo) Gets the card name prefix for this card. Declaration public static string GetModPrefix(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description System.String The mod prefix for this card, or null if it wasn't found/is from the base game. GetModTag(CardInfo) Gets the GUID of the mod that created this card. Declaration public static string GetModTag(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description System.String The GUID of the mod that created this card or null if it wasn't found/is from the base game. GetPixelAlternatePortrait(CardInfo) Declaration public static Sprite GetPixelAlternatePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetPixelPortrait(CardInfo) Declaration public static Sprite GetPixelPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description Sprite GetPlayableCard(CardInfo) Gets a PlayableCards using this specific CardInfo. Inscryption often clones CardInfos and sometimes they're reused, meaning there can be more than 1 card using the same CardInfo object. Declaration public static PlayableCard GetPlayableCard(this CardInfo cardInfo) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to check for. Returns Type Description DiskCardGame.PlayableCard The PlayableCard with the specified CardInfo. Checks the board, the player's hand and miscellaneous card displays. GetShieldBehaviour(PlayableCard, Ability) Retrieves the DamageShieldBehaviour component corresponding to the given Ability, or null if it does not exist. Declaration public static DamageShieldBehaviour GetShieldBehaviour(this PlayableCard card, Ability ability) Parameters Type Name Description DiskCardGame.PlayableCard card DiskCardGame.Ability ability Returns Type Description DamageShieldBehaviour The DamageShieldBehaviour component of the given Ability, or null if it does not exist. GetShieldCount<T>(PlayableCard) Retrieves the current value of a DamageShieldBehaviour's NumShield. Declaration public static int GetShieldCount<T>(this PlayableCard card) where T : DamageShieldBehaviour Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Int32 The current value of the DamageShieldBehaviour's NumShield. Type Parameters Name Description T GetStatIconHealthBuffs(PlayableCard) Gets the health adjustment given by a PlayableCard's Stat Icon. Declaration public static int GetStatIconHealthBuffs(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. Returns Type Description System.Int32 How much Health the Stat Icon gives. GetTotalShields(PlayableCard) Gets the number of shields the target card has. Each shield negates one damaging hit. Declaration public static int GetTotalShields(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. Returns Type Description System.Int32 The number of shields the card has. GetTransformerCardId(CardInfo) Gets the string value of the extended property TransformerCardId. Can be null. Declaration public static string GetTransformerCardId(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description System.String The string value of the extended property TransformerCardId. GetTransformerCardId(PlayableCard) Gets the string value of the extended property TransformerCardId. Can be null. Declaration public static string GetTransformerCardId(this PlayableCard item) Parameters Type Name Description DiskCardGame.PlayableCard item PlayableCard to access. Returns Type Description System.String The string value of the extended property TransformerCardId. HasAllAbilities(CardInfo, Ability[]) Checks if the CardInfo has all of the given Abilities. Declaration public static bool HasAllAbilities(this CardInfo cardInfo, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Ability [] abilities The Abilities to check for. Returns Type Description System.Boolean Returns true if cardInfo has all of the given Abilities. HasAllAbilities(PlayableCard, Ability[]) Check if the PlayableCard has all of the given abilities. A condensed version of CardInfo.HasAllAbilities . Declaration public static bool HasAllAbilities(this PlayableCard playableCard, params Ability[] abilities) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Ability [] abilities The Abilities to check for. Returns Type Description System.Boolean Returns true if playableCard has all of the given Abilities. HasAllSpecialAbilities(CardInfo, SpecialTriggeredAbility[]) Checks if the CardInfo has all of the specified SpecialTriggeredAbilities. Declaration public static bool HasAllSpecialAbilities(this CardInfo cardInfo, params SpecialTriggeredAbility[] specialAbilities) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] specialAbilities The SpecialTriggeredAbilities to check for. Returns Type Description System.Boolean Returns true if cardInfo has all of the specified SpecialTriggeredAbilities. HasAllSpecialAbilities(PlayableCard, SpecialTriggeredAbility[]) Checks if the PlayableCard has all of the specified SpecialTriggeredAbilities. A condensed version of CardInfo.HasAllSpecialAbilities . Declaration public static bool HasAllSpecialAbilities(this PlayableCard playableCard, params SpecialTriggeredAbility[] specialAbilities) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.SpecialTriggeredAbility [] specialAbilities The SpecialTriggeredAbilities to check for. Returns Type Description System.Boolean Returns true if playableCard has all of the specified SpecialTriggeredAbilities. HasAllTraits(CardInfo, Trait[]) Checks if the CardInfo has all of the specified Traits. Declaration public static bool HasAllTraits(this CardInfo cardInfo, params Trait[] traits) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Trait [] traits The Traits to check for. Returns Type Description System.Boolean Returns true if cardInfo has all of the specified Traits. HasAllTraits(PlayableCard, Trait[]) Checks if the PlayableCard has all of the specified Traits. Declaration public static bool HasAllTraits(this PlayableCard playableCard, params Trait[] traits) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Trait [] traits The Traits to check for. Returns Type Description System.Boolean Returns true if playableCard has all of the specified Traits. HasAlternatePortrait(CardInfo) Declaration public static bool HasAlternatePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasAlternatePortrait(PlayableCard) Declaration public static bool HasAlternatePortrait(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Boolean HasAnyOfAbilities(CardInfo, Ability[]) Checks if the CardInfo has any of the specified Abilities. Declaration public static bool HasAnyOfAbilities(this CardInfo cardInfo, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Ability [] abilities The Abilities to check for. Returns Type Description System.Boolean Returns true if cardInfo has at least one of the given Abilities. HasAnyOfAbilities(PlayableCard, Ability[]) Check if the PlayableCard has any of the specified Abilities. A condensed version of CardInfo.HasAnyOfAbilities . Declaration public static bool HasAnyOfAbilities(this PlayableCard playableCard, params Ability[] abilities) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Ability [] abilities The Abilities to check for. Returns Type Description System.Boolean Returns true if playableCard has at least one of the given Abilities. HasAnyOfCardMetaCategories(CardInfo, CardMetaCategory[]) Checks if the CardInfo has any of the specified CardMetaCategories. Declaration public static bool HasAnyOfCardMetaCategories(this CardInfo cardInfo, params CardMetaCategory[] metaCategories) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.CardMetaCategory [] metaCategories The CardMetaCategories to check for. Returns Type Description System.Boolean Returns true if the card has at least one of the specified CardMetaCategories. HasAnyOfSpecialAbilities(CardInfo, SpecialTriggeredAbility[]) Checks if the CardInfo has any of the specified SpecialTriggeredAbilities. Declaration public static bool HasAnyOfSpecialAbilities(this CardInfo cardInfo, params SpecialTriggeredAbility[] specialAbilities) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] specialAbilities The SpecialTriggeredAbilities to check for. Returns Type Description System.Boolean Returns true if cardInfo has at least one of the specified SpecialTriggeredAbilities. HasAnyOfSpecialAbilities(PlayableCard, SpecialTriggeredAbility[]) Checks if the PlayableCard has any of the specified SpecialTriggeredAbilities. A condensed version of CardInfo.HasAnyOfSpecialAbilities . Declaration public static bool HasAnyOfSpecialAbilities(this PlayableCard playableCard, params SpecialTriggeredAbility[] specialAbilities) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.SpecialTriggeredAbility [] specialAbilities The SpecialTriggeredAbilities to check for. Returns Type Description System.Boolean Returns true if playableCard has at least one of the specified SpecialTriggeredAbilities. HasAnyOfTraits(CardInfo, Trait[]) Checks if the CardInfo has any of the specified Traits. Declaration public static bool HasAnyOfTraits(this CardInfo cardInfo, params Trait[] traits) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Trait [] traits The Traits to check for. Returns Type Description System.Boolean Returns true if cardInfo has at least one of the specified Traits. HasAnyOfTraits(PlayableCard, Trait[]) Checks if the PlayableCard has any of the specified Traits. Declaration public static bool HasAnyOfTraits(this PlayableCard playableCard, params Trait[] traits) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Trait [] traits The Traits to check for. Returns Type Description System.Boolean Returns true if playableCard has at least one of the specified Traits. HasBrokenShieldPortrait(CardInfo) Declaration public static bool HasBrokenShieldPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasCardMetaCategory(CardInfo, CardMetaCategory) Checks if the CardInfo has a specific CardMetaCategory. Declaration public static bool HasCardMetaCategory(this CardInfo cardInfo, CardMetaCategory metaCategory) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.CardMetaCategory metaCategory Returns Type Description System.Boolean Returns true if the card is does not have the specified CardMetaCategory. HasCustomCost(CardInfo, CardCostManager.FullCardCost) Declaration public static bool HasCustomCost(this CardInfo info, CardCostManager.FullCardCost customCost) Parameters Type Name Description DiskCardGame.CardInfo info CardCostManager.FullCardCost customCost Returns Type Description System.Boolean HasOpposingCard(PlayableCard) Check if the PlayableCard has a card opposing it in the opposite slot. Also acts as a null check if this PlayableCard is in a slot. Declaration public static bool HasOpposingCard(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. Returns Type Description System.Boolean Returns true if a card exists in the opposing slot. HasPixelAlternatePortrait(CardInfo) Declaration public static bool HasPixelAlternatePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasPixelBrokenShieldPortrait(CardInfo) Declaration public static bool HasPixelBrokenShieldPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasPixelSacrificablePortrait(CardInfo) Declaration public static bool HasPixelSacrificablePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasPixelSteelTrapPortrait(CardInfo) Declaration public static bool HasPixelSteelTrapPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasSacrificablePortrait(CardInfo) Declaration public static bool HasSacrificablePortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasShieldAbility(CardInfo) Returns whether or not the CardInfo has an Ability that overrides DamageShieldBehaviour. Declaration public static bool HasShieldAbility(this CardInfo cardInfo) Parameters Type Name Description DiskCardGame.CardInfo cardInfo The CardInfo object to check. Returns Type Description System.Boolean HasShieldAbility(PlayableCard) Returns whether or not the PlayableCard has an Ability that overrides DamageShieldBehaviour. Declaration public static bool HasShieldAbility(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard object to check. Returns Type Description System.Boolean HasSpecialAbility(CardInfo, SpecialTriggeredAbility) Checks if the CardInfo has a specific SpecialTriggeredAbility. A condensed version of cardInfo.SpecialAbilities.Contains(ability) . Declaration public static bool HasSpecialAbility(this CardInfo cardInfo, SpecialTriggeredAbility ability) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.SpecialTriggeredAbility ability The specialTriggeredAbility to check for. Returns Type Description System.Boolean Returns true if the specialTriggeredAbility does exist. HasSpecialAbility(PlayableCard, SpecialTriggeredAbility) Check the PlayableCard having a specific SpecialTriggeredAbility. A condensed version of playableCard.Info.SpecialAbilities.Contains(ability) . Declaration public static bool HasSpecialAbility(this PlayableCard playableCard, SpecialTriggeredAbility ability) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.SpecialTriggeredAbility ability The specialTriggeredAbility to check for. Returns Type Description System.Boolean Returns true if the specialTriggeredAbility does exist. HasSteelTrapPortrait(CardInfo) Declaration public static bool HasSteelTrapPortrait(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Returns Type Description System.Boolean HasTrait(PlayableCard, Trait) Checks if the card has a specific Trait. Declaration public static bool HasTrait(this PlayableCard playableCard, Trait trait) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Trait trait The trait to check for. Returns Type Description System.Boolean Returns true if the card has the specified trait. IsAffectedByTidalLock(CardInfo) Checks if this card info will be killed by the effect of Tidal Lock. Declaration public static bool IsAffectedByTidalLock(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description System.Boolean True if the card info is affected by Tidal Lock. IsAffectedByTidalLock(PlayableCard) Checks if this card will be killed by the effect of Tidal Lock. Declaration public static bool IsAffectedByTidalLock(this PlayableCard item) Parameters Type Name Description DiskCardGame.PlayableCard item PlayableCard to access. Returns Type Description System.Boolean True if the card is affected by Tidal Lock. IsBaseGameCard(CardInfo) Indicates if this is a base game card or not. Declaration public static bool IsBaseGameCard(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description System.Boolean True of this card came from the base game; false otherwise. IsGemified(PlayableCard) Declaration public static bool IsGemified(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Boolean IsNotOfTribe(CardInfo, Tribe) Checks if the CardInfo does not belong to a specific Tribe. Declaration public static bool IsNotOfTribe(this CardInfo cardInfo, Tribe tribe) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Tribe tribe The tribe to check for. Returns Type Description System.Boolean Returns true if the card is not of the specified tribe. IsNotOfTribe(PlayableCard, Tribe) Checks if the PlayableCard is not of a specified Tribe. Declaration public static bool IsNotOfTribe(this PlayableCard playableCard, Tribe tribe) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Tribe tribe The tribe to check for. Returns Type Description System.Boolean Returns true if the card is not of the specified tribe. IsOfTribe(PlayableCard, Tribe) Checks if the PlayableCard is of a specified Tribe. Declaration public static bool IsOfTribe(this PlayableCard playableCard, Tribe tribe) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Tribe tribe The tribe to check for. Returns Type Description System.Boolean Returns true if the card is of the specified tribe. IsPelt(CardInfo) Declaration public static bool IsPelt(this CardInfo cardInfo) Parameters Type Name Description DiskCardGame.CardInfo cardInfo Returns Type Description System.Boolean IsPlayerCard(PlayableCard) Checks if the card is not the opponent's card. Declaration public static bool IsPlayerCard(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. Returns Type Description System.Boolean Returns true if card is not the opponent's card. IsShieldAbility(Ability) Declaration public static bool IsShieldAbility(this Ability ability) Parameters Type Name Description DiskCardGame.Ability ability Returns Type Description System.Boolean IsShieldAbility(AbilityInfo) Declaration public static bool IsShieldAbility(this AbilityInfo abilityInfo) Parameters Type Name Description DiskCardGame.AbilityInfo abilityInfo Returns Type Description System.Boolean IsTerrain(CardInfo) Declaration public static bool IsTerrain(this CardInfo cardInfo) Parameters Type Name Description DiskCardGame.CardInfo cardInfo Returns Type Description System.Boolean IsUsingBlueGem(PlayableCard) Declaration public static bool IsUsingBlueGem(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Boolean LacksAbility(CardInfo, Ability) Checks if the CardInfo does not have a specific Ability. Declaration public static bool LacksAbility(this CardInfo cardInfo, Ability ability) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Ability ability The ability to check for. Returns Type Description System.Boolean Returns true if the ability does not exist. LacksAbility(CardModificationInfo, Ability) Checks if the CardModificationInfo does not have a specific Ability. Declaration public static bool LacksAbility(this CardModificationInfo mod, Ability ability) Parameters Type Name Description DiskCardGame.CardModificationInfo mod CardModificationInfo to access. DiskCardGame.Ability ability The ability to check for. Returns Type Description System.Boolean Returns true if the ability does not exist. LacksAbility(PlayableCard, Ability) Check the PlayableCard not having a specific Ability. Declaration public static bool LacksAbility(this PlayableCard playableCard, Ability ability) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Ability ability The ability to check for. Returns Type Description System.Boolean Returns true if the ability does not exist. LacksAllAbilities(CardInfo, Ability[]) Checks if the CardInfo has none of the specified Abilities. Declaration public static bool LacksAllAbilities(this CardInfo cardInfo, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Ability [] abilities The Abilities to check for. Returns Type Description System.Boolean Returns true if cardInfo has none of the given Abilities. LacksAllAbilities(PlayableCard, Ability[]) Checks if the PlayableCard has none of the specified Abilities. A condensed version of CardInfo.LacksAllSpecialAbilities . Declaration public static bool LacksAllAbilities(this PlayableCard playableCard, params Ability[] abilities) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Ability [] abilities The Abilities to check for. Returns Type Description System.Boolean Returns true if playableCard has none of the given Abilities. LacksAllCardMetaCategories(CardInfo, CardMetaCategory[]) Checks if the CardInfo has none of the specified CardMetaCategories. Declaration public static bool LacksAllCardMetaCategories(this CardInfo cardInfo, params CardMetaCategory[] metaCategories) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.CardMetaCategory [] metaCategories The CardMetaCategories to check for. Returns Type Description System.Boolean Returns true if the card has none of the specified CardMetaCategories. LacksAllSpecialAbilities(CardInfo, SpecialTriggeredAbility[]) Checks if the CardInfo has none of the specified SpecialTriggeredAbilities. Declaration public static bool LacksAllSpecialAbilities(this CardInfo cardInfo, params SpecialTriggeredAbility[] specialAbilities) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] specialAbilities The SpecialTriggeredAbilitiess to check for. Returns Type Description System.Boolean Returns true if cardInfo has none of the specified SpecialTriggeredAbilities. LacksAllSpecialAbilities(PlayableCard, SpecialTriggeredAbility[]) Checks if the PlayableCard has none of the specified SpecialTriggeredAbilities. A condensed version of CardInfo.LacksAllSpecialAbilities . Declaration public static bool LacksAllSpecialAbilities(this PlayableCard playableCard, params SpecialTriggeredAbility[] specialAbilities) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.SpecialTriggeredAbility [] specialAbilities The SpecialTriggeredAbilitiess to check for. Returns Type Description System.Boolean Returns true if playableCard has none of the specified SpecialTriggeredAbilities. LacksAllTraits(CardInfo, Trait[]) Checks if the CardInfo has none of the specified Traits. Declaration public static bool LacksAllTraits(this CardInfo cardInfo, params Trait[] traits) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Trait [] traits The Traits to check for. Returns Type Description System.Boolean Returns true if cardInfo has none of the specified Traits. LacksAllTraits(PlayableCard, Trait[]) Checks if the PlayableCard has none of the specified Traits. Declaration public static bool LacksAllTraits(this PlayableCard playableCard, params Trait[] traits) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Trait [] traits The Traits to check for. Returns Type Description System.Boolean Returns true if playableCard has none of the specified Traits. LacksCardMetaCategory(CardInfo, CardMetaCategory) Checks if the CardInfo does not have a specific CardMetaCategory. Declaration public static bool LacksCardMetaCategory(this CardInfo cardInfo, CardMetaCategory metaCategory) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.CardMetaCategory metaCategory The CardMetaCategory to check for. Returns Type Description System.Boolean Returns true if the card is does not have the specified CardMetaCategory. LacksSpecialAbility(CardInfo, SpecialTriggeredAbility) Checks if the CardInfo does not have a specific SpecialTriggeredAbility. Declaration public static bool LacksSpecialAbility(this CardInfo cardInfo, SpecialTriggeredAbility ability) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.SpecialTriggeredAbility ability The specialTriggeredAbility to check for. Returns Type Description System.Boolean Returns true if the specialTriggeredAbility does not exist. LacksSpecialAbility(PlayableCard, SpecialTriggeredAbility) Check the PlayableCard not having a specific SpecialTriggeredAbility. A condensed version of !playableCard.Info.SpecialAbilities.Contains(ability) . Declaration public static bool LacksSpecialAbility(this PlayableCard playableCard, SpecialTriggeredAbility ability) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.SpecialTriggeredAbility ability The specialTriggeredAbility to check for. Returns Type Description System.Boolean Returns true if the specialTriggeredAbility does not exist. LacksTrait(CardInfo, Trait) Checks if the CardInfo does not have a specific Trait. Declaration public static bool LacksTrait(this CardInfo cardInfo, Trait trait) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. DiskCardGame.Trait trait The Trait to check for. Returns Type Description System.Boolean Returns true if the card is does not have the specified Trait. LacksTrait(PlayableCard, Trait) Checks if the card does not have a specific Trait. Declaration public static bool LacksTrait(this PlayableCard playableCard, Trait trait) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. DiskCardGame.Trait trait The trait to check for. Returns Type Description System.Boolean Returns true if the card does not have the specified trait. ModPrefixIs(CardInfo, String) Checks whether the card's mod prefix is equal to the given string. Declaration public static bool ModPrefixIs(this CardInfo info, string prefixToMatch) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String prefixToMatch The prefix to check for. Returns Type Description System.Boolean True if the CardInfo's mod prefix equals prefixToMatch. NotDead(PlayableCard) Checks if the card is not null and not Dead. Declaration public static bool NotDead(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. Returns Type Description System.Boolean Returns true if the card is not null or not Dead. OpposingCard(PlayableCard) Retrieve the PlayableCard that is opposing this PlayableCard in the opposite slot. Declaration public static PlayableCard OpposingCard(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. Returns Type Description DiskCardGame.PlayableCard The card in the opposing slot, otherwise return null. Remarks It is on the implementer to check if the returned value is not null OpposingSlot(PlayableCard) Retrieve the CardSlot object that is opposing this PlayableCard. Declaration public static CardSlot OpposingSlot(this PlayableCard playableCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard PlayableCard to access. Returns Type Description DiskCardGame.CardSlot The card slot opposite of this playableCard, otherwise return null. Remarks It is on the implementer to check if the returned value is not null OtherCardIsOnSameSide(PlayableCard, PlayableCard) Check if the other PlayableCard is on the same side of the board as this PlayableCard. Declaration public static bool OtherCardIsOnSameSide(this PlayableCard playableCard, PlayableCard otherCard) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. DiskCardGame.PlayableCard otherCard The other PlayableCard. Returns Type Description System.Boolean Returns true if both cards are on the board and both are on the opponent cards or both are player cards. OwnerHasBlueGem(PlayableCard) Declaration public static bool OwnerHasBlueGem(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Returns Type Description System.Boolean RemoveAbilities(CardInfo, Ability[]) Removes all stacks of any number of abilities from the card. Declaration public static CardInfo RemoveAbilities(this CardInfo info, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info Card to access. DiskCardGame.Ability [] abilities The abilities to remove. Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. RemoveAbilitiesSingle(CardInfo, Ability[]) Removes any number of abilities from the card. Will remove one instance of each passed ability; multiple instances can be passed. Declaration public static CardInfo RemoveAbilitiesSingle(this CardInfo info, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info Card to access. DiskCardGame.Ability [] abilities The abilities to remove. Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. RemoveAppearances(CardInfo, CardAppearanceBehaviour.Appearance[]) Removes any number of appearance behaviors from the card. Declaration public static CardInfo RemoveAppearances(this CardInfo info, params CardAppearanceBehaviour.Appearance[] appearances) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardAppearanceBehaviour.Appearance [] appearances The appearances to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveAppearancesSingle(CardInfo, CardAppearanceBehaviour.Appearance[]) Removes any number of appearance behaviors from the card. Will remove one instance of each passed appearance; multiple instances can be passed. Declaration public static CardInfo RemoveAppearancesSingle(this CardInfo info, params CardAppearanceBehaviour.Appearance[] appearances) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardAppearanceBehaviour.Appearance [] appearances The appearances to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveCardMetaCategories(CardInfo, CardMetaCategory[]) Removes any number of CardMetaCategories from the card. Declaration public static CardInfo RemoveCardMetaCategories(this CardInfo info, params CardMetaCategory[] cardMetaCategories) Parameters Type Name Description DiskCardGame.CardInfo info Card to access. DiskCardGame.CardMetaCategory [] cardMetaCategories The CardMetaCategories to remove. Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. RemoveCardModificationInfo(PlayableCard, CardModificationInfo, Boolean) Removes the provided CardModificationInfo from the PlayableCard. Searches both its TemporaryMods list and its CardInfo.Mods list. Declaration public static bool RemoveCardModificationInfo(this PlayableCard playableCard, CardModificationInfo modToRemove, bool updateDisplay = true) Parameters Type Name Description DiskCardGame.PlayableCard playableCard The PlayableCard to access. DiskCardGame.CardModificationInfo modToRemove The CardModificationInfo object to remove. System.Boolean updateDisplay Whether or not to call OnStatsChanged after removing the card mod. Returns Type Description System.Boolean True if the mod was successfully removed or false if the mod was not removed or was null. RemoveDecals(CardInfo, Texture[]) Removes any number of decals from the card. Declaration public static CardInfo RemoveDecals(this CardInfo info, params Texture[] decals) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture [] decals The decals to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveDecalsSingle(CardInfo, Texture[]) Removes any number of decals behaviors from the card. Will remove one instance of each passed decals; multiple instances can be passed. Declaration public static CardInfo RemoveDecalsSingle(this CardInfo info, params Texture[] decals) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture [] decals The decals to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveMetaCategories(CardInfo, CardMetaCategory[]) Removes any number of metacategories from the card. Declaration public static CardInfo RemoveMetaCategories(this CardInfo info, params CardMetaCategory[] categories) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardMetaCategory [] categories The categories to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveMetaCategoriesSingle(CardInfo, CardMetaCategory[]) Removes any number of metacategories behaviors from the card. Will remove one instance of each passed appearance; multiple instances can be passed. Declaration public static CardInfo RemoveMetaCategoriesSingle(this CardInfo info, params CardMetaCategory[] categories) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardMetaCategory [] categories The categories to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveShieldCount(PlayableCard, Int32, Ability, Boolean) Reduces the amount of shields a specific ability is currently giving. Declaration public static void RemoveShieldCount(this PlayableCard card, int amount, Ability ability, bool updateDisplay = true) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. System.Int32 amount How many shields to add. DiskCardGame.Ability ability The shield-giving ability to remove shields from. System.Boolean updateDisplay Whether to update the card's display, meaning sigil stack numbers and any shield effects. RemoveShieldCount(PlayableCard, Int32, Boolean) Reduces the amount of shields a specific ability is currently giving. Declaration public static void RemoveShieldCount(this PlayableCard card, int amount, bool updateDisplay = true) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. System.Int32 amount How many shields to add. System.Boolean updateDisplay Whether to update the card's display, meaning sigil stack numbers and any shield effects. RemoveShieldCount<T>(PlayableCard, Int32, Boolean) Declaration public static void RemoveShieldCount<T>(this PlayableCard card, int amount, bool updateDisplay = true) where T : DamageShieldBehaviour Parameters Type Name Description DiskCardGame.PlayableCard card System.Int32 amount System.Boolean updateDisplay Type Parameters Name Description T RemoveSpecialAbilities(CardInfo, SpecialTriggeredAbility[]) Removes any number of special abilities from the card. Declaration public static CardInfo RemoveSpecialAbilities(this CardInfo info, params SpecialTriggeredAbility[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] abilities The special abilities to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveSpecialAbilitiesSingle(CardInfo, SpecialTriggeredAbility[]) Removes any number of special abilities from the card. Will remove one instance of each passed ability; multiple instances can be passed. Declaration public static CardInfo RemoveSpecialAbilitiesSingle(this CardInfo info, params SpecialTriggeredAbility[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] abilities The special abilities to remove. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. RemoveTemporaryMods(PlayableCard, CardModificationInfo[]) Declaration public static void RemoveTemporaryMods(this PlayableCard card, params CardModificationInfo[] mods) Parameters Type Name Description DiskCardGame.PlayableCard card DiskCardGame.CardModificationInfo [] mods RemoveTraits(CardInfo, Trait[]) Removes any number of traits from the card. Declaration public static CardInfo RemoveTraits(this CardInfo info, params Trait[] traits) Parameters Type Name Description DiskCardGame.CardInfo info Card to access. DiskCardGame.Trait [] traits The traits to remove. Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. RemoveTribes(CardInfo, Tribe[]) Removes any number of traits from the card. Declaration public static CardInfo RemoveTribes(this CardInfo info, params Tribe[] tribes) Parameters Type Name Description DiskCardGame.CardInfo info Card to access. DiskCardGame.Tribe [] tribes The tribes to remove. Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. ResetShield(PlayableCard, Ability) A variant of ResetShield that only resets shields belonging is a certain ability. Declaration public static void ResetShield(this PlayableCard card, Ability ability) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. DiskCardGame.Ability ability The shield ability to look for. SetAffectedByTidalLock(CardInfo, Boolean) Sets whether the card should be killed by Tidal Lock's effect. Declaration public static CardInfo SetAffectedByTidalLock(this CardInfo info, bool affectedByTidalLock = true) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Boolean affectedByTidalLock Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetAltPortrait(CardInfo, String) Sets the card's alternate portrait. This portrait is only used when asked for by an ability or an appearance behavior. Declaration public static CardInfo SetAltPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetAltPortrait(CardInfo, Sprite) Sets the card's alternate portrait. This portrait is only used when asked for by an ability or an appearance behavior. Declaration public static CardInfo SetAltPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite portrait The sprite containing the card portrait. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetAltPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the card's alternate portrait. This portrait is only used when asked for by an ability or an appearance behavior. Declaration public static CardInfo SetAltPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetAnimatedPortrait(CardInfo, GameObject) Sets the animated portrait for the given CardInfo. Declaration public static CardInfo SetAnimatedPortrait(this CardInfo info, GameObject portrait) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. GameObject portrait The to check for. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetBaseAttackAndHealth(CardInfo, Nullable<Int32>, Nullable<Int32>) Sets the base attack and health of the card. Declaration public static CardInfo SetBaseAttackAndHealth(this CardInfo info, int? baseAttack = 0, int? baseHealth = 0) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Nullable < System.Int32 > baseAttack The base attack for the card. System.Nullable < System.Int32 > baseHealth The base health for the card. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetBasic(CardInfo, String, Int32, Int32, String) Sets a number of basic properties of the card Declaration public static CardInfo SetBasic(this CardInfo info, string displayedName, int attack, int health, string description = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String displayedName Displayed name of the card. System.Int32 attack Attack of the card. System.Int32 health Health of the card. System.String description The description that plays when the card is seen for the first time. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetBloodCost(CardInfo, Nullable<Int32>) Sets the blood cost of the card. Declaration public static CardInfo SetBloodCost(this CardInfo info, int? bloodCost = 0) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Nullable < System.Int32 > bloodCost The cost in blood (sacrifices). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetBonesCost(CardInfo, Nullable<Int32>) Sets the bones cost of the card. Declaration public static CardInfo SetBonesCost(this CardInfo info, int? bonesCost = 0) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Nullable < System.Int32 > bonesCost The cost in bones. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetBrokenShieldPortrait(CardInfo, String) Sets the card's alternate broken shield portrait. This portrait is only used when a card with a shield-giving sigil loses all its shields. Declaration public static CardInfo SetBrokenShieldPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetBrokenShieldPortrait(CardInfo, Sprite) Declaration public static CardInfo SetBrokenShieldPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetBrokenShieldPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetBrokenShieldPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetCardComplexity(CardInfo, CardComplexity) Sets the CardComplexity for the card. Used mainly in Act 1 to determine whether a certain is obtainable. Vanilla: unlocked and learned by default Simple: unlocked by default Intermediate: unlocked after the second tutorial Advanced: unlocked after the third tutorial if all its abilities have been learned Declaration public static CardInfo SetCardComplexity(this CardInfo info, CardComplexity complexity) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardComplexity complexity The CardComplexity to use. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetCardTemple(CardInfo, CardTemple) Sets the CardTemple for the card. Used to determine what cards are obtainable in each Act. Act 1 uses Nature cards, Act 2 uses all Temples for each region, Act 3 uses Tech cards. Declaration public static CardInfo SetCardTemple(this CardInfo info, CardTemple temple) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. CardTemple temple The CardTemple to use. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetCost(CardInfo, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, List<GemType>) Sets the cost of the card. Any and all costs can be set this way. Declaration public static CardInfo SetCost(this CardInfo info, int? bloodCost = 0, int? bonesCost = 0, int? energyCost = 0, List<GemType> gemsCost = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Nullable < System.Int32 > bloodCost The cost in blood (sacrifices). System.Nullable < System.Int32 > bonesCost The cost in bones. System.Nullable < System.Int32 > energyCost The cost in energy. List < DiskCardGame.GemType > gemsCost The cost in gems. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetCustomCost(CardInfo, CardCostManager.FullCardCost, Int32) Sets a card's custom cost property using the provided FullCardCost object as a reference. Declaration public static CardInfo SetCustomCost(this CardInfo info, CardCostManager.FullCardCost customCost, int amount) Parameters Type Name Description DiskCardGame.CardInfo info The CardInfo to modify. CardCostManager.FullCardCost customCost The FullCardCost representing the cost we want to set. System.Int32 amount How much of the custom cost the CardInfo should need to be played. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetCustomCost(CardInfo, String, Int32) A variant of SetExtendedProperty intended to be used to set properties representing custom costs. Primarily provided for clarity of purpose. Declaration public static CardInfo SetCustomCost(this CardInfo info, string costName, int amount) Parameters Type Name Description DiskCardGame.CardInfo info The CardInfo to modify. System.String costName The name of the cost we want to set. System.Int32 amount How much of the custom cost the CardInfo should need to be played. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetCustomCost<T>(CardInfo, Int32) Declaration public static CardInfo SetCustomCost<T>(this CardInfo info, int amount) where T : CustomCardCost Parameters Type Name Description DiskCardGame.CardInfo info System.Int32 amount Returns Type Description DiskCardGame.CardInfo Type Parameters Name Description T SetCustomUnlockCheck(CardInfo, Func<Boolean, Int32, Boolean>) Sets the custom unlock check for the card. Some parts require a card is unlocked before it can be obtained or used. Declaration public static CardInfo SetCustomUnlockCheck(this CardInfo c, Func<bool, int, bool> check) Parameters Type Name Description DiskCardGame.CardInfo c The card. Func < System.Boolean , System.Int32 , System.Boolean > check The custom unlock check, a func that needs to return true for the card to be unlocked. The bool argument is true when the game is in Kaycee's Mod mode and the int argument is the current Kaycee's Mod challenge level. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetDefaultEvolutionName(CardInfo, String) Sets the default evolution name for the card. This is the name used when the card doesn't evolve into another card. Declaration public static CardInfo SetDefaultEvolutionName(this CardInfo info, string defaultName) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String defaultName The default evolution name to use. Pass in 'null' to use the vanilla default. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetDefaultPart1Card(CardInfo) Sets the card to behave as a \"normal\" card in Part 1. The CardTemple is Nature and it will appear in choice nodes and trader nodes. Declaration public static CardInfo SetDefaultPart1Card(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetDefaultPart3Card(CardInfo) Sets the card to behave as a \"normal\" card in Part 3. The CardTemple is Tech and it will appear in choice nodes and as a potential random card from GiftBot. Declaration public static CardInfo SetDefaultPart3Card(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetDisplayedName(CardInfo, String) Sets the displayed name of the card. Declaration public static CardInfo SetDisplayedName(this CardInfo info, string displayedName) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String displayedName The displayed name for the card. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveAltPortrait(CardInfo, String) Sets the emissive alternate portrait for the card. This can only be done after the alternate portrait has been set (SetAltPortrait). Declaration public static CardInfo SetEmissiveAltPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveAltPortrait(CardInfo, Sprite) Sets the emissive alternate portrait for the card. This can only be done after the alternate portrait has been set (SetAltPortrait). Declaration public static CardInfo SetEmissiveAltPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite portrait The sprite containing the emission. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveAltPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the emissive alternate portrait for the card. This can only be done after the alternate portrait has been set (SetAltPortrait). Declaration public static CardInfo SetEmissiveAltPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the emission. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveBrokenShieldPortrait(CardInfo, String) Sets the emissive broken shield portrait for the card. This can only be done after the default broken shield portrait has been set (SetBrokenShieldPortrait). Declaration public static CardInfo SetEmissiveBrokenShieldPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveBrokenShieldPortrait(CardInfo, Sprite) Declaration public static CardInfo SetEmissiveBrokenShieldPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetEmissiveBrokenShieldPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetEmissiveBrokenShieldPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetEmissivePortrait(CardInfo, String) Sets the emissive portrait for the card. This can only be done after the default portrait has been set (SetPortrait). Declaration public static CardInfo SetEmissivePortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissivePortrait(CardInfo, Sprite) Sets the emissive portrait for the card. This can only be done after the default portrait has been set (SetPortrait). Declaration public static CardInfo SetEmissivePortrait(this CardInfo info, Sprite sprite) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite sprite The sprite containing the emission. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissivePortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the emissive portrait for the card. This can only be done after the default portrait has been set (SetPortrait). Declaration public static CardInfo SetEmissivePortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the emission. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveSacrificablePortrait(CardInfo, String) Sets the emissive sacrifcable portrait for the card. This can only be done after the sacrificable portrait has been set (SetSacrifablePortrait). Declaration public static CardInfo SetEmissiveSacrificablePortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveSacrificablePortrait(CardInfo, Sprite) Declaration public static CardInfo SetEmissiveSacrificablePortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetEmissiveSacrificablePortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetEmissiveSacrificablePortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetEmissiveSteelTrapPortrait(CardInfo, String) Sets the emissive steel trap portrait for the card. This can only be done after the default steel trap portrait has been set (SetSteelTrapPortrait). Declaration public static CardInfo SetEmissiveSteelTrapPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEmissiveSteelTrapPortrait(CardInfo, Sprite) Declaration public static CardInfo SetEmissiveSteelTrapPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetEmissiveSteelTrapPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetEmissiveSteelTrapPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetEnergyCost(CardInfo, Nullable<Int32>) Sets the energy cost of the card. Declaration public static CardInfo SetEnergyCost(this CardInfo info, int? energyCost = 0) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Nullable < System.Int32 > energyCost The cost in energy. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEvolve(CardInfo, CardInfo, Int32, IEnumerable<CardModificationInfo>) Sets the evolve parameters of the card. These parameters are used to make the Evolve ability function correctly. Declaration public static CardInfo SetEvolve(this CardInfo info, CardInfo evolveCard, int numberOfTurns, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardInfo evolveCard The card that will be generated after the set number of turns. System.Int32 numberOfTurns The number of turns before the card evolves. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the evolved card. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetEvolve(CardInfo, String, Int32, IEnumerable<CardModificationInfo>) Sets the evolve parameters of the card. These parameters are used to make the Evolve ability function correctly. This function uses delayed loading to attach the evolution to the card, so if the evolve card doesn't exist yet, this function will still work. Declaration public static CardInfo SetEvolve(this CardInfo info, string evolveInto, int numberOfTurns, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String evolveInto The name of card that will be generated after the set number of turns. System.Int32 numberOfTurns The number of turns before the card evolves. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the evolved card. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetExtendedProperty(CardInfo, String, Object) Adds a custom property value to the card. Declaration public static CardInfo SetExtendedProperty(this CardInfo info, string propertyName, object value) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String propertyName The name of the property to set. System.Object value The value of the property. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetGBCPlayable(CardInfo, CardTemple) Makes the card fully playable in GBC mode and able to appear in card packs. Declaration public static CardInfo SetGBCPlayable(this CardInfo info, CardTemple temple) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. CardTemple temple The temple that the card will exist under. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetGemify(CardInfo, Boolean) Sets whether the card should be Gemified or not. Can and will un-Gemify cards. Declaration public static CardInfo SetGemify(this CardInfo info, bool gemify = true) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Boolean gemify Whether the card should be gemified. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetGemsCost(CardInfo, GemType[]) Sets the gems cost of the card. Declaration public static CardInfo SetGemsCost(this CardInfo info, params GemType[] gemsCost) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.GemType [] gemsCost The cost in Mox. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetGemsCost(CardInfo, List<GemType>) Sets the gems cost of the card. Declaration public static CardInfo SetGemsCost(this CardInfo info, List<GemType> gemsCost = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. List < DiskCardGame.GemType > gemsCost The cost in Mox. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetHideStats(CardInfo, Boolean) Sets whether or not the card's Power and Health stats will be displayed. Declaration public static CardInfo SetHideStats(this CardInfo info, bool hideStats = true) Parameters Type Name Description DiskCardGame.CardInfo info System.Boolean hideStats Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. SetIceCube(CardInfo, CardInfo, IEnumerable<CardModificationInfo>) Sets the ice cube parameters of the card. These parameters are used to make the IceCube ability function correctly. Declaration public static CardInfo SetIceCube(this CardInfo info, CardInfo iceCube, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardInfo iceCube The card that will be generated when this card dies. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the ice cube contents. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetIceCube(CardInfo, String, IEnumerable<CardModificationInfo>) Sets the ice cube parameters of the card. These parameters are used to make the IceCube ability function correctly. This function uses delayed loading to attach the ice cube to the card, so if the ice cube card doesn't exist yet, this function will still work. Declaration public static CardInfo SetIceCube(this CardInfo info, string iceCubeName, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String iceCubeName The name of the card that will be generated when this card dies. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the ice cube contents. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetLostTailPortrait(CardInfo, String) Sets the card's lost tail portrait. This portrait is used when the card has the TailOnHit ability and has dodged a hit. Declaration public static CardInfo SetLostTailPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetLostTailPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the card's lost tail portrait. This portrait is used when the card has the TailOnHit ability and has dodged a hit. Declaration public static CardInfo SetLostTailPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetLostTailPortrait(TailParams, String, CardInfo) Sets the card's lost tail portrait. This portrait is used when the card has the TailOnHit ability and has dodged a hit. Declaration public static TailParams SetLostTailPortrait(this TailParams info, string pathToArt, CardInfo owner) Parameters Type Name Description DiskCardGame.TailParams info Tail to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). DiskCardGame.CardInfo owner The card that the tail parameters belongs to. Returns Type Description DiskCardGame.TailParams The same TailParams so a chain can continue. SetLostTailPortrait(TailParams, Sprite, CardInfo) Sets the card's lost tail portrait. This portrait is used when the card has the TailOnHit ability and has dodged a hit. Declaration public static TailParams SetLostTailPortrait(this TailParams info, Sprite portrait, CardInfo owner) Parameters Type Name Description DiskCardGame.TailParams info Tail to access. Sprite portrait The sprite containing the card portrait. DiskCardGame.CardInfo owner The card that the tail parameters belongs to. Returns Type Description DiskCardGame.TailParams The same TailParams so a chain can continue. SetLostTailPortrait(TailParams, Texture2D, CardInfo, Nullable<FilterMode>) Sets the card's lost tail portrait. This portrait is used when the card has the TailOnHit ability and has dodged a hit. Declaration public static TailParams SetLostTailPortrait(this TailParams info, Texture2D portrait, CardInfo owner, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.TailParams info Tail to access. Texture2D portrait The texture containing the card portrait. DiskCardGame.CardInfo owner The card that the tail parameters belongs to. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.TailParams The same TailParams so a chain can continue. SetName(CardInfo, String, String) Sets the name of the card. Declaration public static CardInfo SetName(this CardInfo info, string name, string modPrefix = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String name The name for the card. System.String modPrefix The string that will be prefixed to the card name if it doesn't already exist. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetNames(CardInfo, String, String, String) Sets the card name and displayed name of the card. Declaration public static CardInfo SetNames(this CardInfo info, string name, string displayedName, string modPrefix = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String name The name for the card. System.String displayedName The displayed name for the card. System.String modPrefix The string that will be prefixed to the card name if it doesn't already exist. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetOnePerDeck(CardInfo, Boolean) Sets the card's onePerDeck field, which controls whether the player can own multiple copies of it in their deck. Declaration public static CardInfo SetOnePerDeck(this CardInfo info, bool onePerDeck = true) Parameters Type Name Description DiskCardGame.CardInfo info System.Boolean onePerDeck Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. SetPelt(CardInfo, Boolean) Adds the Pelt trait and background to this card, and optionally adds the SpawnLice special ability. Declaration public static CardInfo SetPelt(this CardInfo info, bool spawnLice = true) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Boolean spawnLice Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelAlternatePortrait(CardInfo, String) Sets the card's pixel alternate portrait. This portrait is used when the card is displayed in GBC mode (Act 2). Declaration public static CardInfo SetPixelAlternatePortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelAlternatePortrait(CardInfo, Sprite) Sets the card's pixel alternate portrait. This portrait is used when the card is displayed in GBC mode (Act 2). Declaration public static CardInfo SetPixelAlternatePortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite portrait The sprite containing the card portrait. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelAlternatePortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the card's pixel alternate portrait. This portrait is used when the card is displayed in GBC mode (Act 2). Declaration public static CardInfo SetPixelAlternatePortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelBrokenShieldPortrait(CardInfo, String) Sets the card's alternate pixel broken shield portrait. This portrait is only used in Act 2. Declaration public static CardInfo SetPixelBrokenShieldPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelBrokenShieldPortrait(CardInfo, Sprite) Declaration public static CardInfo SetPixelBrokenShieldPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetPixelBrokenShieldPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetPixelBrokenShieldPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetPixelPortrait(CardInfo, String) Sets the card's pixel portrait. This portrait is used when the card is displayed in GBC mode (Act 2). Declaration public static CardInfo SetPixelPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelPortrait(CardInfo, Sprite) Sets the card's pixel portrait. This portrait is used when the card is displayed in GBC mode (Act 2). Declaration public static CardInfo SetPixelPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite portrait The sprite containing the card portrait. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the card's pixel portrait. This portrait is used when the card is displayed in GBC mode (Act 2). Declaration public static CardInfo SetPixelPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelSacrificablePortrait(CardInfo, String) Sets the card's pixel sacrificable portrait. This portrait is only used in Act 2. Declaration public static CardInfo SetPixelSacrificablePortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelSacrificablePortrait(CardInfo, Sprite) Declaration public static CardInfo SetPixelSacrificablePortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetPixelSacrificablePortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetPixelSacrificablePortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetPixelSteelTrapPortrait(CardInfo, String) Sets the card's alternate steep trap portrait. This portrait is only used when the Steel Trap ability triggers in Act 2. Declaration public static CardInfo SetPixelSteelTrapPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPixelSteelTrapPortrait(CardInfo, Sprite) Declaration public static CardInfo SetPixelSteelTrapPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetPixelSteelTrapPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the card's alternate steep trap portrait. This portrait is only used when the Steel Trap ability triggers in Act 2. Declaration public static CardInfo SetPixelSteelTrapPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPortrait(CardInfo, String) Sets the default card portrait for the card Declaration public static CardInfo SetPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPortrait(CardInfo, Sprite) Sets the default card portrait for the card Declaration public static CardInfo SetPortrait(this CardInfo info, Sprite sprite) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite sprite The sprite containing the card portrait. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Sets the default card portrait for the card Declaration public static CardInfo SetPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPortrait(CardInfo, Texture2D, Texture2D, Nullable<FilterMode>) Sets the cards portrait and emission at the same time. Declaration public static CardInfo SetPortrait(this CardInfo info, Texture2D portrait, Texture2D emission, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait The texture containing the card portrait. Texture2D emission The texture containing the emission. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo . SetPortraitAndEmission(CardInfo, String, String) Sets the cards portrait and emission at the same time. Declaration public static CardInfo SetPortraitAndEmission(this CardInfo info, string pathToArt, string pathToEmission) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). System.String pathToEmission The path to the .png file containing the emission artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPortraitAndEmission(CardInfo, Sprite, Sprite) Sets the cards portrait and emission at the same time. Declaration public static CardInfo SetPortraitAndEmission(this CardInfo info, Sprite portrait, Sprite emission) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Sprite portrait The sprite containing the card portrait. Sprite emission The sprite containing the emission. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetPortraitAndEmission(CardInfo, Texture2D, Texture2D, Nullable<FilterMode>) Sets the cards portrait and emission at the same time. Declaration public static CardInfo SetPortraitAndEmission(this CardInfo info, Texture2D portrait, Texture2D emission, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Texture2D portrait The texture containing the card portrait. Texture2D emission The texture containing the emission. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetRare(CardInfo) Sets the card so it shows up for rare card choices and applies the rare background. Declaration public static CardInfo SetRare(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetSacrificablePortrait(CardInfo, String) Sets the card's alternate sacricable portrait. This portrait is only used when a card with this CardInfo is on the board when the player is selecting sacrifices. Declaration public static CardInfo SetSacrificablePortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetSacrificablePortrait(CardInfo, Sprite) Declaration public static CardInfo SetSacrificablePortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetSacrificablePortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetSacrificablePortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetSpecialAbilities(CardInfo, SpecialTriggeredAbility[]) Sets the CardInfo's special abilities field to any number of special abilities to the card. Declaration public static CardInfo SetSpecialAbilities(this CardInfo info, params SpecialTriggeredAbility[] abilities) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.SpecialTriggeredAbility [] abilities The abilities to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetStatIcon(CardInfo, SpecialStatIcon) Sets the stat icon to the card. Declaration public static CardInfo SetStatIcon(this CardInfo info, SpecialStatIcon statIcon) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.SpecialStatIcon statIcon The stat icon to set. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetSteelTrapPortrait(CardInfo, String) Sets the card's alternate steep trap portrait. This portrait is only used when the Steel Trap ability triggers. Declaration public static CardInfo SetSteelTrapPortrait(this CardInfo info, string pathToArt) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String pathToArt The path to the .png file containing the portrait artwork (relative to the Plugins directory). Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetSteelTrapPortrait(CardInfo, Sprite) Declaration public static CardInfo SetSteelTrapPortrait(this CardInfo info, Sprite portrait) Parameters Type Name Description DiskCardGame.CardInfo info Sprite portrait Returns Type Description DiskCardGame.CardInfo SetSteelTrapPortrait(CardInfo, Texture2D, Nullable<FilterMode>) Declaration public static CardInfo SetSteelTrapPortrait(this CardInfo info, Texture2D portrait, FilterMode? filterMode = null) Parameters Type Name Description DiskCardGame.CardInfo info Texture2D portrait System.Nullable < FilterMode > filterMode Returns Type Description DiskCardGame.CardInfo SetStrafeFlipsPortrait(CardInfo, Boolean) Sets whether or not the CardInfo's portrait will be flipped when Strafe and similar abilities change direction. Declaration public static CardInfo SetStrafeFlipsPortrait(this CardInfo info, bool flipPortrait = true) Parameters Type Name Description DiskCardGame.CardInfo info System.Boolean flipPortrait Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. SetTail(CardInfo, CardInfo, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. Declaration public static CardInfo SetTail(this CardInfo info, CardInfo tail, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardInfo tail The card that will be generated as the \"tail\" when the first hit is dodged. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTail(CardInfo, CardInfo, Sprite, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. Declaration public static CardInfo SetTail(this CardInfo info, CardInfo tail, Sprite tailLostPortrait, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardInfo tail The card that will be generated as the \"tail\" when the first hit is dodged. Sprite tailLostPortrait The sprite containing the card portrait. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTail(CardInfo, CardInfo, Texture2D, Nullable<FilterMode>, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. Declaration public static CardInfo SetTail(this CardInfo info, CardInfo tail, Texture2D tailLostPortrait, FilterMode? filterMode = null, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.CardInfo tail The card that will be generated as the \"tail\" when the first hit is dodged. Texture2D tailLostPortrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTail(CardInfo, String, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. This function uses delayed loading to attach the tail to the card, so if the tail card doesn't exist yet, this function will still work. Declaration public static CardInfo SetTail(this CardInfo info, string tailName, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String tailName The name of the card that will be generated as the \"tail\" when the first hit is dodged. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTail(CardInfo, String, String, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. This function uses delayed loading to attach the tail to the card, so if the tail card doesn't exist yet, this function will still work. Declaration public static CardInfo SetTail(this CardInfo info, string tailName, string pathToLostTailArt = null, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String tailName The name of the card that will be generated as the \"tail\" when the first hit is dodged. System.String pathToLostTailArt The path to the .png file containing the lost tail artwork (relative to the Plugins directory). IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTail(CardInfo, String, Sprite, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. This function uses delayed loading to attach the tail to the card, so if the tail card doesn't exist yet, this function will still work. Declaration public static CardInfo SetTail(this CardInfo info, string tailName, Sprite tailLostPortrait, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String tailName The name of the card that will be generated as the \"tail\" when the first hit is dodged. Sprite tailLostPortrait The sprite containing the card portrait. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue.. SetTail(CardInfo, String, Texture2D, Nullable<FilterMode>, IEnumerable<CardModificationInfo>) Sets the tail parameters of the card. These parameters are used to make the TailOnHit ability function correctly. This function uses delayed loading to attach the tail to the card, so if the tail card doesn't exist yet, this function will still work. Declaration public static CardInfo SetTail(this CardInfo info, string tailName, Texture2D tailLostPortrait, FilterMode? filterMode = null, IEnumerable<CardModificationInfo> mods = null) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String tailName The name of the card that will be generated as the \"tail\" when the first hit is dodged. Texture2D tailLostPortrait The texture containing the card portrait. System.Nullable < FilterMode > filterMode The filter mode for the texture, or null if no change. IEnumerable < DiskCardGame.CardModificationInfo > mods A set of card mods to be applied to the tail. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTerrain(CardInfo) Adds the terrain trait and background to this card. Declaration public static CardInfo SetTerrain(this CardInfo info) Parameters Type Name Description DiskCardGame.CardInfo info Card to access. Returns Type Description DiskCardGame.CardInfo The same card info so a chain can continue. SetTerrain(CardInfo, Boolean) Adds the Terrain trait and background to this card, with the option to not use TerrainLayout. Declaration public static CardInfo SetTerrain(this CardInfo info, bool useTerrainLayout) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.Boolean useTerrainLayout Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTraits(CardInfo, Trait[]) Sets any number of traits to the card. Declaration public static CardInfo SetTraits(this CardInfo info, params Trait[] traits) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.Trait [] traits The traits to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTransformerCardId(CardInfo, String) Sets whether the card should be killed by Tidal Lock's effect. Declaration public static CardInfo SetTransformerCardId(this CardInfo info, string transformerCardId) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. System.String transformerCardId Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SetTribes(CardInfo, Tribe[]) Set any number of tribes to the card. Declaration public static CardInfo SetTribes(this CardInfo info, params Tribe[] tribes) Parameters Type Name Description DiskCardGame.CardInfo info CardInfo to access. DiskCardGame.Tribe [] tribes The tribes to add. Returns Type Description DiskCardGame.CardInfo The same CardInfo so a chain can continue. SpawnInHand(CardInfo, List<CardModificationInfo>, Vector3, Single, Action<PlayableCard>) Spawns the CardInfo object to the player's hand. Declaration public static IEnumerator SpawnInHand(this CardInfo cardInfo, List<CardModificationInfo> temporaryMods = null, Vector3 spawnOffset = default(Vector3), float onDrawnTriggerDelay = 0F, Action<PlayableCard> cardSpawnedCallback = null) Parameters Type Name Description DiskCardGame.CardInfo cardInfo CardInfo to access. List < DiskCardGame.CardModificationInfo > temporaryMods The mods that will be added to the PlayableCard object. Vector3 spawnOffset The position of where the card will appear from. Default is a Vector3 of (0, 6, 1.5). System.Single onDrawnTriggerDelay The amount of time to wait before being added to the hand. Action < DiskCardGame.PlayableCard > cardSpawnedCallback The action to invoke after the card has spawned but before being added to the hand. One of two uses in the vanilla game is if the player has completed the event 'ImprovedSmokeCardDiscovered'. If this event is complete, the 'Improved Smoke' PlayableCard has the emissive portrait forced on and is then re-rendered. The other use is during Grimora's fight in Act 2. During the reanimation sequence, the background sprite is replaced with a rare card background. . Returns Type Description System.Collections.IEnumerator The enumeration of the card being placed in the player's hand. TransformIntoCardAboveHand(PlayableCard, CardInfo, Action, Action) A version of TransformIntoCardInHand that incorporates MoveCardAboveHand. Declaration public static IEnumerator TransformIntoCardAboveHand(this PlayableCard card, CardInfo evolvedInfo, Action onTransformedCallback = null, Action preTransformCallback = null) Parameters Type Name Description DiskCardGame.PlayableCard card DiskCardGame.CardInfo evolvedInfo Action onTransformedCallback Action preTransformCallback Returns Type Description System.Collections.IEnumerator TransformIntoCardInHand(PlayableCard, CardInfo, Action, Action) A version of TransformIntoCard tailored to visually work on cards in the hand. Declaration public static IEnumerator TransformIntoCardInHand(this PlayableCard card, CardInfo evolvedInfo, Action onTransformedCallback = null, Action preTransformCallback = null) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard to access. DiskCardGame.CardInfo evolvedInfo The CardInfo to change the card into. Action onTransformedCallback An Action to invoke after the evolvedInfo is set. Action preTransformCallback An Action to invoke before the evolvedInfo is set. Returns Type Description System.Collections.IEnumerator"
  },
  "api/InscryptionAPI.Card.CardManager.CardAltPortraits.html": {
    "href": "api/InscryptionAPI.Card.CardManager.CardAltPortraits.html",
    "title": "Class CardManager.CardAltPortraits | InscryptionAPI",
    "keywords": "Class CardManager.CardAltPortraits Inheritance System.Object CardManager.CardAltPortraits Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class CardAltPortraits Fields BrokenShieldPortrait Declaration public Sprite BrokenShieldPortrait Field Value Type Description Sprite PixelAlternatePortrait Declaration public Sprite PixelAlternatePortrait Field Value Type Description Sprite PixelBrokenShieldPortrait Declaration public Sprite PixelBrokenShieldPortrait Field Value Type Description Sprite PixelSacrificablePortrait Declaration public Sprite PixelSacrificablePortrait Field Value Type Description Sprite PixelSteelTrapPortrait Declaration public Sprite PixelSteelTrapPortrait Field Value Type Description Sprite SacrificablePortrait Declaration public Sprite SacrificablePortrait Field Value Type Description Sprite SteelTrapPortrait Declaration public Sprite SteelTrapPortrait Field Value Type Description Sprite Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.CardManager.html": {
    "href": "api/InscryptionAPI.Card.CardManager.html",
    "title": "Class CardManager | InscryptionAPI",
    "keywords": "Class CardManager Inheritance System.Object CardManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class CardManager Fields BaseGameCards The set of cards that are in the base game Declaration public static readonly ReadOnlyCollection<CardInfo> BaseGameCards Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < DiskCardGame.CardInfo > . Properties AllCardsCopy A copy of all cards in the card pool. Declaration public static List<CardInfo> AllCardsCopy { get; } Property Value Type Description List < DiskCardGame.CardInfo > . Methods Add(String, CardInfo) Adds a new card to the card pool. If your card's name does not match your mod prefix, it will be updated to match. Declaration public static void Add(string modPrefix, CardInfo newCard) Parameters Type Name Description System.String modPrefix The unique prefix that identifies your card mod in the card pool. DiskCardGame.CardInfo newCard The card to add. BrokenShieldPortrait(CardInfo) Declaration public static Sprite BrokenShieldPortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite EmissiveBrokenShieldPortrait(CardInfo) Declaration public static Sprite EmissiveBrokenShieldPortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite EmissiveSacrificablePortrait(CardInfo) Declaration public static Sprite EmissiveSacrificablePortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite EmissiveSteelTrapPortrait(CardInfo) Declaration public static Sprite EmissiveSteelTrapPortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite GetCardExtensionTable(CardInfo) Declaration public static Dictionary<string, string> GetCardExtensionTable(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Dictionary < System.String , System.String > GetExtendedClass<T>(CardInfo) Get a custom extension class that will exist on all clones of a card Declaration public static T GetExtendedClass<T>(this CardInfo card) where T : class, new() Parameters Type Name Description DiskCardGame.CardInfo card Card to access. Returns Type Description T The instance of T for this card. Type Parameters Name Description T The custom class LogCardInfo(CardInfo, String) Declaration public static CardInfo LogCardInfo(CardInfo info, string cardInfoName) Parameters Type Name Description DiskCardGame.CardInfo info System.String cardInfoName Returns Type Description DiskCardGame.CardInfo New(String, String, String, Int32, Int32, String) Adds a new card to the card pool. Declaration public static CardInfo New(string modPrefix, string name, string displayName, int attack, int health, string description = null) Parameters Type Name Description System.String modPrefix The unique prefix that identifies your card mod in the card pool. System.String name The internal name of your card - used to find and reference your card. If this name does not match the mod prefix, it will be changed to match [mod_prefix]_[name]. System.String displayName The displayed name of the card - what will be seen in-game on the card. System.Int32 attack The Power of the card. System.Int32 health The Health of the card. System.String description The spoken description when the card is first encountered. Returns Type Description DiskCardGame.CardInfo The newly created card's CardInfo. PixelAlternatePortrait(CardInfo) Declaration public static Sprite PixelAlternatePortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite PixelBrokenShieldPortrait(CardInfo) Declaration public static Sprite PixelBrokenShieldPortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite PixelSacrificablePortrait(CardInfo) Declaration public static Sprite PixelSacrificablePortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite PixelSteelTrapPortrait(CardInfo) Declaration public static Sprite PixelSteelTrapPortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite Remove(CardInfo) Removes a custom card from the card pool. Cannot be used to remove base game cards. Declaration public static void Remove(CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card The card to remove. SacrificablePortrait(CardInfo) Declaration public static Sprite SacrificablePortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite SteelTrapPortrait(CardInfo) Declaration public static Sprite SteelTrapPortrait(this CardInfo card) Parameters Type Name Description DiskCardGame.CardInfo card Returns Type Description Sprite SyncCardList() Re-executes events and rebuilds the card pool. Declaration public static void SyncCardList() Events ModifyCardList This event runs every time the card list is resynced. By adding listeners to this event, you can modify cards that have been added to the list after your mod was loaded. Declaration public static event Func<List<CardInfo>, List<CardInfo>> ModifyCardList Event Type Type Description Func < List < DiskCardGame.CardInfo >, List < DiskCardGame.CardInfo >>"
  },
  "api/InscryptionAPI.Card.CardModificationInfoExtensions.html": {
    "href": "api/InscryptionAPI.Card.CardModificationInfoExtensions.html",
    "title": "Class CardModificationInfoExtensions | InscryptionAPI",
    "keywords": "Class CardModificationInfoExtensions Inheritance System.Object CardModificationInfoExtensions Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public static class CardModificationInfoExtensions Methods AddAbilities(CardModificationInfo, Ability[]) Declaration public static CardModificationInfo AddAbilities(this CardModificationInfo mod, params Ability[] abilities) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.Ability [] abilities Returns Type Description DiskCardGame.CardModificationInfo AddDecalIds(CardModificationInfo, String[]) Declaration public static CardModificationInfo AddDecalIds(this CardModificationInfo mod, params string[] decalIds) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String [] decalIds Returns Type Description DiskCardGame.CardModificationInfo AddNegateAbilities(CardModificationInfo, Ability[]) Declaration public static CardModificationInfo AddNegateAbilities(this CardModificationInfo mod, params Ability[] negateAbilities) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.Ability [] negateAbilities Returns Type Description DiskCardGame.CardModificationInfo CleanId(CardModificationInfo) Declaration public static string CleanId(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.String ClearAllRemovedGemsCosts(CardModificationInfo) Declaration public static void ClearAllRemovedGemsCosts(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod ClearCustomCostsId(CardModificationInfo) Declaration public static CardModificationInfo ClearCustomCostsId(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description DiskCardGame.CardModificationInfo ClearCustomPropertiesId(CardModificationInfo) Removes the custom properties field from a CardModificationInfo's singletonId. Declaration public static CardModificationInfo ClearCustomPropertiesId(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod The CardModificationInfo object whose properties we want to clear. Returns Type Description DiskCardGame.CardModificationInfo The same CardModificationInfo so a chain can continue. ClearRemovedGemsCost(CardModificationInfo, GemType[]) Declaration public static CardModificationInfo ClearRemovedGemsCost(this CardModificationInfo mod, params GemType[] gemTypes) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.GemType [] gemTypes Returns Type Description DiskCardGame.CardModificationInfo GetCustomCost(CardModificationInfo, String) Declaration public static int GetCustomCost(this CardModificationInfo mod, string costName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String costName Returns Type Description System.Int32 GetCustomCostId(CardModificationInfo, String) Declaration public static string GetCustomCostId(this CardModificationInfo mod, string costName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String costName Returns Type Description System.String GetCustomCostIdValue(CardModificationInfo, String) Declaration public static int GetCustomCostIdValue(this CardModificationInfo mod, string costName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String costName Returns Type Description System.Int32 GetCustomCostsFromMod(CardModificationInfo) Declaration public static List<CardCostManager.FullCardCost> GetCustomCostsFromMod(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description List < CardCostManager.FullCardCost > GetCustomProperty(CardModificationInfo, String) Declaration public static string GetCustomProperty(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String propertyName Returns Type Description System.String GetCustomPropertyId(CardModificationInfo, String) Declaration public static string GetCustomPropertyId(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String propertyName Returns Type Description System.String GetExtendedProperty(CardModificationInfo, String) Gets a custom property value from the card. Declaration public static string GetExtendedProperty(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod CardModificationInfo to access. System.String propertyName The name of the property to get the value of. Returns Type Description System.String The custom property value as a string. If it doesn't exist, returns null. GetExtendedPropertyAsBool(CardModificationInfo, String) Gets a custom property as a boolean (can be null). Declaration public static bool? GetExtendedPropertyAsBool(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod CardModificationInfo to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Boolean > Returns the value of the property as a boolean or null if it didn't exist or couldn't be parsed as boolean. GetExtendedPropertyAsFloat(CardModificationInfo, String) Gets a custom property as a float (can be null). Declaration public static float? GetExtendedPropertyAsFloat(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod CardModificationInfo to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Single > Returns the value of the property as a float or null if it didn't exist or couldn't be parsed as float. GetExtendedPropertyAsInt(CardModificationInfo, String) Gets a custom property as an int (can be null). Declaration public static int? GetExtendedPropertyAsInt(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod CardModificationInfo to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Int32 > Returns the value of the property as an int or null if it didn't exist or couldn't be parsed as int. HasCustomCost(CardModificationInfo, String) Declaration public static bool HasCustomCost(this CardModificationInfo mod, string costName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String costName Returns Type Description System.Boolean HasCustomCostId(CardModificationInfo, String) Declaration public static bool HasCustomCostId(this CardModificationInfo mod, string costName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String costName Returns Type Description System.Boolean HasCustomCostId(String, String) Declaration public static bool HasCustomCostId(this string singletonId, string costName) Parameters Type Name Description System.String singletonId System.String costName Returns Type Description System.Boolean HasCustomCostsId(CardModificationInfo) Declaration public static bool HasCustomCostsId(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean HasCustomCostsId(String) Declaration public static bool HasCustomCostsId(this string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description System.Boolean HasCustomPropertiesId(CardModificationInfo) Declaration public static bool HasCustomPropertiesId(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean HasCustomPropertiesId(String) Declaration public static bool HasCustomPropertiesId(this string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description System.Boolean HasCustomProperty(CardModificationInfo, String) Declaration public static bool HasCustomProperty(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String propertyName Returns Type Description System.Boolean HasCustomPropertyId(CardModificationInfo, String) Declaration public static bool HasCustomPropertyId(this CardModificationInfo mod, string propertyName) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String propertyName Returns Type Description System.Boolean HasCustomPropertyId(String, String) Declaration public static bool HasCustomPropertyId(this string singletonId, string propertyName) Parameters Type Name Description System.String singletonId System.String propertyName Returns Type Description System.Boolean HasDeathCardInfo(CardModificationInfo) Declaration public static bool HasDeathCardInfo(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean HasRemoveBlueGemCost(CardModificationInfo) Declaration public static bool HasRemoveBlueGemCost(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean HasRemovedAnyGemCost(CardModificationInfo) Declaration public static bool HasRemovedAnyGemCost(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean HasRemovedGemCost(CardModificationInfo, GemType) Declaration public static bool HasRemovedGemCost(this CardModificationInfo mod, GemType gemType) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.GemType gemType Returns Type Description System.Boolean HasRemovedGreenGemCost(CardModificationInfo) Declaration public static bool HasRemovedGreenGemCost(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean HasRemovedOrangeGemCost(CardModificationInfo) Declaration public static bool HasRemovedOrangeGemCost(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean IdWithoutCosts(CardModificationInfo) Declaration public static string IdWithoutCosts(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.String IdWithoutCosts(String) Declaration public static string IdWithoutCosts(this string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description System.String IdWithoutProperties(CardModificationInfo) Declaration public static string IdWithoutProperties(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.String IdWithoutProperties(String) Declaration public static string IdWithoutProperties(this string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description System.String IsTemporaryDecal(CardModificationInfo) Declaration public static bool IsTemporaryDecal(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.Boolean RemoveBlueGemCost(CardModificationInfo, Boolean) Declaration public static CardModificationInfo RemoveBlueGemCost(this CardModificationInfo mod, bool remove) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Boolean remove Returns Type Description DiskCardGame.CardModificationInfo RemovedGemsCosts(CardModificationInfo) Declaration public static List<GemType> RemovedGemsCosts(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description List < DiskCardGame.GemType > RemoveGemsCost(CardModificationInfo, GemType[]) Declaration public static CardModificationInfo RemoveGemsCost(this CardModificationInfo mod, params GemType[] gemTypes) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.GemType [] gemTypes Returns Type Description DiskCardGame.CardModificationInfo RemoveGreenGemCost(CardModificationInfo, Boolean) Declaration public static CardModificationInfo RemoveGreenGemCost(this CardModificationInfo mod, bool remove) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Boolean remove Returns Type Description DiskCardGame.CardModificationInfo RemoveOrangeGemCost(CardModificationInfo, Boolean) Declaration public static CardModificationInfo RemoveOrangeGemCost(this CardModificationInfo mod, bool remove) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Boolean remove Returns Type Description DiskCardGame.CardModificationInfo SetAttackAndHealth(CardModificationInfo, Int32, Int32) Declaration public static CardModificationInfo SetAttackAndHealth(this CardModificationInfo mod, int attack = 0, int health = 0) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Int32 attack System.Int32 health Returns Type Description DiskCardGame.CardModificationInfo SetBloodCost(CardModificationInfo, Int32) Declaration public static CardModificationInfo SetBloodCost(this CardModificationInfo mod, int cost = 0) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Int32 cost Returns Type Description DiskCardGame.CardModificationInfo SetBonesCost(CardModificationInfo, Int32) Declaration public static CardModificationInfo SetBonesCost(this CardModificationInfo mod, int cost = 0) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Int32 cost Returns Type Description DiskCardGame.CardModificationInfo SetCosts(CardModificationInfo, Int32, Int32, Int32, List<GemType>) Declaration public static CardModificationInfo SetCosts(this CardModificationInfo mod, int blood = 0, int bones = 0, int energy = 0, List<GemType> gems = null) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Int32 blood System.Int32 bones System.Int32 energy List < DiskCardGame.GemType > gems Returns Type Description DiskCardGame.CardModificationInfo SetCustomCostId(CardModificationInfo, String, Object) Declaration public static CardModificationInfo SetCustomCostId(this CardModificationInfo mod, string costName, object value) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String costName System.Object value Returns Type Description DiskCardGame.CardModificationInfo SetDeathCardPortrait(CardModificationInfo, CompositeFigurine.FigurineType, Int32, Int32, Boolean) Declaration public static CardModificationInfo SetDeathCardPortrait(this CardModificationInfo mod, CompositeFigurine.FigurineType headType = CompositeFigurine.FigurineType.SettlerMan, int mouthIndex = 0, int eyesIndex = 0, bool lostEye = false) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.CompositeFigurine.FigurineType headType System.Int32 mouthIndex System.Int32 eyesIndex System.Boolean lostEye Returns Type Description DiskCardGame.CardModificationInfo SetEnergyCost(CardModificationInfo, Int32) Declaration public static CardModificationInfo SetEnergyCost(this CardModificationInfo mod, int cost = 0) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Int32 cost Returns Type Description DiskCardGame.CardModificationInfo SetExtendedProperty(CardModificationInfo, String, Object, Boolean) Adds a custom property value to the CardModificationInfo. Declaration public static CardModificationInfo SetExtendedProperty(this CardModificationInfo mod, string propertyName, object value, bool addToSingletonId = false) Parameters Type Name Description DiskCardGame.CardModificationInfo mod CardModificationInfo to access. System.String propertyName The name of the property to set. System.Object value The value of the property. System.Boolean addToSingletonId Appends a string containing the custom property name and value to the mod's singletonId in the forme of \"[ExtProperty:{propertyName},{value}:ExtProperty]\". Returns Type Description DiskCardGame.CardModificationInfo The same CardModificationInfo so a chain can continue. SetGemsCost(CardModificationInfo, GemType[]) Declaration public static CardModificationInfo SetGemsCost(this CardModificationInfo mod, params GemType[] cost) Parameters Type Name Description DiskCardGame.CardModificationInfo mod DiskCardGame.GemType [] cost Returns Type Description DiskCardGame.CardModificationInfo SetGemsCost(CardModificationInfo, List<GemType>) Declaration public static CardModificationInfo SetGemsCost(this CardModificationInfo mod, List<GemType> cost = null) Parameters Type Name Description DiskCardGame.CardModificationInfo mod List < DiskCardGame.GemType > cost Returns Type Description DiskCardGame.CardModificationInfo SetNameReplacement(CardModificationInfo, String) Declaration public static CardModificationInfo SetNameReplacement(this CardModificationInfo mod, string name = null) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String name Returns Type Description DiskCardGame.CardModificationInfo SetPropertiesId(CardModificationInfo, String, Object) Declaration public static CardModificationInfo SetPropertiesId(this CardModificationInfo mod, string propertyName, object value) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String propertyName System.Object value Returns Type Description DiskCardGame.CardModificationInfo SetSingletonId(CardModificationInfo, String) Declaration public static CardModificationInfo SetSingletonId(this CardModificationInfo mod, string id = null) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.String id Returns Type Description DiskCardGame.CardModificationInfo SetTemporaryDecal(CardModificationInfo) Used by the API to remove temporary decal mods, since it's not done automatically. Declaration public static void SetTemporaryDecal(this CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod"
  },
  "api/InscryptionAPI.Card.CardModificationInfoManager.html": {
    "href": "api/InscryptionAPI.Card.CardModificationInfoManager.html",
    "title": "Class CardModificationInfoManager | InscryptionAPI",
    "keywords": "Class CardModificationInfoManager Inheritance System.Object CardModificationInfoManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class CardModificationInfoManager Methods GetCustomCostsFromId(String) Declaration public static List<string> GetCustomCostsFromId(string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description List < System.String > GetCustomCostsIdString(CardModificationInfo) Declaration public static string GetCustomCostsIdString(CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.String GetCustomCostsIdString(String) Declaration public static string GetCustomCostsIdString(string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description System.String GetCustomPropertiesFromId(String) Declaration public static List<string> GetCustomPropertiesFromId(string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description List < System.String > GetCustomPropertiesIdString(CardModificationInfo) Declaration public static string GetCustomPropertiesIdString(CardModificationInfo mod) Parameters Type Name Description DiskCardGame.CardModificationInfo mod Returns Type Description System.String GetCustomPropertiesIdString(String) Declaration public static string GetCustomPropertiesIdString(string singletonId) Parameters Type Name Description System.String singletonId Returns Type Description System.String GetExtendedClass<T>(CardModificationInfo) Get a custom extension class that will exist on all clones of a card Declaration public static T GetExtendedClass<T>(this CardModificationInfo card) where T : class, new() Parameters Type Name Description DiskCardGame.CardModificationInfo card Card to access. Returns Type Description T The instance of T for this card. Type Parameters Name Description T The custom class GetIdKeyPair(String, String) Retrieves the property name and associated value from the provided 'properties' string. Declaration public static string GetIdKeyPair(string properties, string key) Parameters Type Name Description System.String properties A string representing all properties. System.String key The property name to search for. Returns Type Description System.String A string containing the key and the value separated by a comma like so: 'key,value' SyncCardMods() Declaration public static void SyncCardMods()"
  },
  "api/InscryptionAPI.Card.CostProperties.CostProperties.html": {
    "href": "api/InscryptionAPI.Card.CostProperties.CostProperties.html",
    "title": "Class CostProperties | InscryptionAPI",
    "keywords": "Class CostProperties Inheritance System.Object CostProperties Namespace : InscryptionAPI.Card.CostProperties Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class CostProperties Fields CardInfoToCard Declaration public static ConditionalWeakTable<CardInfo, List<WeakReference<PlayableCard>>> CardInfoToCard Field Value Type Description System.Runtime.CompilerServices.ConditionalWeakTable < DiskCardGame.CardInfo , List < WeakReference < DiskCardGame.PlayableCard >>> Methods ImprovedGemsCost(CardInfo) Declaration public static List<GemType> ImprovedGemsCost(CardInfo instance) Parameters Type Name Description DiskCardGame.CardInfo instance Returns Type Description List < DiskCardGame.GemType > OriginalBloodCost(CardInfo) ChangeCardCostGetter patches BloodCost so we can change the cost on the fly This reverse patch gives us access to the original method without any changes. This method has a copy of all the code that CardInfo.BloodCost had so it doesn't result in a StackOverflow and freezing the game when called. Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(CardInfo), \"BloodCost\", MethodType.Getter)] public static int OriginalBloodCost(CardInfo __instance) Parameters Type Name Description DiskCardGame.CardInfo __instance Returns Type Description System.Int32 OriginalBonesCost(CardInfo) ChangeCardCostGetter patches BoneCost so we can change the cost on the fly This reverse patch gives us access to the original method without any changes. This method has a copy of all the code that CardInfo.BoneCost had so it doesn't result in a StackOverflow and freezing the game when called. Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(CardInfo), \"BonesCost\", MethodType.Getter)] public static int OriginalBonesCost(CardInfo __instance) Parameters Type Name Description DiskCardGame.CardInfo __instance Returns Type Description System.Int32 OriginalEnergyCost(CardInfo) ChangeCardCostGetter patches EnergyCost so we can change the cost on the fly This reverse patch gives us access to the original method without any changes. This method has a copy of all the code that CardInfo.EnergyCost had so it doesn't result in a StackOverflow and freezing the game when called. Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(CardInfo), \"EnergyCost\", MethodType.Getter)] public static int OriginalEnergyCost(CardInfo __instance) Parameters Type Name Description DiskCardGame.CardInfo __instance Returns Type Description System.Int32 OriginalGemsCost(CardInfo) ChangeCardCostGetter patches GemsCost so we can change the cost on the fly This reverse patch gives us access to the original method without any changes. This method has a copy of all the code that CardInfo.GemsCost had so it doesn't result in a StackOverflow and freezing the game when called. Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(CardInfo), \"GemsCost\", MethodType.Getter)] public static List<GemType> OriginalGemsCost(CardInfo __instance) Parameters Type Name Description DiskCardGame.CardInfo __instance Returns Type Description List < DiskCardGame.GemType >"
  },
  "api/InscryptionAPI.Card.CostProperties.CostProperties.RefreshCostMonoBehaviour.html": {
    "href": "api/InscryptionAPI.Card.CostProperties.CostProperties.RefreshCostMonoBehaviour.html",
    "title": "Class CostProperties.RefreshCostMonoBehaviour | InscryptionAPI",
    "keywords": "Class CostProperties.RefreshCostMonoBehaviour Inheritance System.Object Object Component Behaviour MonoBehaviour CostProperties.RefreshCostMonoBehaviour Namespace : InscryptionAPI.Card.CostProperties Assembly : InscryptionAPI.dll Syntax public class RefreshCostMonoBehaviour : MonoBehaviour Fields playableCard Declaration public PlayableCard playableCard Field Value Type Description DiskCardGame.PlayableCard Methods GemsChanged<T>(List<T>, List<T>) Declaration public bool GemsChanged<T>(List<T> a, List<T> b) Parameters Type Name Description List <T> a List <T> b Returns Type Description System.Boolean Type Parameters Name Description T Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.CostProperties.html": {
    "href": "api/InscryptionAPI.Card.CostProperties.html",
    "title": "Namespace InscryptionAPI.Card.CostProperties | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Card.CostProperties Classes CostProperties CostProperties.RefreshCostMonoBehaviour"
  },
  "api/InscryptionAPI.Card.DamageShieldBehaviour.html": {
    "href": "api/InscryptionAPI.Card.DamageShieldBehaviour.html",
    "title": "Class DamageShieldBehaviour | InscryptionAPI",
    "keywords": "Class DamageShieldBehaviour A custom class implementing shield-giving behaviour. With the most recent API versions, shield-giving sigils like DeathShield/Nano Armour/ Armoured can now stack and instead use a counter rather than a simple boolean. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.AbilityBehaviour DamageShieldBehaviour ActivatedDamageShieldBehaviour APIDeathShield Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public abstract class DamageShieldBehaviour : AbilityBehaviour Fields numShields Declaration public int numShields Field Value Type Description System.Int32 Properties NumShields Declaration public int NumShields { get; } Property Value Type Description System.Int32 StartingNumShields Declaration public abstract int StartingNumShields { get; } Property Value Type Description System.Int32 Methods AddShields(Int32, Boolean) Declaration public virtual void AddShields(int amount, bool updateDisplay = true) Parameters Type Name Description System.Int32 amount System.Boolean updateDisplay HasShields() Declaration public bool HasShields() Returns Type Description System.Boolean RemoveShields(Int32, Boolean) Declaration public virtual void RemoveShields(int amount, bool updateDisplay = true) Parameters Type Name Description System.Int32 amount System.Boolean updateDisplay ResetShields(Boolean) Declaration public virtual void ResetShields(bool updateDisplay) Parameters Type Name Description System.Boolean updateDisplay Start() Declaration public virtual void Start() Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.DeathCardManager.html": {
    "href": "api/InscryptionAPI.Card.DeathCardManager.html",
    "title": "Class DeathCardManager | InscryptionAPI",
    "keywords": "Class DeathCardManager Inheritance System.Object DeathCardManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class DeathCardManager Fields CardPrefix Declaration public const string CardPrefix = \"apiDeathCard\" Field Value Type Description System.String Properties APIDeathCards Declaration public static List<CardInfo> APIDeathCards { get; } Property Value Type Description List < DiskCardGame.CardInfo > Methods AddDefaultDeathCard(CardModificationInfo, Boolean) Declaration public static void AddDefaultDeathCard(CardModificationInfo deathCardMod, bool addToAscension = false) Parameters Type Name Description DiskCardGame.CardModificationInfo deathCardMod System.Boolean addToAscension GetAPIDeathCardName(CardModificationInfo, Boolean) Declaration public static string GetAPIDeathCardName(CardModificationInfo mod, bool createNewCard = false) Parameters Type Name Description DiskCardGame.CardModificationInfo mod System.Boolean createNewCard Returns Type Description System.String"
  },
  "api/InscryptionAPI.Card.ExtendedAbilityBehaviour.html": {
    "href": "api/InscryptionAPI.Card.ExtendedAbilityBehaviour.html",
    "title": "Class ExtendedAbilityBehaviour | InscryptionAPI",
    "keywords": "Class ExtendedAbilityBehaviour Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.AbilityBehaviour ExtendedAbilityBehaviour Implements IGetOpposingSlots IActivateWhenFacedown IPassiveAttackBuff IPassiveHealthBuff Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public abstract class ExtendedAbilityBehaviour : AbilityBehaviour, IGetOpposingSlots, IActivateWhenFacedown, IPassiveAttackBuff, IPassiveHealthBuff Properties ProvidesPassiveAttackBuff Declaration public virtual bool ProvidesPassiveAttackBuff { get; } Property Value Type Description System.Boolean ProvidesPassiveHealthBuff Declaration public virtual bool ProvidesPassiveHealthBuff { get; } Property Value Type Description System.Boolean TriggerWhenFacedown Declaration public virtual bool TriggerWhenFacedown { get; } Property Value Type Description System.Boolean Methods GetOpposingSlots(List<CardSlot>, List<CardSlot>) Declaration public virtual List<CardSlot> GetOpposingSlots(List<CardSlot> originalSlots, List<CardSlot> otherAddedSlots) Parameters Type Name Description List < DiskCardGame.CardSlot > originalSlots List < DiskCardGame.CardSlot > otherAddedSlots Returns Type Description List < DiskCardGame.CardSlot > GetPassiveAttackBuff(PlayableCard) Declaration public virtual int GetPassiveAttackBuff(PlayableCard target) Parameters Type Name Description DiskCardGame.PlayableCard target Returns Type Description System.Int32 GetPassiveAttackBuffs() Declaration public virtual int[] GetPassiveAttackBuffs() Returns Type Description System.Int32 [] GetPassiveHealthBuff(PlayableCard) Declaration public virtual int GetPassiveHealthBuff(PlayableCard target) Parameters Type Name Description DiskCardGame.PlayableCard target Returns Type Description System.Int32 GetPassiveHealthBuffs() Declaration public virtual int[] GetPassiveHealthBuffs() Returns Type Description System.Int32 [] RemoveDefaultAttackSlot() Declaration public virtual bool RemoveDefaultAttackSlot() Returns Type Description System.Boolean RespondsToGetOpposingSlots() Declaration public virtual bool RespondsToGetOpposingSlots() Returns Type Description System.Boolean ShouldTriggerCustomWhenFaceDown(Type) Declaration public virtual bool ShouldTriggerCustomWhenFaceDown(Type customTrigger) Parameters Type Name Description Type customTrigger Returns Type Description System.Boolean ShouldTriggerWhenFaceDown(Trigger, Object[]) Declaration public virtual bool ShouldTriggerWhenFaceDown(Trigger trigger, object[] otherArgs) Parameters Type Name Description DiskCardGame.Trigger trigger System.Object [] otherArgs Returns Type Description System.Boolean Implements IGetOpposingSlots IActivateWhenFacedown IPassiveAttackBuff IPassiveHealthBuff Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.ExtendedActivatedAbilityBehaviour.html": {
    "href": "api/InscryptionAPI.Card.ExtendedActivatedAbilityBehaviour.html",
    "title": "Class ExtendedActivatedAbilityBehaviour | InscryptionAPI",
    "keywords": "Class ExtendedActivatedAbilityBehaviour Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.AbilityBehaviour ExtendedActivatedAbilityBehaviour Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public abstract class ExtendedActivatedAbilityBehaviour : AbilityBehaviour Fields bloodCostMod Declaration public int bloodCostMod Field Value Type Description System.Int32 bonesCostMod Declaration public int bonesCostMod Field Value Type Description System.Int32 currentSacrificedCardInfos Declaration public Dictionary<CardInfo, CardSlot> currentSacrificedCardInfos Field Value Type Description Dictionary < DiskCardGame.CardInfo , DiskCardGame.CardSlot > energyCostMod Declaration public int energyCostMod Field Value Type Description System.Int32 healthCostMod Declaration public int healthCostMod Field Value Type Description System.Int32 Properties BloodCost Declaration public int BloodCost { get; } Property Value Type Description System.Int32 BonesCost Declaration public int BonesCost { get; } Property Value Type Description System.Int32 EnergyCost Declaration public int EnergyCost { get; } Property Value Type Description System.Int32 HealthCost Declaration public int HealthCost { get; } Property Value Type Description System.Int32 OnActivateBloodCostMod Declaration public virtual int OnActivateBloodCostMod { get; set; } Property Value Type Description System.Int32 OnActivateBonesCostMod Declaration public virtual int OnActivateBonesCostMod { get; set; } Property Value Type Description System.Int32 OnActivateEnergyCostMod Declaration public virtual int OnActivateEnergyCostMod { get; set; } Property Value Type Description System.Int32 OnActivateHealthCostMod Declaration public virtual int OnActivateHealthCostMod { get; set; } Property Value Type Description System.Int32 StartingBloodCost Declaration public virtual int StartingBloodCost { get; } Property Value Type Description System.Int32 StartingBonesCost Declaration public virtual int StartingBonesCost { get; } Property Value Type Description System.Int32 StartingEnergyCost Declaration public virtual int StartingEnergyCost { get; } Property Value Type Description System.Int32 StartingHealthCost Declaration public virtual int StartingHealthCost { get; } Property Value Type Description System.Int32 Methods Activate() Declaration public abstract IEnumerator Activate() Returns Type Description System.Collections.IEnumerator CanActivate() Declaration public virtual bool CanActivate() Returns Type Description System.Boolean OnActivatedAbility() Declaration public sealed override IEnumerator OnActivatedAbility() Returns Type Description System.Collections.IEnumerator Overrides DiskCardGame.TriggerReceiver.OnActivatedAbility() OnPostResolveOnBoard() Declaration public virtual IEnumerator OnPostResolveOnBoard() Returns Type Description System.Collections.IEnumerator OnResolveOnBoard() Declaration public sealed override IEnumerator OnResolveOnBoard() Returns Type Description System.Collections.IEnumerator Overrides DiskCardGame.TriggerReceiver.OnResolveOnBoard() PostActivate() Declaration public virtual IEnumerator PostActivate() Returns Type Description System.Collections.IEnumerator RespondsToActivatedAbility(Ability) Declaration public sealed override bool RespondsToActivatedAbility(Ability ability) Parameters Type Name Description DiskCardGame.Ability ability Returns Type Description System.Boolean Overrides DiskCardGame.TriggerReceiver.RespondsToActivatedAbility(DiskCardGame.Ability) RespondsToPostResolveOnBoard() Declaration public virtual bool RespondsToPostResolveOnBoard() Returns Type Description System.Boolean RespondsToResolveOnBoard() Declaration public sealed override bool RespondsToResolveOnBoard() Returns Type Description System.Boolean Overrides DiskCardGame.TriggerReceiver.RespondsToResolveOnBoard() Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.html": {
    "href": "api/InscryptionAPI.Card.html",
    "title": "Namespace InscryptionAPI.Card | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Card This namespace is dedicated to everything card-related, including abilities, appearance behaviours, and more. Classes AbilityExtensions Helper extension methods for abilities AbilityManager This manager class handles the creation and management of mod-added abilities (sigils). AbilityManager.FullAbility A utility class that holds all of the required information about an ability in order to be able to use it in-game. ActivatedDamageShieldBehaviour A custom class combining DamageShieldBehaviour and ExtendedActivatedBehaviour . APIDeathShield A custom AbilityBehaviour that's attached to the DeathShield ability so it functions with the API's shield logic changes. CardAppearanceBehaviourManager CardAppearanceBehaviourManager.FullCardAppearanceBehaviour CardExtensions CardManager CardManager.CardAltPortraits CardModificationInfoExtensions CardModificationInfoManager DamageShieldBehaviour A custom class implementing shield-giving behaviour. With the most recent API versions, shield-giving sigils like DeathShield/Nano Armour/ Armoured can now stack and instead use a counter rather than a simple boolean. DeathCardManager ExtendedAbilityBehaviour ExtendedActivatedAbilityBehaviour OpponentGemsManager ShieldManager This manager class handles the logic for shields. SpecialTriggeredAbilityManager SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility StatIconManager StatIconManager.FullStatIcon TribeManager This class handles the addition of new tribes into the game TribeManager.TribeInfo The internal object used to store all relevant info about a Tribe. guid - The mod GUID that added the Tribe. name - The internal name of the Tribe. tribe - The enum value corresponding to this Tribe. icon - The sprite displayed on cards with this Tribe. tribeChoice - Whether or not this Tribe can appear at card tribe choice nodes. cardBack - The texture displayed at card tribe choice nodes. If null, the API will create one using the icon Sprite. Interfaces IActivateWhenFacedown"
  },
  "api/InscryptionAPI.Card.IActivateWhenFacedown.html": {
    "href": "api/InscryptionAPI.Card.IActivateWhenFacedown.html",
    "title": "Interface IActivateWhenFacedown | InscryptionAPI",
    "keywords": "Interface IActivateWhenFacedown Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public interface IActivateWhenFacedown Methods ShouldTriggerCustomWhenFaceDown(Type) Declaration bool ShouldTriggerCustomWhenFaceDown(Type customTrigger) Parameters Type Name Description Type customTrigger Returns Type Description System.Boolean ShouldTriggerWhenFaceDown(Trigger, Object[]) Declaration bool ShouldTriggerWhenFaceDown(Trigger trigger, object[] otherArgs) Parameters Type Name Description DiskCardGame.Trigger trigger System.Object [] otherArgs Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.OpponentGemsManager.html": {
    "href": "api/InscryptionAPI.Card.OpponentGemsManager.html",
    "title": "Class OpponentGemsManager | InscryptionAPI",
    "keywords": "Class OpponentGemsManager Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour Singleton < OpponentGemsManager > OpponentGemsManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class OpponentGemsManager : Singleton<OpponentGemsManager> Fields opponentGems Declaration public List<GemType> opponentGems Field Value Type Description List < DiskCardGame.GemType > Methods AddGem(GemType) Declaration public void AddGem(GemType gem) Parameters Type Name Description DiskCardGame.GemType gem AddGems(GemType[]) Declaration public void AddGems(params GemType[] gems) Parameters Type Name Description DiskCardGame.GemType [] gems ForceGemsUpdate() Declaration public void ForceGemsUpdate() GemsOfType(GemType) Declaration public int GemsOfType(GemType gem) Parameters Type Name Description DiskCardGame.GemType gem Returns Type Description System.Int32 HasGem(GemType) Declaration public bool HasGem(GemType gem) Parameters Type Name Description DiskCardGame.GemType gem Returns Type Description System.Boolean LoseGem(GemType) Declaration public void LoseGem(GemType gem) Parameters Type Name Description DiskCardGame.GemType gem LoseGems(GemType[]) Declaration public void LoseGems(params GemType[] gems) Parameters Type Name Description DiskCardGame.GemType [] gems Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.ShieldManager.html": {
    "href": "api/InscryptionAPI.Card.ShieldManager.html",
    "title": "Class ShieldManager | InscryptionAPI",
    "keywords": "Class ShieldManager This manager class handles the logic for shields. Inheritance System.Object ShieldManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class ShieldManager Properties AllShieldAbilities A list of FullAbilities whose AbilityBehaviour overrides DamageShieldBehaviour. Declaration public static List<AbilityManager.FullAbility> AllShieldAbilities { get; } Property Value Type Description List < AbilityManager.FullAbility > AllShieldInfos Declaration public static List<AbilityInfo> AllShieldInfos { get; } Property Value Type Description List < DiskCardGame.AbilityInfo > Methods BreakShield(PlayableCard, Int32, PlayableCard) The method used for when a shielded card is damaged. Includes extra parameters for modders looking to modify this further. This method is only called when damage > 0 and the target has a shield. Declaration public static void BreakShield(PlayableCard target, int damage, PlayableCard attacker) Parameters Type Name Description DiskCardGame.PlayableCard target System.Int32 damage DiskCardGame.PlayableCard attacker NewHasShield(PlayableCard) The new version of PlayableCard.HasShield implementing the new shield logic. Declaration public static bool NewHasShield(PlayableCard instance) Parameters Type Name Description DiskCardGame.PlayableCard instance Returns Type Description System.Boolean"
  },
  "api/InscryptionAPI.Card.SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility.html": {
    "href": "api/InscryptionAPI.Card.SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility.html",
    "title": "Class SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility | InscryptionAPI",
    "keywords": "Class SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility Inheritance System.Object SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class FullSpecialTriggeredAbility Constructors FullSpecialTriggeredAbility(SpecialTriggeredAbility, Type) Declaration public FullSpecialTriggeredAbility(SpecialTriggeredAbility id, Type abilityBehaviour) Parameters Type Name Description DiskCardGame.SpecialTriggeredAbility id Type abilityBehaviour FullSpecialTriggeredAbility(String, String, SpecialTriggeredAbility, Type) Declaration public FullSpecialTriggeredAbility(string guid, string name, SpecialTriggeredAbility id, Type abilityBehaviour) Parameters Type Name Description System.String guid System.String name DiskCardGame.SpecialTriggeredAbility id Type abilityBehaviour Fields AbilityBehaviour Declaration public readonly Type AbilityBehaviour Field Value Type Description Type AbilityName Declaration public readonly string AbilityName Field Value Type Description System.String Id Declaration public readonly SpecialTriggeredAbility Id Field Value Type Description DiskCardGame.SpecialTriggeredAbility ModGUID Declaration public readonly string ModGUID Field Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.SpecialTriggeredAbilityManager.html": {
    "href": "api/InscryptionAPI.Card.SpecialTriggeredAbilityManager.html",
    "title": "Class SpecialTriggeredAbilityManager | InscryptionAPI",
    "keywords": "Class SpecialTriggeredAbilityManager Inheritance System.Object SpecialTriggeredAbilityManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public static class SpecialTriggeredAbilityManager Fields BaseGameSpecialTriggers Declaration public static readonly ReadOnlyCollection<SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility> BaseGameSpecialTriggers Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility > Properties AllSpecialTriggers Declaration public static List<SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility> AllSpecialTriggers { get; } Property Value Type Description List < SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility > Methods Add(String, String, Type) Declaration public static SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility Add(string guid, string abilityName, Type behavior) Parameters Type Name Description System.String guid System.String abilityName Type behavior Returns Type Description SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility Remove(SpecialTriggeredAbility) Declaration public static void Remove(SpecialTriggeredAbility id) Parameters Type Name Description DiskCardGame.SpecialTriggeredAbility id Remove(SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility) Declaration public static void Remove(SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility ability) Parameters Type Name Description SpecialTriggeredAbilityManager.FullSpecialTriggeredAbility ability"
  },
  "api/InscryptionAPI.Card.StatIconManager.FullStatIcon.html": {
    "href": "api/InscryptionAPI.Card.StatIconManager.FullStatIcon.html",
    "title": "Class StatIconManager.FullStatIcon | InscryptionAPI",
    "keywords": "Class StatIconManager.FullStatIcon Inheritance System.Object StatIconManager.FullStatIcon Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class FullStatIcon Constructors FullStatIcon(SpecialStatIcon, SpecialTriggeredAbility, StatIconInfo, Type) Declaration public FullStatIcon(SpecialStatIcon id, SpecialTriggeredAbility abilityId, StatIconInfo info, Type variableStatBehavior) Parameters Type Name Description DiskCardGame.SpecialStatIcon id DiskCardGame.SpecialTriggeredAbility abilityId DiskCardGame.StatIconInfo info Type variableStatBehavior Fields AbilityId Declaration public readonly SpecialTriggeredAbility AbilityId Field Value Type Description DiskCardGame.SpecialTriggeredAbility Id Declaration public readonly SpecialStatIcon Id Field Value Type Description DiskCardGame.SpecialStatIcon Info Declaration public readonly StatIconInfo Info Field Value Type Description DiskCardGame.StatIconInfo VariableStatBehavior Declaration public readonly Type VariableStatBehavior Field Value Type Description Type Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Card.StatIconManager.html": {
    "href": "api/InscryptionAPI.Card.StatIconManager.html",
    "title": "Class StatIconManager | InscryptionAPI",
    "keywords": "Class StatIconManager Inheritance System.Object StatIconManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class StatIconManager Fields BaseGameStatIcons Declaration public static readonly ReadOnlyCollection<StatIconManager.FullStatIcon> BaseGameStatIcons Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < StatIconManager.FullStatIcon > Properties AllStatIconInfos Declaration public static List<StatIconInfo> AllStatIconInfos { get; } Property Value Type Description List < DiskCardGame.StatIconInfo > AllStatIcons Declaration public static List<StatIconManager.FullStatIcon> AllStatIcons { get; } Property Value Type Description List < StatIconManager.FullStatIcon > Methods Add(String, StatIconInfo, Type) Declaration public static StatIconManager.FullStatIcon Add(string guid, StatIconInfo info, Type behavior) Parameters Type Name Description System.String guid DiskCardGame.StatIconInfo info Type behavior Returns Type Description StatIconManager.FullStatIcon New(String, String, String, Type) Declaration public static StatIconInfo New(string guid, string rulebookName, string rulebookDescription, Type behavior) Parameters Type Name Description System.String guid System.String rulebookName System.String rulebookDescription Type behavior Returns Type Description DiskCardGame.StatIconInfo Remove(SpecialStatIcon) Declaration public static void Remove(SpecialStatIcon id) Parameters Type Name Description DiskCardGame.SpecialStatIcon id Remove(StatIconManager.FullStatIcon) Declaration public static void Remove(StatIconManager.FullStatIcon ability) Parameters Type Name Description StatIconManager.FullStatIcon ability"
  },
  "api/InscryptionAPI.Card.TribeManager.html": {
    "href": "api/InscryptionAPI.Card.TribeManager.html",
    "title": "Class TribeManager | InscryptionAPI",
    "keywords": "Class TribeManager This class handles the addition of new tribes into the game Inheritance System.Object TribeManager Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class TribeManager Remarks This manager can currently handle watermarking cards with tribes and having them appear at tribal choice nodes. Totems are not currently supported. Fields NewTribes Declaration public static readonly ReadOnlyCollection<TribeManager.TribeInfo> NewTribes Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < TribeManager.TribeInfo > NewTribesTypes Declaration public static readonly ReadOnlyCollection<Tribe> NewTribesTypes Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < DiskCardGame.Tribe > Methods Add(String, String, String, Boolean, String) Adds a new tribe to the game Declaration public static Tribe Add(string guid, string name, string pathToTribeIcon = null, bool appearInTribeChoices = false, string pathToChoiceCardBackTexture = null) Parameters Type Name Description System.String guid The guid of the mod adding the tribe. System.String name The name of the tribe. System.String pathToTribeIcon Path to the tribal icon that will appear as a watermark on all cards belonging to this tribe. System.Boolean appearInTribeChoices Indicates if the card should appear in tribal choice nodes. System.String pathToChoiceCardBackTexture Returns Type Description DiskCardGame.Tribe The unique identifier for the new tribe. Add(String, String, Texture2D, Boolean, Texture2D) Adds a new tribe to the game. Declaration public static Tribe Add(string guid, string name, Texture2D tribeIcon = null, bool appearInTribeChoices = false, Texture2D choiceCardbackTexture = null) Parameters Type Name Description System.String guid The guid of the mod adding the tribe. System.String name The name of the tribe. Texture2D tribeIcon The tribal icon that will appear as a watermark on all cards belonging to this tribe. System.Boolean appearInTribeChoices Indicates if the card should appear in tribal choice nodes. Texture2D choiceCardbackTexture The card back texture to display if the card appears in tribal choice nodes. If no texture is provided, a placeholder will be generated from the tribal icon. Returns Type Description DiskCardGame.Tribe The unique identifier for the new tribe. GetTribeIcon(Tribe, Boolean) Declaration public static Texture2D GetTribeIcon(Tribe tribe, bool useMissingIconIfNull = true) Parameters Type Name Description DiskCardGame.Tribe tribe System.Boolean useMissingIconIfNull Returns Type Description Texture2D IsCustomTribe(Tribe) Declaration public static bool IsCustomTribe(Tribe tribe) Parameters Type Name Description DiskCardGame.Tribe tribe Returns Type Description System.Boolean"
  },
  "api/InscryptionAPI.Card.TribeManager.TribeInfo.html": {
    "href": "api/InscryptionAPI.Card.TribeManager.TribeInfo.html",
    "title": "Class TribeManager.TribeInfo | InscryptionAPI",
    "keywords": "Class TribeManager.TribeInfo The internal object used to store all relevant info about a Tribe. guid - The mod GUID that added the Tribe. name - The internal name of the Tribe. tribe - The enum value corresponding to this Tribe. icon - The sprite displayed on cards with this Tribe. tribeChoice - Whether or not this Tribe can appear at card tribe choice nodes. cardBack - The texture displayed at card tribe choice nodes. If null, the API will create one using the icon Sprite. Inheritance System.Object TribeManager.TribeInfo Namespace : InscryptionAPI.Card Assembly : InscryptionAPI.dll Syntax public class TribeInfo Fields cardback Declaration public Texture2D cardback Field Value Type Description Texture2D guid Declaration public string guid Field Value Type Description System.String icon Declaration public Sprite icon Field Value Type Description Sprite name Declaration public string name Field Value Type Description System.String tribe Declaration public Tribe tribe Field Value Type Description DiskCardGame.Tribe tribeChoice Declaration public bool tribeChoice Field Value Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.CardCosts.CardCostManager.FullCardCost.html": {
    "href": "api/InscryptionAPI.CardCosts.CardCostManager.FullCardCost.html",
    "title": "Class CardCostManager.FullCardCost | InscryptionAPI",
    "keywords": "Class CardCostManager.FullCardCost Inheritance System.Object CardCostManager.FullCardCost Namespace : InscryptionAPI.CardCosts Assembly : InscryptionAPI.dll Syntax public class FullCardCost Constructors FullCardCost(String, String, Type, Func<Int32, CardInfo, PlayableCard, Texture2D>, Func<Int32, CardInfo, PlayableCard, Texture2D>) Declaration public FullCardCost(string modGUID, string costName, Type costBehaviour, Func<int, CardInfo, PlayableCard, Texture2D> getCostTexture, Func<int, CardInfo, PlayableCard, Texture2D> getPixelCostTexture) Parameters Type Name Description System.String modGUID System.String costName Type costBehaviour Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > getCostTexture Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > getPixelCostTexture FullCardCost(String, String, Type, Func<Int32, CardInfo, PlayableCard, Texture2D>, Func<Int32, CardInfo, PlayableCard, Texture2D>, Func<Int32, Int32>, Func<Int32, CardInfo, List<CardInfo>, Boolean>, Func<Int32, Texture>, Boolean, ResourceType, Int32[]) Declaration public FullCardCost(string modGUID, string costName, Type costBehaviour, Func<int, CardInfo, PlayableCard, Texture2D> getCostTexture, Func<int, CardInfo, PlayableCard, Texture2D> getPixelCostTexture, Func<int, int> getCostTier, Func<int, CardInfo, List<CardInfo>, bool> getCanBePlayedByTurn2WithHand, Func<int, Texture> getRewardBackTexture, bool canBeNegative, ResourceType resourceType, int[] choiceAmounts) Parameters Type Name Description System.String modGUID System.String costName Type costBehaviour Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > getCostTexture Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > getPixelCostTexture Func < System.Int32 , System.Int32 > getCostTier Func < System.Int32 , DiskCardGame.CardInfo , List < DiskCardGame.CardInfo >, System.Boolean > getCanBePlayedByTurn2WithHand Func < System.Int32 , Texture > getRewardBackTexture System.Boolean canBeNegative DiskCardGame.ResourceType resourceType System.Int32 [] choiceAmounts Fields CanBeNegative Whether or not the cost value can be negative. If false, negative values will be set to 0 when retrieved using API methods. Declaration public bool CanBeNegative Field Value Type Description System.Boolean ChoiceAmounts An array of integers representing different resource amounts that can be chosen at the cost choice node in Act 1. For example, at the choice node you can choose between 1 Blood, 2 Blood, and 3 Blood. If this cost is part of a group (ie have the same ResourceType), then this field will be ignored. Declaration public int[] ChoiceAmounts Field Value Type Description System.Int32 [] CostBehaviour The Type corresponding to this cost's CustomCardCost class. Declaration public Type CostBehaviour Field Value Type Description Type CostName The internal name of this cost. MUST be identical to the CostName used in the CustomCardCost class. Declaration public string CostName Field Value Type Description System.String GetCanBePlayedByTurn2WithHand The function used to determine if a card with this cost can be played by turn 2, accounting for other cards in the hand. Used when creating the starting hand. Parameters: int: the card's custom cost value. CardInfo: the card. List<CardInfo>: the list of cards in the player's hand. Returns: A bool representing if this card can be played by the second turn. Declaration public Func<int, CardInfo, List<CardInfo>, bool> GetCanBePlayedByTurn2WithHand Field Value Type Description Func < System.Int32 , DiskCardGame.CardInfo , List < DiskCardGame.CardInfo >, System.Boolean > GetCostTexture Retrieves the correct texture corresponding to CardInfo's cost. Used in the 3D Acts (Act 1, Act 3, etc.). Parameters: int: how much of the custom cost the CardInfo/PlayableCard needs to be played. CardInfo: the base CardInfo of the current card. PlayableCard: the PlayableCard possessing the base CardInfo. Can be null. Returns: The texture representing the custom cost to display on the card. Declaration public Func<int, CardInfo, PlayableCard, Texture2D> GetCostTexture Field Value Type Description Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > GetCostTier The function used to determine this cost's tier when on a card. For example, the cost tier of Bones is calculated as (amount / 3), so a card that costs 3 Bones will have a tier of 1 Parameters: int: the card's custom cost value. Returns: An integer representing the cost tier of this cost. Declaration public Func<int, int> GetCostTier Field Value Type Description Func < System.Int32 , System.Int32 > GetPixelCostTexture Retrieves the correct texture corresponding to CardInfo's cost. Used in Act 2. Parameters: int: how much of the custom cost the CardInfo/PlayableCard needs to be played. CardInfo: the base CardInfo of the current card. PlayableCard: the PlayableCard possessing the base CardInfo. Can be null. Returns: The texture representing the custom cost to display on the card. Declaration public Func<int, CardInfo, PlayableCard, Texture2D> GetPixelCostTexture Field Value Type Description Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > GetRewardBackTexture The texture to use for this cost if it appears in a card cost choice node. Declaration public Func<int, Texture> GetRewardBackTexture Field Value Type Description Func < System.Int32 , Texture > ModGUID A unique identifier corresponding to the mod that added this cost. Declaration public string ModGUID Field Value Type Description System.String ResourceType The ResourceType of this cost. Determines whether or not this cost can appear as a choice at card cost choice nodes. If multiple custom costs share the same ResourceType, they will all be part of the same choice pool. Declaration public ResourceType ResourceType Field Value Type Description DiskCardGame.ResourceType Methods CanBePlayedByTurn2WithHand(Int32, CardInfo, List<CardInfo>) Declaration public bool CanBePlayedByTurn2WithHand(int amount, CardInfo card, List<CardInfo> hand) Parameters Type Name Description System.Int32 amount The cost value of the CardInfo being checked. DiskCardGame.CardInfo card The CardInfo being checked. List < DiskCardGame.CardInfo > hand The list of other cards in the player's hand. Returns Type Description System.Boolean Whether or not the provided card can be played by turn 2. Clone() Declaration public CardCostManager.FullCardCost Clone() Returns Type Description CardCostManager.FullCardCost CostTexture(Int32, CardInfo, PlayableCard) Declaration public Texture2D CostTexture(int amount, CardInfo cardInfo, PlayableCard playableCard) Parameters Type Name Description System.Int32 amount The card's cost value. DiskCardGame.CardInfo cardInfo The card's CardInfo. DiskCardGame.PlayableCard playableCard The PlayableCard associated with the card. Can be null. Returns Type Description Texture2D The texture for this cost based on the amount. Used in Acts 1 and 3. CostTier(Int32) Declaration public int CostTier(int amount) Parameters Type Name Description System.Int32 amount The cost value of the card being checked. Returns Type Description System.Int32 This cost tier based on its amount. PixelCostTexture(Int32, CardInfo, PlayableCard) Declaration public Texture2D PixelCostTexture(int amount, CardInfo cardInfo, PlayableCard playableCard) Parameters Type Name Description System.Int32 amount The cost value of the CardInfo being checked. DiskCardGame.CardInfo cardInfo The CardInfo being checked. DiskCardGame.PlayableCard playableCard The PlayableCard associated with the card. Can be null. Returns Type Description Texture2D The texture for this cost based on the amount. Used in Act 2. RewardBackTexture(Int32) Declaration public Texture RewardBackTexture(int amount) Parameters Type Name Description System.Int32 amount Returns Type Description Texture Extension Methods CardCostManager.SetCostTier(CardCostManager.FullCardCost, Func<Int32, Int32>) CardCostManager.SetChoiceAmounts(CardCostManager.FullCardCost, Int32[]) CardCostManager.SetCanBePlayedByTurn2WithHand(CardCostManager.FullCardCost, Func<Int32, CardInfo, List<CardInfo>, Boolean>) CardCostManager.SetCanBeNegative(CardCostManager.FullCardCost, Boolean) CardCostManager.SetFoundAtChoiceNodes(CardCostManager.FullCardCost, Boolean, Texture) CardCostManager.SetFoundAtChoiceNodes(CardCostManager.FullCardCost, Boolean, Func<Int32, Texture>, Int32[]) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.CardCosts.CardCostManager.html": {
    "href": "api/InscryptionAPI.CardCosts.CardCostManager.html",
    "title": "Class CardCostManager | InscryptionAPI",
    "keywords": "Class CardCostManager Inheritance System.Object CardCostManager Namespace : InscryptionAPI.CardCosts Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class CardCostManager Fields notEnoghSameColourGemsEvent Declaration public static DialogueEvent notEnoghSameColourGemsEvent Field Value Type Description DialogueEvent notEnoughSameColourGemsHint Declaration public static HintsHandler.Hint notEnoughSameColourGemsHint Field Value Type Description DiskCardGame.HintsHandler.Hint Properties AllCustomCosts Declaration public static List<CardCostManager.FullCardCost> AllCustomCosts { get; } Property Value Type Description List < CardCostManager.FullCardCost > Methods CostByBehaviour(IEnumerable<CardCostManager.FullCardCost>, Type) Declaration public static CardCostManager.FullCardCost CostByBehaviour(this IEnumerable<CardCostManager.FullCardCost> customCosts, Type costBehaviour) Parameters Type Name Description System.Collections.IEnumerable < CardCostManager.FullCardCost > customCosts Type costBehaviour Returns Type Description CardCostManager.FullCardCost GetRandomChoosableCustomCostCard(Int32, List<CardCostManager.FullCardCost>) Declaration public static CardInfo GetRandomChoosableCustomCostCard(int randomSeed, List<CardCostManager.FullCardCost> customCosts) Parameters Type Name Description System.Int32 randomSeed List < CardCostManager.FullCardCost > customCosts Returns Type Description DiskCardGame.CardInfo GetRandomChoosableCustomCostCardWithAmounts(Int32, CardCostManager.FullCardCost, Int32[]) Declaration public static CardInfo GetRandomChoosableCustomCostCardWithAmounts(int randomSeed, CardCostManager.FullCardCost customCost, params int[] costAmounts) Parameters Type Name Description System.Int32 randomSeed CardCostManager.FullCardCost customCost System.Int32 [] costAmounts Returns Type Description DiskCardGame.CardInfo GetRandomChoosableEnergyCard(Int32) Declaration public static CardInfo GetRandomChoosableEnergyCard(int randomSeed) Parameters Type Name Description System.Int32 randomSeed Returns Type Description DiskCardGame.CardInfo GetRandomChoosableMoxCard(Int32, GemType) Declaration public static CardInfo GetRandomChoosableMoxCard(int randomSeed, GemType gem) Parameters Type Name Description System.Int32 randomSeed DiskCardGame.GemType gem Returns Type Description DiskCardGame.CardInfo GetRandomMoxIndex(Int32) Declaration public static int GetRandomMoxIndex(int randomSeed) Parameters Type Name Description System.Int32 randomSeed Returns Type Description System.Int32 NewGemsCostRequirementMet(PlayableCard) A new method that overrides the result of PlayableCard.GemsCostRequirement. Override this if you want to modify GemsCostRequirementMet. Declaration public static bool NewGemsCostRequirementMet(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The PlayableCard currently being checked. Returns Type Description System.Boolean Boolean representing if the card's gem cost has been met or not. PlaySelectedCardToSlot(PlayerHand, PlayableCard, CardSlot) Does two things: 1: Caches play costs before playing the card onto the board to prevent incorrect values being used should the card's CardInfo change. 2: Implements support for custom cards' OnPlay logic. Declaration public static IEnumerator PlaySelectedCardToSlot(PlayerHand instance, PlayableCard card, CardSlot lastSelectedSlot) Parameters Type Name Description DiskCardGame.PlayerHand instance The PlayerHand object. DiskCardGame.PlayableCard card The PlayableCard being played to the board. DiskCardGame.CardSlot lastSelectedSlot The last selected slot, equals BoardManage.Instance.LastSelectedSlot by default. Returns Type Description System.Collections.IEnumerator Register(String, String, Type, Func<Int32, CardInfo, PlayableCard, Texture2D>, Func<Int32, CardInfo, PlayableCard, Texture2D>) Declaration public static CardCostManager.FullCardCost Register(string modGUID, string costName, Type costBehaviour, Func<int, CardInfo, PlayableCard, Texture2D> getCostTexture, Func<int, CardInfo, PlayableCard, Texture2D> getPixelCostTexture) Parameters Type Name Description System.String modGUID System.String costName Type costBehaviour Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > getCostTexture Func < System.Int32 , DiskCardGame.CardInfo , DiskCardGame.PlayableCard , Texture2D > getPixelCostTexture Returns Type Description CardCostManager.FullCardCost SetCanBeNegative(CardCostManager.FullCardCost, Boolean) Whether or not GetCustomCost can return negative values. If False, negative values will be returned as 0. Declaration public static CardCostManager.FullCardCost SetCanBeNegative(this CardCostManager.FullCardCost fullCardCost, bool canBeNegative) Parameters Type Name Description CardCostManager.FullCardCost fullCardCost The FullCardCost object to modify. System.Boolean canBeNegative If negative cost values should be accepted. Returns Type Description CardCostManager.FullCardCost The same FullCardCost so a chain can continue. SetCanBePlayedByTurn2WithHand(CardCostManager.FullCardCost, Func<Int32, CardInfo, List<CardInfo>, Boolean>) Sets the function used to determine if a card with this cost can be played by the second turn Declaration public static CardCostManager.FullCardCost SetCanBePlayedByTurn2WithHand(this CardCostManager.FullCardCost fullCardCost, Func<int, CardInfo, List<CardInfo>, bool> getCanBePlayedByTurn2WithHand) Parameters Type Name Description CardCostManager.FullCardCost fullCardCost The FullCardCost object to modify. Func < System.Int32 , DiskCardGame.CardInfo , List < DiskCardGame.CardInfo >, System.Boolean > getCanBePlayedByTurn2WithHand CardInfo - current CardInfo ; List - cards in player's hand. . Returns Type Description CardCostManager.FullCardCost The same FullCardCost so a chain can continue. SetChoiceAmounts(CardCostManager.FullCardCost, Int32[]) Defines what cost amounts for this cost will be offered at the cost choice node. For example, the choice node offers 1 Blood, 2 Blood, and 3 Blood. If this cost is part of a group (ie shares its ResourceType with another custom cost), ChoiceAmounts is ignored. Declaration public static CardCostManager.FullCardCost SetChoiceAmounts(this CardCostManager.FullCardCost fullCardCost, params int[] choiceAmounts) Parameters Type Name Description CardCostManager.FullCardCost fullCardCost The FullCardCost object to modify. System.Int32 [] choiceAmounts An array of integers representing cost amounts to offer at the cost choice node. Returns Type Description CardCostManager.FullCardCost The same FullCardCost so a chain can continue. SetCostTier(CardCostManager.FullCardCost, Func<Int32, Int32>) Sets the function used to determine the cost tier for a custom cost. For example, the cost tier for Bones is equal to (Bones / 3 ), rounded down to the nearest integer. Declaration public static CardCostManager.FullCardCost SetCostTier(this CardCostManager.FullCardCost fullCardCost, Func<int, int> getCostTier) Parameters Type Name Description CardCostManager.FullCardCost fullCardCost The FullCardCost object to modify. Func < System.Int32 , System.Int32 > getCostTier Parameters: int - cost amount. Returns int representing tier value. Returns Type Description CardCostManager.FullCardCost The same FullCardCost so a chain can continue. SetFoundAtChoiceNodes(CardCostManager.FullCardCost, Boolean, Func<Int32, Texture>, Int32[]) Declaration public static CardCostManager.FullCardCost SetFoundAtChoiceNodes(this CardCostManager.FullCardCost fullCardCost, bool isChoice, Func<int, Texture> rewardBackFunc, params int[] choiceAmounts) Parameters Type Name Description CardCostManager.FullCardCost fullCardCost System.Boolean isChoice Func < System.Int32 , Texture > rewardBackFunc System.Int32 [] choiceAmounts Returns Type Description CardCostManager.FullCardCost SetFoundAtChoiceNodes(CardCostManager.FullCardCost, Boolean, Texture) Sets the ResourceType and RewardBackTexture for this cost, allowing it to be selected at cost choice nodes in Act 1. Declaration public static CardCostManager.FullCardCost SetFoundAtChoiceNodes(this CardCostManager.FullCardCost fullCardCost, bool isChoice, Texture rewardBack) Parameters Type Name Description CardCostManager.FullCardCost fullCardCost The FullCardCost object to modify. System.Boolean isChoice Whether this card cost should appear at cost choice nodes. Sets the ResourceType to a unique value if true. Sets the ResourceType to None if false. Texture rewardBack The texture to use at the cost choice node. Returns Type Description CardCostManager.FullCardCost The same FullCardCost so a chain can continue. SyncCustomCostList() Declaration public static void SyncCustomCostList() Events ModifyCustomCostList Declaration public static event Func<List<CardCostManager.FullCardCost>, List<CardCostManager.FullCardCost>> ModifyCustomCostList Event Type Type Description Func < List < CardCostManager.FullCardCost >, List < CardCostManager.FullCardCost >>"
  },
  "api/InscryptionAPI.CardCosts.CustomCardCost.html": {
    "href": "api/InscryptionAPI.CardCosts.CustomCardCost.html",
    "title": "Class CustomCardCost | InscryptionAPI",
    "keywords": "Class CustomCardCost An inheritable class for implementing custom card costs. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour CustomCardCost Namespace : InscryptionAPI.CardCosts Assembly : InscryptionAPI.dll Syntax public abstract class CustomCardCost : ManagedBehaviour Fields playHintAttempts Declaration public int playHintAttempts Field Value Type Description System.Int32 Properties CostName The internal name of the cost. Used to check for the cost's extended property by the API. Declaration public abstract string CostName { get; } Property Value Type Description System.String PlayHintFrequency Declaration public virtual int PlayHintFrequency { get; } Property Value Type Description System.Int32 Methods CostSatisfied(Int32, PlayableCard) Whether the current PlayableCard can be played. Declaration public virtual bool CostSatisfied(int cardCost, PlayableCard playableCard) Parameters Type Name Description System.Int32 cardCost The resource amount needed to play a card with this cost. DiskCardGame.PlayableCard playableCard The PlayableCard currently being checked. Returns Type Description System.Boolean CostStatPointValue(Int32, PlayableCard) Represents how many stat points (SP) each cost value will give. For example, Bones have a 1:1 ratio for cost to stats, eg, 4 Bones will give 4 stat points. DOES NOT ACTUALLY AFFECT ANYTHING ON ITS OWN. You must provide the logic that reads and uses this value. Declaration public virtual int CostStatPointValue(int cardCost, PlayableCard playableCard) Parameters Type Name Description System.Int32 cardCost The resource amount needed to play a card with this cost. DiskCardGame.PlayableCard playableCard The PlayableCard being checked. Returns Type Description System.Int32 How much SP the PlayableCard's cost value gives. CostUnsatisfiedHint(Int32, PlayableCard) The dialogue string that will be played when you cannot play a card with this custom cost. Declaration public virtual string CostUnsatisfiedHint(int cardCost, PlayableCard playableCard) Parameters Type Name Description System.Int32 cardCost The resource amount needed to play a card with this cost. DiskCardGame.PlayableCard playableCard The PlayableCard currently being checked. Returns Type Description System.String OnPlayed(Int32, PlayableCard) What the game should do when a card with this cost is played. Most common use case is implementing the logic for paying for this cost. Declaration public virtual IEnumerator OnPlayed(int cardCost, PlayableCard playableCard) Parameters Type Name Description System.Int32 cardCost The resource amount needed to play a card with this cost. DiskCardGame.PlayableCard playableCard The PlayableCard currently being checked. Returns Type Description System.Collections.IEnumerator Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.CardCosts.html": {
    "href": "api/InscryptionAPI.CardCosts.html",
    "title": "Namespace InscryptionAPI.CardCosts | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.CardCosts Classes CardCostManager CardCostManager.FullCardCost CustomCardCost An inheritable class for implementing custom card costs."
  },
  "api/InscryptionAPI.Dialogue.CustomLine.html": {
    "href": "api/InscryptionAPI.Dialogue.CustomLine.html",
    "title": "Struct CustomLine | InscryptionAPI",
    "keywords": "Struct CustomLine Namespace : InscryptionAPI.Dialogue Assembly : InscryptionAPI.dll Syntax public struct CustomLine Constructors CustomLine() Declaration public CustomLine() Fields emotion Declaration public Emotion emotion Field Value Type Description DiskCardGame.Emotion letterAnimation Declaration public TextDisplayer.LetterAnimation letterAnimation Field Value Type Description DiskCardGame.TextDisplayer.LetterAnimation p03Face Declaration public P03AnimationController.Face p03Face Field Value Type Description DiskCardGame.P03AnimationController.Face speaker Declaration public DialogueEvent.Speaker speaker Field Value Type Description DialogueEvent.Speaker specialInstruction Declaration public string specialInstruction Field Value Type Description System.String storyCondition Declaration public StoryEvent storyCondition Field Value Type Description DiskCardGame.StoryEvent storyConditionMustBeMet Declaration public bool storyConditionMustBeMet Field Value Type Description System.Boolean text Declaration public string text Field Value Type Description System.String Methods ToLine(List<DialogueEvent.Speaker>, DialogueEvent.Speaker) Declaration public DialogueEvent.Line ToLine(List<DialogueEvent.Speaker> speakers, DialogueEvent.Speaker defaultSpeaker = DialogueEvent.Speaker.Single) Parameters Type Name Description List < DialogueEvent.Speaker > speakers DialogueEvent.Speaker defaultSpeaker Returns Type Description DialogueEvent.Line Operators Implicit(String to CustomLine) Declaration public static implicit operator CustomLine(string str) Parameters Type Name Description System.String str Returns Type Description CustomLine Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Dialogue.DialogueManager.Dialogue.html": {
    "href": "api/InscryptionAPI.Dialogue.DialogueManager.Dialogue.html",
    "title": "Class DialogueManager.Dialogue | InscryptionAPI",
    "keywords": "Class DialogueManager.Dialogue Inheritance System.Object DialogueManager.Dialogue Namespace : InscryptionAPI.Dialogue Assembly : InscryptionAPI.dll Syntax public class Dialogue Fields DialogueEvent Declaration public DialogueEvent DialogueEvent Field Value Type Description DialogueEvent PluginGUID Declaration public string PluginGUID Field Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Dialogue.DialogueManager.DialogueColor.html": {
    "href": "api/InscryptionAPI.Dialogue.DialogueManager.DialogueColor.html",
    "title": "Class DialogueManager.DialogueColor | InscryptionAPI",
    "keywords": "Class DialogueManager.DialogueColor Inheritance System.Object DialogueManager.DialogueColor Namespace : InscryptionAPI.Dialogue Assembly : InscryptionAPI.dll Syntax public class DialogueColor Fields Color Declaration public Color Color Field Value Type Description Color ColorCode Declaration public string ColorCode Field Value Type Description System.String PluginGUID Declaration public string PluginGUID Field Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Dialogue.DialogueManager.DialogueDataUtil_ReadDialogueData.html": {
    "href": "api/InscryptionAPI.Dialogue.DialogueManager.DialogueDataUtil_ReadDialogueData.html",
    "title": "Class DialogueManager.DialogueDataUtil_ReadDialogueData | InscryptionAPI",
    "keywords": "Class DialogueManager.DialogueDataUtil_ReadDialogueData Inheritance System.Object DialogueManager.DialogueDataUtil_ReadDialogueData Namespace : InscryptionAPI.Dialogue Assembly : InscryptionAPI.dll Syntax [HarmonyPatch(typeof(DialogueDataUtil), \"ReadDialogueData\", new Type[]{})] public class DialogueDataUtil_ReadDialogueData Methods Postfix() Declaration public static void Postfix() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Dialogue.DialogueManager.DialogueParser_GetColorFromCode.html": {
    "href": "api/InscryptionAPI.Dialogue.DialogueManager.DialogueParser_GetColorFromCode.html",
    "title": "Class DialogueManager.DialogueParser_GetColorFromCode | InscryptionAPI",
    "keywords": "Class DialogueManager.DialogueParser_GetColorFromCode Inheritance System.Object DialogueManager.DialogueParser_GetColorFromCode Namespace : InscryptionAPI.Dialogue Assembly : InscryptionAPI.dll Syntax [HarmonyPatch(typeof(DialogueParser), \"GetColorFromCode\", new Type[]{typeof(string), typeof(Color)})] public class DialogueParser_GetColorFromCode Methods Prefix(DialogueParser, String, Color, ref Color) Declaration public static bool Prefix(DialogueParser __instance, string code, Color defaultColor, ref Color __result) Parameters Type Name Description DialogueParser __instance System.String code Color defaultColor Color __result Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Dialogue.DialogueManager.html": {
    "href": "api/InscryptionAPI.Dialogue.DialogueManager.html",
    "title": "Class DialogueManager | InscryptionAPI",
    "keywords": "Class DialogueManager Inheritance System.Object DialogueManager Namespace : InscryptionAPI.Dialogue Assembly : InscryptionAPI.dll Syntax public static class DialogueManager Fields ColorLookup Declaration public static Dictionary<string, Color> ColorLookup Field Value Type Description Dictionary < System.String , Color > CustomDialogue Declaration public static List<DialogueManager.Dialogue> CustomDialogue Field Value Type Description List < DialogueManager.Dialogue > CustomDialogueColor Declaration public static List<DialogueManager.DialogueColor> CustomDialogueColor Field Value Type Description List < DialogueManager.DialogueColor > Methods Add(String, DialogueEvent) Declaration public static DialogueManager.Dialogue Add(string pluginGUID, DialogueEvent dialogueEvent) Parameters Type Name Description System.String pluginGUID DialogueEvent dialogueEvent Returns Type Description DialogueManager.Dialogue AddColor(String, String, Color) Declaration public static DialogueManager.DialogueColor AddColor(string pluginGUID, string code, Color color) Parameters Type Name Description System.String pluginGUID System.String code Color color Returns Type Description DialogueManager.DialogueColor GenerateEvent(String, String, List<CustomLine>, List<List<CustomLine>>, DialogueEvent.MaxRepeatsBehaviour, DialogueEvent.Speaker) Declaration public static DialogueEvent GenerateEvent(string pluginGUID, string name, List<CustomLine> mainLines, List<List<CustomLine>> repeatLines = null, DialogueEvent.MaxRepeatsBehaviour afterMaxRepeats = DialogueEvent.MaxRepeatsBehaviour.RandomDefinedRepeat, DialogueEvent.Speaker defaultSpeaker = DialogueEvent.Speaker.Single) Parameters Type Name Description System.String pluginGUID System.String name List < CustomLine > mainLines List < List < CustomLine >> repeatLines DialogueEvent.MaxRepeatsBehaviour afterMaxRepeats DialogueEvent.Speaker defaultSpeaker Returns Type Description DialogueEvent GenerateRegionIntroductionEvent(String, RegionData, List<CustomLine>, List<List<CustomLine>>) Declaration public static DialogueEvent GenerateRegionIntroductionEvent(string pluginGUID, RegionData regionData, List<CustomLine> lines, List<List<CustomLine>> repeatLines = null) Parameters Type Name Description System.String pluginGUID DiskCardGame.RegionData regionData List < CustomLine > lines List < List < CustomLine >> repeatLines Returns Type Description DialogueEvent GenerateRegionIntroductionEvent(String, String, List<CustomLine>, List<List<CustomLine>>) Declaration public static DialogueEvent GenerateRegionIntroductionEvent(string pluginGUID, string regionName, List<CustomLine> lines, List<List<CustomLine>> repeatLines = null) Parameters Type Name Description System.String pluginGUID System.String regionName List < CustomLine > lines List < List < CustomLine >> repeatLines Returns Type Description DialogueEvent GenerateTraderPeltsEvent(String, PeltManager.PeltData, List<CustomLine>, List<List<CustomLine>>) Declaration public static DialogueEvent GenerateTraderPeltsEvent(string pluginGUID, PeltManager.PeltData peltData, List<CustomLine> lines, List<List<CustomLine>> repeatLines = null) Parameters Type Name Description System.String pluginGUID PeltManager.PeltData peltData List < CustomLine > lines List < List < CustomLine >> repeatLines Returns Type Description DialogueEvent GenerateTraderPeltsEvent(String, String, List<CustomLine>, List<List<CustomLine>>) Declaration public static DialogueEvent GenerateTraderPeltsEvent(string pluginGUID, string peltTierName, List<CustomLine> lines, List<List<CustomLine>> repeatLines = null) Parameters Type Name Description System.String pluginGUID System.String peltTierName List < CustomLine > lines List < List < CustomLine >> repeatLines Returns Type Description DialogueEvent GetStyleFromAmbition() A method to grab the correct TextBox.Style based off the player's chosen ambition. Declaration public static TextBox.Style GetStyleFromAmbition() Returns Type Description GBC.TextBox.Style The corresponding TextBox.Style. GetStyleFromTemple(CardTemple) A quick method to convert a card's CardTemple into the respective TextBox.Style. Declaration public static TextBox.Style GetStyleFromTemple(CardTemple temple) Parameters Type Name Description CardTemple temple The CardTemple we want to use. Returns Type Description GBC.TextBox.Style The corresponding TextBox.Style. PlayDialogueEventSafe(String, TextDisplayer.MessageAdvanceMode, TextDisplayer.EventIntersectMode, DialogueSpeaker, TextBox.Style, TextBox.ScreenPosition, String[], Action<DialogueEvent.Line>, Boolean) A version of PlayDialogueEvent that can be used in the 3D Acts as well as Act 2. Effectively just adds a check for Act 2 and then runs the correct PlayDialogueEvent method. Declaration public static IEnumerator PlayDialogueEventSafe(string eventId, TextDisplayer.MessageAdvanceMode advanceMode = TextDisplayer.MessageAdvanceMode.Auto, TextDisplayer.EventIntersectMode intersectMode = TextDisplayer.EventIntersectMode.Wait, DialogueSpeaker speaker = null, TextBox.Style style = TextBox.Style.Neutral, TextBox.ScreenPosition screenPosition = TextBox.ScreenPosition.OppositeOfPlayer, string[] variableStrings = null, Action<DialogueEvent.Line> newLineCallback = null, bool adjustAudioVolume = true) Parameters Type Name Description System.String eventId DiskCardGame.TextDisplayer.MessageAdvanceMode advanceMode DiskCardGame.TextDisplayer.EventIntersectMode intersectMode GBC.DialogueSpeaker speaker GBC.TextBox.Style style GBC.TextBox.ScreenPosition screenPosition System.String [] variableStrings Action < DialogueEvent.Line > newLineCallback System.Boolean adjustAudioVolume Returns Type Description System.Collections.IEnumerator"
  },
  "api/InscryptionAPI.Dialogue.html": {
    "href": "api/InscryptionAPI.Dialogue.html",
    "title": "Namespace InscryptionAPI.Dialogue | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Dialogue This namespace is dedicated to managing custom dialogue events, which are used to make Lesh y and other Scrybes talk. Classes DialogueManager DialogueManager.Dialogue DialogueManager.DialogueColor DialogueManager.DialogueDataUtil_ReadDialogueData DialogueManager.DialogueParser_GetColorFromCode Structs CustomLine"
  },
  "api/InscryptionAPI.Encounters.AIManager.FullAI.html": {
    "href": "api/InscryptionAPI.Encounters.AIManager.FullAI.html",
    "title": "Class AIManager.FullAI | InscryptionAPI",
    "keywords": "Class AIManager.FullAI Inheritance System.Object AIManager.FullAI Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class FullAI Constructors FullAI(String, Type) Declaration public FullAI(string id, Type aiType) Parameters Type Name Description System.String id Type aiType Fields AI Declaration public readonly Type AI Field Value Type Description Type Id Declaration public readonly string Id Field Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.AIManager.html": {
    "href": "api/InscryptionAPI.Encounters.AIManager.html",
    "title": "Class AIManager | InscryptionAPI",
    "keywords": "Class AIManager Inheritance System.Object AIManager Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public static class AIManager Fields BaseGameAIs Declaration public static readonly ReadOnlyCollection<AIManager.FullAI> BaseGameAIs Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < AIManager.FullAI > Properties AllAIs Declaration public static List<AIManager.FullAI> AllAIs { get; } Property Value Type Description List < AIManager.FullAI > Methods Add(String, String, Type) Declaration public static AIManager.FullAI Add(string guid, string aiName, Type sequencer) Parameters Type Name Description System.String guid System.String aiName Type sequencer Returns Type Description AIManager.FullAI"
  },
  "api/InscryptionAPI.Encounters.CachedGCBNPCDescriptor.html": {
    "href": "api/InscryptionAPI.Encounters.CachedGCBNPCDescriptor.html",
    "title": "Class CachedGCBNPCDescriptor | InscryptionAPI",
    "keywords": "Class CachedGCBNPCDescriptor Inheritance System.Object CachedGCBNPCDescriptor Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class CachedGCBNPCDescriptor Constructors CachedGCBNPCDescriptor(CardBattleNPC) Declaration public CachedGCBNPCDescriptor(CardBattleNPC npc) Parameters Type Name Description GBC.CardBattleNPC npc Properties BattleBackgroundTheme Declaration public PixelBoardSpriteSetter.BoardTheme BattleBackgroundTheme { get; set; } Property Value Type Description GBC.PixelBoardSpriteSetter.BoardTheme BossTemple Declaration public CardTemple BossTemple { get; set; } Property Value Type Description CardTemple DialogueSpeaker Declaration public DialogueSpeaker DialogueSpeaker { get; set; } Property Value Type Description GBC.DialogueSpeaker ID Declaration public string ID { get; set; } Property Value Type Description System.String IsBoss Declaration public bool IsBoss { get; set; } Property Value Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.CustomNodeData.html": {
    "href": "api/InscryptionAPI.Encounters.CustomNodeData.html",
    "title": "Class CustomNodeData | InscryptionAPI",
    "keywords": "Class CustomNodeData Represents a node on the map that has been placed by the Inscryption API Inheritance System.Object DiskCardGame.MapElementData DiskCardGame.NodeData DiskCardGame.SpecialNodeData CustomNodeData Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class CustomNodeData : SpecialNodeData Constructors CustomNodeData() Declaration public CustomNodeData() Properties ForceGenerationConditions If even a single one of these conditions returns TRUE, the node will be added to the map. Declaration public override List<NodeData.SelectionCondition> ForceGenerationConditions { get; } Property Value Type Description List < DiskCardGame.NodeData.SelectionCondition > Overrides DiskCardGame.NodeData.ForceGenerationConditions GenerationPrerequisiteConditions All prerequisite conditions must return TRUE for the node to be eligible to be added to the map Declaration public override List<NodeData.SelectionCondition> GenerationPrerequisiteConditions { get; } Property Value Type Description List < DiskCardGame.NodeData.SelectionCondition > Overrides DiskCardGame.NodeData.GenerationPrerequisiteConditions PrefabPath This prefab path has been specially formatted to work with the custom patches created by the API. Declaration public sealed override string PrefabPath { get; } Property Value Type Description System.String Overrides DiskCardGame.NodeData.PrefabPath Methods AddForceGenerationCondition(Func<Boolean>) Adds a simple forced generation condition that does not depend on the current state of the map. Declaration protected void AddForceGenerationCondition(Func<bool> condition) Parameters Type Name Description Func < System.Boolean > condition Returns TRUE if the map node must be generated. AddForceGenerationCondition(CustomNodeData.NodeGenerationCondition) Adds a forced generation condition that depends on the current state of the map. Declaration protected void AddForceGenerationCondition(CustomNodeData.NodeGenerationCondition condition) Parameters Type Name Description CustomNodeData.NodeGenerationCondition condition Returns TRUE if the map node must be generated. AddGenerationPrerequisite(Func<Boolean>) Adds a simple prerequisite condition that does not depend on the current state of the map. Declaration protected void AddGenerationPrerequisite(Func<bool> condition) Parameters Type Name Description Func < System.Boolean > condition Returns TRUE if the map node can be generated. AddGenerationPrerequisite(CustomNodeData.NodeGenerationCondition) Adds a prerequisite condition that depends on the current state of the map. Declaration protected void AddGenerationPrerequisite(CustomNodeData.NodeGenerationCondition condition) Parameters Type Name Description CustomNodeData.NodeGenerationCondition condition Returns TRUE if the map node can be generated. Initialize() Handles the initialization of the node. This is where conditions should be created. Declaration public virtual void Initialize() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition.html": {
    "href": "api/InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition.html",
    "title": "Delegate CustomNodeData.NodeGenerationCondition | InscryptionAPI",
    "keywords": "Delegate CustomNodeData.NodeGenerationCondition This tells us whether or not the node can actually be generated on the map. Simply creating the node is not good enough: the node has to confirm that it can be generated Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public delegate bool NodeGenerationCondition(int gridY, List<NodeData> previousNodes); Parameters Type Name Description System.Int32 gridY How deep into the map the node will be. Higher numbers are further away from the start. List < DiskCardGame.NodeData > previousNodes All nodes that have previously been confirmed to be added to the map. Returns Type Description System.Boolean TRUE if the node is able to be added to the map. FALSE if it is not. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.EncounterBuilder.html": {
    "href": "api/InscryptionAPI.Encounters.EncounterBuilder.html",
    "title": "Class EncounterBuilder | InscryptionAPI",
    "keywords": "Class EncounterBuilder Inheritance System.Object EncounterBuilder Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public static class EncounterBuilder Methods Build(EncounterBuilderBlueprintData) Declaration public static RegionData Build(this EncounterBuilderBlueprintData blueprint) Parameters Type Name Description EncounterBuilderBlueprintData blueprint Returns Type Description DiskCardGame.RegionData"
  },
  "api/InscryptionAPI.Encounters.EncounterBuilderBlueprintData.html": {
    "href": "api/InscryptionAPI.Encounters.EncounterBuilderBlueprintData.html",
    "title": "Class EncounterBuilderBlueprintData | InscryptionAPI",
    "keywords": "Class EncounterBuilderBlueprintData Inheritance System.Object Object ScriptableObject Sirenix.OdinInspector.SerializedScriptableObject DiskCardGame.EncounterBlueprintData EncounterBuilderBlueprintData Implements ISerializationCallbackReceiver Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class EncounterBuilderBlueprintData : EncounterBlueprintData, ISerializationCallbackReceiver Methods SetBasic(String, RegionData) Declaration public void SetBasic(string name, RegionData region) Parameters Type Name Description System.String name DiskCardGame.RegionData region Implements ISerializationCallbackReceiver Extension Methods EncounterBuilder.Build(EncounterBuilderBlueprintData) EncounterExtensions.SetDifficulty<T>(T, Int32, Int32) EncounterExtensions.AddDominantTribes<T>(T, Tribe[]) EncounterExtensions.SetRegionSpecific<T>(T, Boolean) EncounterExtensions.AddRandomReplacementCards<T>(T, String[]) EncounterExtensions.SetRedundantAbilities<T>(T, Ability[]) EncounterExtensions.SetUnlockedCardPrerequisites<T>(T, String[]) EncounterExtensions.AddTurnMods<T>(T, EncounterBlueprintData.TurnModBlueprint[]) EncounterExtensions.CreateTurn<T>(T) EncounterExtensions.AddTurn<T>(T, EncounterBlueprintData.CardBlueprint[]) EncounterExtensions.AddTurn<T>(T, List<EncounterBlueprintData.CardBlueprint>) EncounterExtensions.AddTurns<T>(T, List<EncounterBlueprintData.CardBlueprint>[]) EncounterExtensions.AddTurns<T>(T, List<List<EncounterBlueprintData.CardBlueprint>>) EncounterExtensions.DuplicateTurns<T>(T, Int32) EncounterExtensions.SyncTurnDifficulties<T>(T, Int32, Int32) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.EncounterExtensions.html": {
    "href": "api/InscryptionAPI.Encounters.EncounterExtensions.html",
    "title": "Class EncounterExtensions | InscryptionAPI",
    "keywords": "Class EncounterExtensions Inheritance System.Object EncounterExtensions Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class EncounterExtensions Methods AddDominantTribes<T>(T, Tribe[]) Adds dominant tribes to this region. The dominant tribes list determines the totems for this battle. Declaration public static T AddDominantTribes<T>(this T blueprint, params Tribe[] tribes) where T : EncounterBlueprintData Parameters Type Name Description T blueprint DiskCardGame.Tribe [] tribes The tribes to add. Returns Type Description T Type Parameters Name Description T AddRandomReplacementCards<T>(T, String[]) Adds random replacement cards to this region. A card from this list is selected whenever a card is randomly replaced by randomReplaceChance . Declaration public static T AddRandomReplacementCards<T>(this T blueprint, params string[] cards) where T : EncounterBlueprintData Parameters Type Name Description T blueprint System.String [] cards The cards to add. Returns Type Description T Type Parameters Name Description T AddTurn<T>(T, EncounterBlueprintData.CardBlueprint[]) Adds a new turn to the EncounterBlueprintData using the specified CardBlueprints. Declaration public static T AddTurn<T>(this T blueprint, params EncounterBlueprintData.CardBlueprint[] cards) where T : EncounterBlueprintData Parameters Type Name Description T blueprint DiskCardGame.EncounterBlueprintData.CardBlueprint [] cards The CardBlurprints to add. If none are specified, creates an empty turn. Returns Type Description T The same EncounterBlueprintData so a chain can continue. Type Parameters Name Description T AddTurn<T>(T, List<EncounterBlueprintData.CardBlueprint>) Adds a new turn to the EncounterBlueprintData. Declaration public static T AddTurn<T>(this T blueprint, List<EncounterBlueprintData.CardBlueprint> turn = null) where T : EncounterBlueprintData Parameters Type Name Description T blueprint List < DiskCardGame.EncounterBlueprintData.CardBlueprint > turn The turn to add. If null, creates an empty turn. Returns Type Description T The same EncounterBlueprintData so a chain can continue. Type Parameters Name Description T AddTurnMods<T>(T, EncounterBlueprintData.TurnModBlueprint[]) Declaration public static T AddTurnMods<T>(this T blueprint, params EncounterBlueprintData.TurnModBlueprint[] turnMods) where T : EncounterBlueprintData Parameters Type Name Description T blueprint DiskCardGame.EncounterBlueprintData.TurnModBlueprint [] turnMods Returns Type Description T Type Parameters Name Description T AddTurns<T>(T, List<EncounterBlueprintData.CardBlueprint>[]) Adds new turns to the EncounterBlueprintData using the specified CardBlueprint Lists. Declaration public static T AddTurns<T>(this T blueprint, params List<EncounterBlueprintData.CardBlueprint>[] turns) where T : EncounterBlueprintData Parameters Type Name Description T blueprint List < DiskCardGame.EncounterBlueprintData.CardBlueprint >[] turns The Lists of CardBlueprints to add to the EncounterBlueprintData. Returns Type Description T The same EncounterBlueprintData so a chain can continue. Type Parameters Name Description T AddTurns<T>(T, List<List<EncounterBlueprintData.CardBlueprint>>) Declaration public static T AddTurns<T>(this T blueprint, List<List<EncounterBlueprintData.CardBlueprint>> turns) where T : EncounterBlueprintData Parameters Type Name Description T blueprint List < List < DiskCardGame.EncounterBlueprintData.CardBlueprint >> turns Returns Type Description T Type Parameters Name Description T CreateTurn<T>(T) Creates a new turn for this encounter and returns the builder. Declaration public static TurnBuilder<T> CreateTurn<T>(this T blueprint) where T : EncounterBlueprintData Parameters Type Name Description T blueprint Returns Type Description TurnBuilder <T> Type Parameters Name Description T DuplicateTurn(List<EncounterBlueprintData.CardBlueprint>, Int32) Duplicates a list representing a turn the specified number of times. Declaration public static List<EncounterBlueprintData.CardBlueprint>[] DuplicateTurn(this List<EncounterBlueprintData.CardBlueprint> list, int amount) Parameters Type Name Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > list The list to access. System.Int32 amount How many times the list should be duplicated. Returns Type Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint >[] An array containing the newly duplicated lists. Use with EncounterBlueprintData.AddTurns(). DuplicateTurns<T>(T, Int32) Duplicates the contents of the turn plan into itself the specified number of times. Declaration public static T DuplicateTurns<T>(this T blueprint, int amount) where T : EncounterBlueprintData Parameters Type Name Description T blueprint System.Int32 amount Returns Type Description T Type Parameters Name Description T GetTriggeringNPC(GBCEncounterManager) Gets information about the NPC that triggered the current battle Declaration public static CachedGCBNPCDescriptor GetTriggeringNPC(this GBCEncounterManager mgr) Parameters Type Name Description GBC.GBCEncounterManager mgr Returns Type Description CachedGCBNPCDescriptor OpponentById(IEnumerable<OpponentManager.FullOpponent>, Opponent.Type) Declaration public static OpponentManager.FullOpponent OpponentById(this IEnumerable<OpponentManager.FullOpponent> opponents, Opponent.Type id) Parameters Type Name Description System.Collections.IEnumerable < OpponentManager.FullOpponent > opponents DiskCardGame.Opponent.Type id Returns Type Description OpponentManager.FullOpponent SetDifficulty(EncounterBlueprintData.CardBlueprint, Int32, Int32) Sets the minimum and maximum difficulty values for this CardBlueprint. Declaration public static EncounterBlueprintData.CardBlueprint SetDifficulty(this EncounterBlueprintData.CardBlueprint card, int min, int max) Parameters Type Name Description DiskCardGame.EncounterBlueprintData.CardBlueprint card The CardBlueprint to access. System.Int32 min The minimum difficulty for this card to appear. System.Int32 max The maximum difficulty for this card to appear at. Returns Type Description DiskCardGame.EncounterBlueprintData.CardBlueprint The same CardBlueprint so a chain can continue. SetDifficulty<T>(T, Int32, Int32) Sets the difficulty range of this encounter. Difficulty is determined by the formula (6 * tier ) + battle# + modifier . Declaration public static T SetDifficulty<T>(this T blueprint, int min, int max) where T : EncounterBlueprintData Parameters Type Name Description T blueprint System.Int32 min The minimum difficulty. System.Int32 max The maximum difficulty. Returns Type Description T Type Parameters Name Description T SetNewSequencer(OpponentManager.FullOpponent, String, String, Type) Declaration public static OpponentManager.FullOpponent SetNewSequencer(this OpponentManager.FullOpponent opp, string pluginGuid, string sequencerName, Type sequencerType) Parameters Type Name Description OpponentManager.FullOpponent opp System.String pluginGuid System.String sequencerName Type sequencerType Returns Type Description OpponentManager.FullOpponent SetOpponent(OpponentManager.FullOpponent, Type) Declaration public static OpponentManager.FullOpponent SetOpponent(this OpponentManager.FullOpponent opp, Type opponentType) Parameters Type Name Description OpponentManager.FullOpponent opp Type opponentType Returns Type Description OpponentManager.FullOpponent SetRedundantAbilities<T>(T, Ability[]) Adds redundant abilities to this region. Redundant abilities will not be used on totems for this encounter. Declaration public static T SetRedundantAbilities<T>(this T blueprint, params Ability[] abilities) where T : EncounterBlueprintData Parameters Type Name Description T blueprint DiskCardGame.Ability [] abilities The abilities to add. Returns Type Description T Type Parameters Name Description T SetRegionSpecific<T>(T, Boolean) Declaration public static T SetRegionSpecific<T>(this T blueprint, bool enabled) where T : EncounterBlueprintData Parameters Type Name Description T blueprint System.Boolean enabled Returns Type Description T Type Parameters Name Description T SetReplacement(EncounterBlueprintData.CardBlueprint, String, Int32, Boolean) Sets whether what card the CardBlueprint will be replaced with if difficultyReplace == true, and what difficulty threshold it will be replaced. Declaration public static EncounterBlueprintData.CardBlueprint SetReplacement(this EncounterBlueprintData.CardBlueprint blueprint, string replacementName, int requiredDifficulty = 0, bool replaceWithDifficulty = true) Parameters Type Name Description DiskCardGame.EncounterBlueprintData.CardBlueprint blueprint The CardBlueprint to access. System.String replacementName The name of the card that will replace this card. System.Int32 requiredDifficulty The minimum difficulty for the card to be replaced. System.Boolean replaceWithDifficulty Whether this card will be replaced at certain difficulties. Returns Type Description DiskCardGame.EncounterBlueprintData.CardBlueprint The same CardBlueprint so a chain can continue. SetSequencer(OpponentManager.FullOpponent, String) Declaration public static OpponentManager.FullOpponent SetSequencer(this OpponentManager.FullOpponent opp, string sequenceId) Parameters Type Name Description OpponentManager.FullOpponent opp System.String sequenceId Returns Type Description OpponentManager.FullOpponent SetTurnDifficulty(List<EncounterBlueprintData.CardBlueprint>, Int32, Int32) Sets the difficulties of each CardBlueprint in the list to the specified values. Declaration public static List<EncounterBlueprintData.CardBlueprint> SetTurnDifficulty(this List<EncounterBlueprintData.CardBlueprint> list, int min, int max) Parameters Type Name Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > list The list to access. System.Int32 min The minimum difficulty. System.Int32 max The maximum difficulty. Returns Type Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > The same list so a chain can continue. SetUnlockedCardPrerequisites<T>(T, String[]) Declaration public static T SetUnlockedCardPrerequisites<T>(this T blueprint, params string[] cards) where T : EncounterBlueprintData Parameters Type Name Description T blueprint System.String [] cards Returns Type Description T Type Parameters Name Description T SyncTurnDifficulties<T>(T, Int32, Int32) Sets the difficulty values of all CardBlueprints in the turn plan to the same values. Declaration public static T SyncTurnDifficulties<T>(this T blueprint, int minDifficulty, int maxDifficulty) where T : EncounterBlueprintData Parameters Type Name Description T blueprint System.Int32 minDifficulty System.Int32 maxDifficulty Returns Type Description T Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Encounters.EncounterManager.html": {
    "href": "api/InscryptionAPI.Encounters.EncounterManager.html",
    "title": "Class EncounterManager | InscryptionAPI",
    "keywords": "Class EncounterManager Inheritance System.Object EncounterManager Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public static class EncounterManager Fields BaseGameEncounters All of the vanilla game's encounters. Declaration public static readonly ReadOnlyCollection<EncounterBlueprintData> BaseGameEncounters Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < DiskCardGame.EncounterBlueprintData > NewEncounters Declaration public static readonly ObservableCollection<EncounterBlueprintData> NewEncounters Field Value Type Description System.Collections.ObjectModel.ObservableCollection < DiskCardGame.EncounterBlueprintData > Properties AllEncountersCopy A copy of all encounters in the encounter pool. Declaration public static List<EncounterBlueprintData> AllEncountersCopy { get; } Property Value Type Description List < DiskCardGame.EncounterBlueprintData > . Methods Add(EncounterBlueprintData) Adds a new encounter to the encounter pool. Declaration public static void Add(EncounterBlueprintData newEncounter) Parameters Type Name Description DiskCardGame.EncounterBlueprintData newEncounter The encounter to add. CreateTurn(EncounterBlueprintData.CardBlueprint) Creates a new turn using the provided CardBlueprint. Declaration public static List<EncounterBlueprintData.CardBlueprint> CreateTurn(EncounterBlueprintData.CardBlueprint card = null) Parameters Type Name Description DiskCardGame.EncounterBlueprintData.CardBlueprint card The CardBlueprint that will be used this turn. If null, creates an empty turn. Returns Type Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > The newly created list so a chain can continue. CreateTurn(EncounterBlueprintData.CardBlueprint[]) Creates a new turn using the provided CardBlueprints. Declaration public static List<EncounterBlueprintData.CardBlueprint> CreateTurn(params EncounterBlueprintData.CardBlueprint[] cards) Parameters Type Name Description DiskCardGame.EncounterBlueprintData.CardBlueprint [] cards The CardBlueprints that will be used this turn. Returns Type Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > The newly created list so a chain can continue. CreateTurn(String) Creates a new turn using the provided card name. Declaration public static List<EncounterBlueprintData.CardBlueprint> CreateTurn(string cardName) Parameters Type Name Description System.String cardName The name of the card that will be played this turn. Returns Type Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > The newly created list so a chain can continue. CreateTurn(String[]) Creates a new turn using the provided card names. Declaration public static List<EncounterBlueprintData.CardBlueprint> CreateTurn(params string[] cardNames) Parameters Type Name Description System.String [] cardNames The names of the cards that will be played this turn. Returns Type Description List < DiskCardGame.EncounterBlueprintData.CardBlueprint > The newly created list so a chain can continue. New(String, Boolean) Creates a new instance of EncounterBlueprintData. Declaration public static EncounterBlueprintData New(string name, bool addToPool = true) Parameters Type Name Description System.String name The internal name of your encounter - used to find and reference it. System.Boolean addToPool If true, the created instance will be added to the encounter pool. Returns Type Description DiskCardGame.EncounterBlueprintData The newly created card's CardInfo. NewCardBlueprint(String, Int32, Boolean, Int32, String, Int32, Int32) Creates a new CardBlueprint. Declaration public static EncounterBlueprintData.CardBlueprint NewCardBlueprint(string cardName, int randomReplaceChance = 0, bool difficultyReplace = false, int difficultyReplaceReq = 0, string replacement = null, int minDifficulty = 1, int maxDifficulty = 20) Parameters Type Name Description System.String cardName The internal name of the card to use. System.Int32 randomReplaceChance The integer probability of this card getting replaced by a card from the encounter's randomReplacementCards . System.Boolean difficultyReplace Whether to replace this card when a certain difficulty threshold is met. System.Int32 difficultyReplaceReq The difficulty threshold for the replacement card to be used instead. System.String replacement The name of the replacement card for the difficulty replacement. System.Int32 minDifficulty The minimum difficulty for this card to appear. System.Int32 maxDifficulty The maximum difficulty for this card to appear. Returns Type Description DiskCardGame.EncounterBlueprintData.CardBlueprint The newly created CardBlueprint. Remove(EncounterBlueprintData) Removes a custom encounter from the encounter pool. Cannot be used to remove base encounters. Declaration public static void Remove(EncounterBlueprintData encounter) Parameters Type Name Description DiskCardGame.EncounterBlueprintData encounter The encounter to remove. SyncEncounterList() Re-executes events and rebuilds the encounter pool. Declaration public static void SyncEncounterList() Events ModifyEncountersList This event runs every time the encounters list is resynced. By adding listeners to this event, you can modify encounters that have been added to the list after your mod was loaded. Declaration public static event Func<List<EncounterBlueprintData>, List<EncounterBlueprintData>> ModifyEncountersList Event Type Type Description Func < List < DiskCardGame.EncounterBlueprintData >, List < DiskCardGame.EncounterBlueprintData >>"
  },
  "api/InscryptionAPI.Encounters.html": {
    "href": "api/InscryptionAPI.Encounters.html",
    "title": "Namespace InscryptionAPI.Encounters | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Encounters This namespace is dedicated to managing custom battle encounters and their blueprints. Classes AIManager AIManager.FullAI CachedGCBNPCDescriptor CustomNodeData Represents a node on the map that has been placed by the Inscryption API EncounterBuilder EncounterBuilderBlueprintData EncounterExtensions EncounterManager NodeManager NodeManager.NodeInfo OpponentManager OpponentManager.FullOpponent SpecialSequenceManager SpecialSequenceManager.FullSpecialSequencer TurnBuilder<T> TurnExtensions Interfaces ICustomNodeSequence A sequencer interface for all custom sequencers compatible with the Inscryption API Enums NodeManager.NodePosition Delegates CustomNodeData.NodeGenerationCondition This tells us whether or not the node can actually be generated on the map. Simply creating the node is not good enough: the node has to confirm that it can be generated"
  },
  "api/InscryptionAPI.Encounters.ICustomNodeSequence.html": {
    "href": "api/InscryptionAPI.Encounters.ICustomNodeSequence.html",
    "title": "Interface ICustomNodeSequence | InscryptionAPI",
    "keywords": "Interface ICustomNodeSequence A sequencer interface for all custom sequencers compatible with the Inscryption API Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public interface ICustomNodeSequence Methods ExecuteCustomSequence(CustomNodeData) Executes the sequence that plays when the player enters this particular map node. Declaration IEnumerator ExecuteCustomSequence(CustomNodeData nodeData) Parameters Type Name Description CustomNodeData nodeData The node data object. Returns Type Description System.Collections.IEnumerator An enumeration of Unity events. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.NodeManager.html": {
    "href": "api/InscryptionAPI.Encounters.NodeManager.html",
    "title": "Class NodeManager | InscryptionAPI",
    "keywords": "Class NodeManager Inheritance System.Object NodeManager Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class NodeManager Methods Add<S>(Texture2D[], NodeManager.NodePosition) Registers a new custom node and conditionally adds it to the map pool based on the nodeType Declaration public static NodeManager.NodeInfo Add<S>(Texture2D[] animatedMapNode, NodeManager.NodePosition nodeType) where S : MonoBehaviour, ICustomNodeSequence Parameters Type Name Description Texture2D [] animatedMapNode An array of exactly four textures containing the node's animation. NodeManager.NodePosition nodeType Flags to indicate where the node should appear on the map. Returns Type Description NodeManager.NodeInfo The internal representation of this node. Type Parameters Name Description S Implements the sequence logic for the special node Add<S, N>(Texture2D[], NodeManager.NodePosition) Registers a new custom node and conditionally adds it to the map pool based on the nodeType Declaration public static NodeManager.NodeInfo Add<S, N>(Texture2D[] animatedMapNode, NodeManager.NodePosition nodeType) where S : MonoBehaviour, ICustomNodeSequence where N : CustomNodeData Parameters Type Name Description Texture2D [] animatedMapNode An array of exactly four textures containing the node's animation. NodeManager.NodePosition nodeType Flags to indicate where the node should appear on the map. Returns Type Description NodeManager.NodeInfo The internal representation of this node. Type Parameters Name Description S Implements the sequence logic for the special node N Implements the custom data and map generation logic for the special node"
  },
  "api/InscryptionAPI.Encounters.NodeManager.NodeInfo.html": {
    "href": "api/InscryptionAPI.Encounters.NodeManager.NodeInfo.html",
    "title": "Class NodeManager.NodeInfo | InscryptionAPI",
    "keywords": "Class NodeManager.NodeInfo Inheritance System.Object NodeManager.NodeInfo Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class NodeInfo Properties animatedMapNode Declaration public Texture2D[] animatedMapNode { get; set; } Property Value Type Description Texture2D [] guid Declaration public string guid { get; } Property Value Type Description System.String ModGUID Declaration public string ModGUID { get; } Property Value Type Description System.String nodeDataType Declaration public Type nodeDataType { get; set; } Property Value Type Description Type nodePosition Declaration public NodeManager.NodePosition nodePosition { get; set; } Property Value Type Description NodeManager.NodePosition sequencerType Declaration public Type sequencerType { get; set; } Property Value Type Description Type Methods BuildNode() Declaration public CustomNodeData BuildNode() Returns Type Description CustomNodeData Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.NodeManager.NodePosition.html": {
    "href": "api/InscryptionAPI.Encounters.NodeManager.NodePosition.html",
    "title": "Enum NodeManager.NodePosition | InscryptionAPI",
    "keywords": "Enum NodeManager.NodePosition Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public enum NodePosition Fields Name Description Act1Available This node can appear in Act 1 maps, not just in Kaycee's Mod map CardChoiceRandom This node will appear in the pool of random events that happen right after a battle MapStart This node will be forced to appear at the start of each map, unless the node fails a prerequisite condition NotGenerated This node will not be autogenerated on the map, but can still be manually added PostBoss This node will be forced to appear right after the boss of each map, unless the node fails a prerequisite condition PreBoss This node will be forced to appear right before the boss of each map, unless the node fails a prerequisite condition SpecialEventRandom This node will appear in the pool of random events that happen right before a battle Extension Methods ListExtensions.Repeat<NodeManager.NodePosition>(Int32)"
  },
  "api/InscryptionAPI.Encounters.OpponentManager.FullOpponent.html": {
    "href": "api/InscryptionAPI.Encounters.OpponentManager.FullOpponent.html",
    "title": "Class OpponentManager.FullOpponent | InscryptionAPI",
    "keywords": "Class OpponentManager.FullOpponent Inheritance System.Object OpponentManager.FullOpponent Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class FullOpponent Constructors FullOpponent(Opponent.Type, Type, String) Declaration public FullOpponent(Opponent.Type id, Type opponent, string specialSequencerId) Parameters Type Name Description DiskCardGame.Opponent.Type id Type opponent System.String specialSequencerId FullOpponent(Opponent.Type, Type, String, List<Texture2D>) Declaration public FullOpponent(Opponent.Type id, Type opponent, string specialSequencerId, List<Texture2D> nodeAnimation) Parameters Type Name Description DiskCardGame.Opponent.Type id Type opponent System.String specialSequencerId List < Texture2D > nodeAnimation Fields Id Declaration public readonly Opponent.Type Id Field Value Type Description DiskCardGame.Opponent.Type MaskType Declaration public LeshyAnimationController.Mask MaskType Field Value Type Description DiskCardGame.LeshyAnimationController.Mask NodeAnimation Declaration public List<Texture2D> NodeAnimation Field Value Type Description List < Texture2D > Opponent Declaration public Type Opponent Field Value Type Description Type SpecialSequencerId Declaration public string SpecialSequencerId Field Value Type Description System.String Extension Methods EncounterExtensions.SetOpponent(OpponentManager.FullOpponent, Type) EncounterExtensions.SetSequencer(OpponentManager.FullOpponent, String) EncounterExtensions.SetNewSequencer(OpponentManager.FullOpponent, String, String, Type) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.OpponentManager.html": {
    "href": "api/InscryptionAPI.Encounters.OpponentManager.html",
    "title": "Class OpponentManager | InscryptionAPI",
    "keywords": "Class OpponentManager Inheritance System.Object OpponentManager Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class OpponentManager Fields BaseGameOpponents Declaration public static readonly ReadOnlyCollection<OpponentManager.FullOpponent> BaseGameOpponents Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < OpponentManager.FullOpponent > Properties AllOpponents Declaration public static List<OpponentManager.FullOpponent> AllOpponents { get; } Property Value Type Description List < OpponentManager.FullOpponent > RunStateOpponents Declaration public static List<Opponent.Type> RunStateOpponents { get; set; } Property Value Type Description List < DiskCardGame.Opponent.Type > Methods Add(String, String, String, Type) Declaration public static OpponentManager.FullOpponent Add(string guid, string opponentName, string sequencerID, Type opponentType) Parameters Type Name Description System.String guid System.String opponentName System.String sequencerID Type opponentType Returns Type Description OpponentManager.FullOpponent Add(String, String, String, Type, List<Texture2D>) Declaration public static OpponentManager.FullOpponent Add(string guid, string opponentName, string sequencerID, Type opponentType, List<Texture2D> nodeAnimation) Parameters Type Name Description System.String guid System.String opponentName System.String sequencerID Type opponentType List < Texture2D > nodeAnimation Returns Type Description OpponentManager.FullOpponent OriginalGetSequencerIdForBoss(Opponent.Type) Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(BossBattleSequencer), \"GetSequencerIdForBoss\")] public static string OriginalGetSequencerIdForBoss(Opponent.Type bossType) Parameters Type Name Description DiskCardGame.Opponent.Type bossType Returns Type Description System.String"
  },
  "api/InscryptionAPI.Encounters.SpecialSequenceManager.FullSpecialSequencer.html": {
    "href": "api/InscryptionAPI.Encounters.SpecialSequenceManager.FullSpecialSequencer.html",
    "title": "Class SpecialSequenceManager.FullSpecialSequencer | InscryptionAPI",
    "keywords": "Class SpecialSequenceManager.FullSpecialSequencer Inheritance System.Object SpecialSequenceManager.FullSpecialSequencer Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class FullSpecialSequencer Constructors FullSpecialSequencer(String, Type) Declaration public FullSpecialSequencer(string id, Type specialSequencer) Parameters Type Name Description System.String id Type specialSequencer Fields Id Declaration public readonly string Id Field Value Type Description System.String Properties SpecialSequencer Declaration public Type SpecialSequencer { get; } Property Value Type Description Type Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.SpecialSequenceManager.html": {
    "href": "api/InscryptionAPI.Encounters.SpecialSequenceManager.html",
    "title": "Class SpecialSequenceManager | InscryptionAPI",
    "keywords": "Class SpecialSequenceManager Inheritance System.Object SpecialSequenceManager Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public static class SpecialSequenceManager Fields BaseGameSpecialSequencers Declaration public static readonly ReadOnlyCollection<SpecialSequenceManager.FullSpecialSequencer> BaseGameSpecialSequencers Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < SpecialSequenceManager.FullSpecialSequencer > Properties AllSpecialSequencers Declaration public static List<SpecialSequenceManager.FullSpecialSequencer> AllSpecialSequencers { get; } Property Value Type Description List < SpecialSequenceManager.FullSpecialSequencer > Methods Add(String, String, Type) Declaration public static SpecialSequenceManager.FullSpecialSequencer Add(string guid, string sequencerName, Type sequencer) Parameters Type Name Description System.String guid System.String sequencerName Type sequencer Returns Type Description SpecialSequenceManager.FullSpecialSequencer"
  },
  "api/InscryptionAPI.Encounters.TurnBuilder-1.html": {
    "href": "api/InscryptionAPI.Encounters.TurnBuilder-1.html",
    "title": "Class TurnBuilder<T> | InscryptionAPI",
    "keywords": "Class TurnBuilder<T> Inheritance System.Object TurnBuilder<T> Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public class TurnBuilder<T> where T : EncounterBlueprintData Type Parameters Name Description T Constructors TurnBuilder() Declaration public TurnBuilder() Methods SetBlueprint(T) Declaration public void SetBlueprint(T blueprint) Parameters Type Name Description T blueprint Extension Methods TurnExtensions.AddCardBlueprint<T>(TurnBuilder<T>, String, Int32, Int32, Int32, Boolean, Int32, String) TurnExtensions.Build<T>(TurnBuilder<T>) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Encounters.TurnExtensions.html": {
    "href": "api/InscryptionAPI.Encounters.TurnExtensions.html",
    "title": "Class TurnExtensions | InscryptionAPI",
    "keywords": "Class TurnExtensions Inheritance System.Object TurnExtensions Namespace : InscryptionAPI.Encounters Assembly : InscryptionAPI.dll Syntax public static class TurnExtensions Methods AddCardBlueprint<T>(TurnBuilder<T>, String, Int32, Int32, Int32, Boolean, Int32, String) Adds a card blueprint to this turn. Declaration public static TurnBuilder<T> AddCardBlueprint<T>(this TurnBuilder<T> turnBuilder, string card, int randomReplaceChance = 0, int minDifficulty = 1, int maxDifficulty = 20, bool difficultyReplace = false, int difficultyReplaceReq = 0, string replacement = null) where T : EncounterBlueprintData Parameters Type Name Description TurnBuilder <T> turnBuilder System.String card The default card. Can be null for no card. System.Int32 randomReplaceChance The integer probability of this card getting replaced by a card from the encounter's randomReplacementCards . System.Int32 minDifficulty The minimum difficulty for this card to appear. System.Int32 maxDifficulty The maximum difficulty for this card to appear. System.Boolean difficultyReplace Whether to replace this card when a certain difficulty threshold is met. System.Int32 difficultyReplaceReq The difficulty threshold for the replacement card to be used instead. System.String replacement The replacement card for the difficulty replacement. Returns Type Description TurnBuilder <T> Type Parameters Name Description T Build<T>(TurnBuilder<T>) Declaration public static T Build<T>(this TurnBuilder<T> turnBuilder) where T : EncounterBlueprintData Parameters Type Name Description TurnBuilder <T> turnBuilder Returns Type Description T Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Guid.GuidManager.html": {
    "href": "api/InscryptionAPI.Guid.GuidManager.html",
    "title": "Class GuidManager | InscryptionAPI",
    "keywords": "Class GuidManager Inheritance System.Object GuidManager Namespace : InscryptionAPI.Guid Assembly : InscryptionAPI.dll Syntax public static class GuidManager Fields MAX_DATA Declaration public const string MAX_DATA = \"maximumStoredValueForEnum\" Field Value Type Description System.String START_INDEX Declaration public const int START_INDEX = 1000 Field Value Type Description System.Int32 Methods GetEnumType(Int32) Declaration public static Type GetEnumType(int number) Parameters Type Name Description System.Int32 number Returns Type Description Type GetEnumValue<T>(String, String) Declaration public static T GetEnumValue<T>(string guid, string value) where T : struct, Enum Parameters Type Name Description System.String guid System.String value Returns Type Description T Type Parameters Name Description T GetFullyQualifiedName(String, String) Declaration public static string GetFullyQualifiedName(string guid, string value) Parameters Type Name Description System.String guid System.String value Returns Type Description System.String GetValues<T>() Gets a list of created Enum values of the provided Enum type. Declaration public static List<T> GetValues<T>() where T : struct, Enum Returns Type Description List <T> The list of Enum values created by the API. Type Parameters Name Description T The Enum type to search for. TryGetGuidAndKeyEnumValue<T>(T, out String, out String) Declaration public static bool TryGetGuidAndKeyEnumValue<T>(T value, out string guid, out string key) where T : Enum Parameters Type Name Description T value System.String guid System.String key Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Guid.html": {
    "href": "api/InscryptionAPI.Guid.html",
    "title": "Namespace InscryptionAPI.Guid | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Guid This namespace is dedicated to managing mod GUIDs, including enumeration extensions. Classes GuidManager TypeManager"
  },
  "api/InscryptionAPI.Guid.TypeManager.html": {
    "href": "api/InscryptionAPI.Guid.TypeManager.html",
    "title": "Class TypeManager | InscryptionAPI",
    "keywords": "Class TypeManager Inheritance System.Object TypeManager Namespace : InscryptionAPI.Guid Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class TypeManager Methods GetModIdFromCallstack(Assembly) Declaration public static string GetModIdFromCallstack(Assembly callingAssembly) Parameters Type Name Description System.Reflection.Assembly callingAssembly Returns Type Description System.String OriginalGetType(String, String) Declaration [HarmonyReversePatch(HarmonyReversePatchType.Original)] public static Type OriginalGetType(string nameSpace, string typeName) Parameters Type Name Description System.String nameSpace System.String typeName Returns Type Description Type"
  },
  "api/InscryptionAPI.Helpers.AssetBundleHelper.html": {
    "href": "api/InscryptionAPI.Helpers.AssetBundleHelper.html",
    "title": "Class AssetBundleHelper | InscryptionAPI",
    "keywords": "Class AssetBundleHelper Inheritance System.Object AssetBundleHelper Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public static class AssetBundleHelper Methods TryGet<T>(Byte[], String, out T) Declaration public static bool TryGet<T>(byte[] resources, string prefabName, out T prefab) where T : UnityObject Parameters Type Name Description System.Byte [] resources System.String prefabName T prefab Returns Type Description System.Boolean Type Parameters Name Description T TryGet<T>(String, String, out T) Declaration public static bool TryGet<T>(string pathToAssetBundle, string prefabName, out T prefab) where T : UnityObject Parameters Type Name Description System.String pathToAssetBundle System.String prefabName T prefab Returns Type Description System.Boolean Type Parameters Name Description T TryGet<T>(AssetBundle, String, out T) Declaration public static bool TryGet<T>(AssetBundle bundle, string prefabName, out T prefab) where T : UnityObject Parameters Type Name Description AssetBundle bundle System.String prefabName T prefab Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Helpers.CustomFields.html": {
    "href": "api/InscryptionAPI.Helpers.CustomFields.html",
    "title": "Class CustomFields | InscryptionAPI",
    "keywords": "Class CustomFields Allows for an easy way to add custom fields to an object, or to an entire class. Inheritance System.Object CustomFields Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public static class CustomFields Methods Get<T>(Object, String) Returns a custom field. Declaration public static T Get<T>(object obj, string field) Parameters Type Name Description System.Object obj The object which has the custom field. System.String field The name of the custom field. Returns Type Description T A custom field of type T. If the field is not found, default(T) is returned. Type Parameters Name Description T The type of the custom field. GetStatic<T>(String, Type) Returns a static custom field. Declaration public static T GetStatic<T>(string field, Type classType) Parameters Type Name Description System.String field The name of the custom field. Type classType The type of the class the static field is stored on. Returns Type Description T A custom field of type T. If the field is not found, default(T) is returned. Type Parameters Name Description T The type of the custom field. GetStatic<T, C>(String) Returns a static custom field. Declaration public static T GetStatic<T, C>(string field) Parameters Type Name Description System.String field The name of the custom field. Returns Type Description T A custom field of type T. If the field is not found, default(T) is returned. Type Parameters Name Description T The type of the custom field. C The class the static field is stored on. HasField(Object, String) Check if an object currently stores a custom field. Declaration public static bool HasField(object obj, string field) Parameters Type Name Description System.Object obj The object to check. System.String field The name of the custom field to check for. Returns Type Description System.Boolean True if the object is storing the custom field. HasStaticField(String, Type) Check if a class currently stores a static custom field. Declaration public static bool HasStaticField(string field, Type classType) Parameters Type Name Description System.String field The name of the static custom field to check for. Type classType The type of the class which you want to check. Returns Type Description System.Boolean True if the class is storing the static custom field. HasStaticField<C>(String) Check if a class currently stores a static custom field. Declaration public static bool HasStaticField<C>(string field) Parameters Type Name Description System.String field The name of the static custom field to check for. Returns Type Description System.Boolean True if the class is storing the static custom field. Type Parameters Name Description C The class which you want to check. Set(Object, String, Object) Set a custom field. Declaration public static void Set(object obj, string field, object value) Parameters Type Name Description System.Object obj The object which you want to store the custom field on. System.String field The name of the custom field. System.Object value The value of the custom field. SetStatic(String, Object, Type) Set a static custom field. Declaration public static void SetStatic(string field, object value, Type classType) Parameters Type Name Description System.String field The name of the custom field. System.Object value The value of the custom field. Type classType The type of the class which you want to store the static field is stored on. SetStatic<C>(String, Object) Set a static custom field. Declaration public static void SetStatic<C>(string field, object value) Parameters Type Name Description System.String field The name of the custom field. System.Object value The value of the custom field. Type Parameters Name Description C The class which you want to store the static field is stored on."
  },
  "api/InscryptionAPI.Helpers.CustomLine.html": {
    "href": "api/InscryptionAPI.Helpers.CustomLine.html",
    "title": "Struct CustomLine | InscryptionAPI",
    "keywords": "Struct CustomLine Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public struct CustomLine Constructors CustomLine() Declaration public CustomLine() Fields emotion Declaration public Emotion emotion Field Value Type Description DiskCardGame.Emotion letterAnimation Declaration public TextDisplayer.LetterAnimation letterAnimation Field Value Type Description DiskCardGame.TextDisplayer.LetterAnimation p03Face Declaration public P03AnimationController.Face p03Face Field Value Type Description DiskCardGame.P03AnimationController.Face speaker Declaration public DialogueEvent.Speaker speaker Field Value Type Description DialogueEvent.Speaker specialInstruction Declaration public string specialInstruction Field Value Type Description System.String storyCondition Declaration public StoryEvent storyCondition Field Value Type Description DiskCardGame.StoryEvent storyConditionMustBeMet Declaration public bool storyConditionMustBeMet Field Value Type Description System.Boolean text Declaration public string text Field Value Type Description System.String Methods ToLine(List<DialogueEvent.Speaker>, DialogueEvent.Speaker) Declaration public DialogueEvent.Line ToLine(List<DialogueEvent.Speaker> speakers, DialogueEvent.Speaker defaultSpeaker = DialogueEvent.Speaker.Single) Parameters Type Name Description List < DialogueEvent.Speaker > speakers DialogueEvent.Speaker defaultSpeaker Returns Type Description DialogueEvent.Line Operators Implicit(String to CustomLine) Declaration public static implicit operator CustomLine(string str) Parameters Type Name Description System.String str Returns Type Description CustomLine Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Helpers.DialogueEventGenerator.html": {
    "href": "api/InscryptionAPI.Helpers.DialogueEventGenerator.html",
    "title": "Class DialogueEventGenerator | InscryptionAPI",
    "keywords": "Class DialogueEventGenerator Inheritance System.Object DialogueEventGenerator Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public static class DialogueEventGenerator Methods GenerateEvent(String, List<CustomLine>, List<List<CustomLine>>, DialogueEvent.MaxRepeatsBehaviour, DialogueEvent.Speaker) Declaration public static DialogueEvent GenerateEvent(string name, List<CustomLine> mainLines, List<List<CustomLine>> repeatLines = null, DialogueEvent.MaxRepeatsBehaviour afterMaxRepeats = DialogueEvent.MaxRepeatsBehaviour.RandomDefinedRepeat, DialogueEvent.Speaker defaultSpeaker = DialogueEvent.Speaker.Single) Parameters Type Name Description System.String name List < CustomLine > mainLines List < List < CustomLine >> repeatLines DialogueEvent.MaxRepeatsBehaviour afterMaxRepeats DialogueEvent.Speaker defaultSpeaker Returns Type Description DialogueEvent"
  },
  "api/InscryptionAPI.Helpers.Extensions.BoardManagerExtensions.html": {
    "href": "api/InscryptionAPI.Helpers.Extensions.BoardManagerExtensions.html",
    "title": "Class BoardManagerExtensions | InscryptionAPI",
    "keywords": "Class BoardManagerExtensions Inheritance System.Object BoardManagerExtensions Namespace : InscryptionAPI.Helpers.Extensions Assembly : InscryptionAPI.dll Syntax public static class BoardManagerExtensions Methods GetCards(BoardManager, Boolean, Predicate<PlayableCard>) Retrieve all player or opponent cards on the board. Declaration public static List<PlayableCard> GetCards(this BoardManager manager, bool getPlayerCards, Predicate<PlayableCard> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. System.Boolean getPlayerCards Whether to retrieve player cards. Predicate < DiskCardGame.PlayableCard > filterOnPredicate The predicate to filter on each card. Returns Type Description List < DiskCardGame.PlayableCard > The list of relevant cards on the board. GetCardSlots(BoardManager, Boolean, Predicate<CardSlot>) Retrieve all player or opponent card slots on the board. Declaration public static List<CardSlot> GetCardSlots(this BoardManager manager, bool getPlayerCards, Predicate<CardSlot> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. System.Boolean getPlayerCards Whether to retrieve player card slots. Predicate < DiskCardGame.CardSlot > filterOnPredicate The predicate to filter on each card slot. Returns Type Description List < DiskCardGame.CardSlot > The list of relevant card slots on the board. GetOpenSlots(BoardManager, Boolean, Predicate<CardSlot>) Retrieve all slots on the player or opponent's side of the board that are not occupied by a card. Declaration public static List<CardSlot> GetOpenSlots(this BoardManager manager, bool getPlayerSlots, Predicate<CardSlot> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. System.Boolean getPlayerSlots Whether to retrieve player slots. Predicate < DiskCardGame.CardSlot > filterOnPredicate The predicate to filter on each slot. Returns Type Description List < DiskCardGame.CardSlot > The list of relevant card slots with no cards. GetOpponentCards(BoardManager, Predicate<PlayableCard>) Retrieve all opponent cards on the board. Declaration public static List<PlayableCard> GetOpponentCards(this BoardManager manager, Predicate<PlayableCard> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. Predicate < DiskCardGame.PlayableCard > filterOnPredicate The predicate to filter on each card. Returns Type Description List < DiskCardGame.PlayableCard > The list of opponent cards on the board. GetOpponentOpenSlots(BoardManager, Predicate<CardSlot>) Retrieve all opponent slots that are not occupied by a card. Declaration public static List<CardSlot> GetOpponentOpenSlots(this BoardManager manager, Predicate<CardSlot> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. Predicate < DiskCardGame.CardSlot > filterOnPredicate The predicate to filter on each slot. Returns Type Description List < DiskCardGame.CardSlot > The list of opponent slots with no cards. GetPlayerCards(BoardManager, Predicate<PlayableCard>) Retrieve all player cards on the board. Declaration public static List<PlayableCard> GetPlayerCards(this BoardManager manager, Predicate<PlayableCard> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. Predicate < DiskCardGame.PlayableCard > filterOnPredicate The predicate to filter on each card. Returns Type Description List < DiskCardGame.PlayableCard > The list of player cards on the board. GetPlayerOpenSlots(BoardManager, Predicate<CardSlot>) Retrieve all player slots that are not occupied by a card. Declaration public static List<CardSlot> GetPlayerOpenSlots(this BoardManager manager, Predicate<CardSlot> filterOnPredicate = null) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. Predicate < DiskCardGame.CardSlot > filterOnPredicate The predicate to filter on each slot. Returns Type Description List < DiskCardGame.CardSlot > The list of player slots with no cards. GetSlotsCopy(BoardManager, Boolean) Retrieve a copy of the board slots for the player or opponent's side of the board. Declaration public static List<CardSlot> GetSlotsCopy(this BoardManager manager, bool getPlayerSlotsCopy) Parameters Type Name Description DiskCardGame.BoardManager manager Manager instance to access. System.Boolean getPlayerSlotsCopy Whether to retrieve PlayerSlotsCopy or OpponentSlotsCopy. Returns Type Description List < DiskCardGame.CardSlot > The list corresponding to the player or opponent's side of the board."
  },
  "api/InscryptionAPI.Helpers.Extensions.CardSlotExtensions.html": {
    "href": "api/InscryptionAPI.Helpers.Extensions.CardSlotExtensions.html",
    "title": "Class CardSlotExtensions | InscryptionAPI",
    "keywords": "Class CardSlotExtensions Inheritance System.Object CardSlotExtensions Namespace : InscryptionAPI.Helpers.Extensions Assembly : InscryptionAPI.dll Syntax public static class CardSlotExtensions Methods AssignCardToSlot(CardSlot, PlayableCard, Single, Action, Boolean) Assign a playable card in a specific slot from the CardSlot object. A much more robust way that's the same as yield return BoardManager.Instance.AssignCardToSlot() . Declaration public static IEnumerator AssignCardToSlot(this CardSlot slotToSpawnIn, PlayableCard playableCard, float transitionDuration = 0.1F, Action tweenCompleteCallback = null, bool resolveTriggers = true) Parameters Type Name Description DiskCardGame.CardSlot slotToSpawnIn The slot to spawn in. DiskCardGame.PlayableCard playableCard The PlayableCard object to spawn in said slot. System.Single transitionDuration Time to transition the card to the slot. The longer the time, the longer it will take to be placed at the slot. Action tweenCompleteCallback An action to do after the assignment has completed. System.Boolean resolveTriggers Whether or not to activate the 'Trigger.OtherCardAssignedToSlot' for the cards on board. Returns Type Description System.Collections.IEnumerator The enumeration of the card being placed in the slot. CreateCardInSlot(CardSlot, CardInfo, Single, Boolean) Create a card in a specific slot from the CardSlot object. A much more robust way that's the same as yield return BoardManager.Instance.CreateCardInSlot() . Declaration public static IEnumerator CreateCardInSlot(this CardSlot slotToSpawnIn, CardInfo cardInfo, float transitionLength = 0.1F, bool resolveTriggers = true) Parameters Type Name Description DiskCardGame.CardSlot slotToSpawnIn The slot to spawn in. DiskCardGame.CardInfo cardInfo The CardInfo object to spawn in said slot. System.Single transitionLength Time to transition the card to the slot. The longer the time, the longer it will take to be placed at the slot. System.Boolean resolveTriggers Whether or not to activate these triggers, in order: cards on board OtherCardAssignedToSlot, this card ResolveOnBoard, cards on board OtherCardResolve. Returns Type Description System.Collections.IEnumerator The enumeration of the card being placed in the slot. GetAdjacent(CardSlot, Boolean) Get the adjacent slots of the slot that is being accessed. Declaration public static CardSlot GetAdjacent(this CardSlot cardSlot, bool adjacentOnLeft) Parameters Type Name Description DiskCardGame.CardSlot cardSlot The slot that is being accessed. System.Boolean adjacentOnLeft Whether or not to retrieve the slot on the left. Returns Type Description DiskCardGame.CardSlot The list of card slots that is to the left and to the right. Results can be null. GetAdjacentCards(CardSlot) Get the adjacent cards of the slot that is being accessed. Declaration public static List<PlayableCard> GetAdjacentCards(this CardSlot cardSlot) Parameters Type Name Description DiskCardGame.CardSlot cardSlot The slot that is being accessed. Returns Type Description List < DiskCardGame.PlayableCard > The list of Playable Cards that is to the left and to the right of the this slot. GetAdjacentSlots(CardSlot, Boolean) Get the adjacent slots of the slot that is being accessed. Declaration public static List<CardSlot> GetAdjacentSlots(this CardSlot cardSlot, bool removeNulls = false) Parameters Type Name Description DiskCardGame.CardSlot cardSlot The slot that is being accessed. System.Boolean removeNulls If true, remove slots that are null. Returns Type Description List < DiskCardGame.CardSlot > The list of card slots that is to the left and to the right. Results can be null unless removeNulls parameter is set to true. . HasCard(CardSlot, String) Check if the card in the slot has a specific card name. This is primarily useful if you don't have a Trait, Tribe, or other distinct attribute to check the card against. Declaration public static bool HasCard(this CardSlot cardSlot, string cardName) Parameters Type Name Description DiskCardGame.CardSlot cardSlot The slot to check. System.String cardName The name of the card check. Returns Type Description System.Boolean true if the slot has a card and that card has the specific cardName. IsOpponentSlot(CardSlot) Check if the slot is an opponent's slot. Declaration public static bool IsOpponentSlot(this CardSlot cardSlot) Parameters Type Name Description DiskCardGame.CardSlot cardSlot The slot to check. Returns Type Description System.Boolean true if the slot is not a player slot. ResolveCardOnBoard(CardSlot, PlayableCard, Single, Action, Boolean) Resolve a playable card in a specific slot from the CardSlot object. A much more robust way that's the same as yield return BoardManager.Instance.ResolveCardOnBoard() . Declaration public static IEnumerator ResolveCardOnBoard(this CardSlot slotToSpawnIn, PlayableCard playableCard, float tweenLength = 0.1F, Action landOnBoardCallback = null, bool resolveTriggers = true) Parameters Type Name Description DiskCardGame.CardSlot slotToSpawnIn The slot to spawn in. DiskCardGame.PlayableCard playableCard The PlayableCard object to spawn in said slot. System.Single tweenLength Time to transition the card to the slot. The longer the time, the longer it will take to be placed at the slot. Action landOnBoardCallback An action to do after the assignment has completed, but before 'ResolveOnBoard' triggers. System.Boolean resolveTriggers Whether or not to activate these triggers, in order: cards on board OtherCardAssignedToSlot, this card ResolveOnBoard, cards on board OtherCardResolve. Returns Type Description System.Collections.IEnumerator The enumeration of the card being placed in the slot. SelectCards(IEnumerable<CardSlot>, Predicate<PlayableCard>) Retrieve all the PlayableCard objects from the collection of slots provided. Declaration public static IEnumerable<PlayableCard> SelectCards(this IEnumerable<CardSlot> slots, Predicate<PlayableCard> filterOnPredicate = null) Parameters Type Name Description System.Collections.IEnumerable < DiskCardGame.CardSlot > slots Collection of CardSlots. Predicate < DiskCardGame.PlayableCard > filterOnPredicate Predicate to filter each slot's playable card for a condition, if one exists. Returns Type Description System.Collections.IEnumerable < DiskCardGame.PlayableCard > An IEnumerable of PlayableCard from the CardSlots sequence. SelectOpenSlots(IEnumerable<CardSlot>, Predicate<CardSlot>) Retrieve all the CardSlot objects that are not occupied by a PlayableCard object. Declaration public static IEnumerable<CardSlot> SelectOpenSlots(this IEnumerable<CardSlot> slots, Predicate<CardSlot> filterOnPredicate = null) Parameters Type Name Description System.Collections.IEnumerable < DiskCardGame.CardSlot > slots Collection of CardSlots. Predicate < DiskCardGame.CardSlot > filterOnPredicate Predicate to test each slot for a condition. Returns Type Description System.Collections.IEnumerable < DiskCardGame.CardSlot > An IEnumerable of CardSlot that do not have occupying PlayableCards."
  },
  "api/InscryptionAPI.Helpers.Extensions.GameObjectExtensions.html": {
    "href": "api/InscryptionAPI.Helpers.Extensions.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | InscryptionAPI",
    "keywords": "Class GameObjectExtensions Inheritance System.Object GameObjectExtensions Namespace : InscryptionAPI.Helpers.Extensions Assembly : InscryptionAPI.dll Syntax public static class GameObjectExtensions Methods FindChild(GameObject, String) Declaration public static GameObject FindChild(this GameObject parent, string name) Parameters Type Name Description GameObject parent System.String name Returns Type Description GameObject"
  },
  "api/InscryptionAPI.Helpers.Extensions.html": {
    "href": "api/InscryptionAPI.Helpers.Extensions.html",
    "title": "Namespace InscryptionAPI.Helpers.Extensions | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Helpers.Extensions Classes BoardManagerExtensions CardSlotExtensions GameObjectExtensions ListExtensions"
  },
  "api/InscryptionAPI.Helpers.Extensions.ListExtensions.html": {
    "href": "api/InscryptionAPI.Helpers.Extensions.ListExtensions.html",
    "title": "Class ListExtensions | InscryptionAPI",
    "keywords": "Class ListExtensions Inheritance System.Object ListExtensions Namespace : InscryptionAPI.Helpers.Extensions Assembly : InscryptionAPI.dll Syntax public static class ListExtensions Methods GetRandom<T>(List<T>) Declaration public static T GetRandom<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T GetSeededRandom<T>(List<T>, Int32) Declaration public static T GetSeededRandom<T>(this List<T> list, int seed) Parameters Type Name Description List <T> list System.Int32 seed Returns Type Description T Type Parameters Name Description T PopFirst<T>(List<T>) Declaration public static T PopFirst<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T PopLast<T>(List<T>) Declaration public static T PopLast<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description T Type Parameters Name Description T Repeat<T>(T, Int32) Declaration public static List<T> Repeat<T>(this T toRepeat, int times) Parameters Type Name Description T toRepeat System.Int32 times Returns Type Description List <T> Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Helpers.GetEmptyBatterySprite.html": {
    "href": "api/InscryptionAPI.Helpers.GetEmptyBatterySprite.html",
    "title": "Class GetEmptyBatterySprite | InscryptionAPI",
    "keywords": "Class GetEmptyBatterySprite Inheritance System.Object GetEmptyBatterySprite Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax [HarmonyPatch(typeof(PixelResourcesManager), \"Start\")] public static class GetEmptyBatterySprite Fields emptyBatterySprite Declaration public static Sprite emptyBatterySprite Field Value Type Description Sprite"
  },
  "api/InscryptionAPI.Helpers.html": {
    "href": "api/InscryptionAPI.Helpers.html",
    "title": "Namespace InscryptionAPI.Helpers | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Helpers This namespace is dedicated to managing a number of miscellaneous classes that help deal with various resources such as textures, asset bundles, and resource files. Classes AssetBundleHelper CustomFields Allows for an easy way to add custom fields to an object, or to an entire class. DialogueEventGenerator GetEmptyBatterySprite MaterialOverride ResourcesManagerHelpers TextureHelper This class contains a number of helper methods for managing textures. TranspilerHelpers Structs CustomLine Enums TextureHelper.SpriteType Thie is used to indicate what type of sprite you wish to create so that the appropriate size and pivot point can be determined."
  },
  "api/InscryptionAPI.Helpers.MaterialOverride.html": {
    "href": "api/InscryptionAPI.Helpers.MaterialOverride.html",
    "title": "Class MaterialOverride | InscryptionAPI",
    "keywords": "Class MaterialOverride Inheritance System.Object MaterialOverride Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public class MaterialOverride Fields DetailMask Declaration public Texture2D DetailMask Field Value Type Description Texture2D Emission Declaration public Texture2D Emission Field Value Type Description Texture2D Height Declaration public float? Height Field Value Type Description System.Nullable < System.Single > HeightMap Declaration public Texture2D HeightMap Field Value Type Description Texture2D MainTexture Declaration public Texture2D MainTexture Field Value Type Description Texture2D Metallic Declaration public float? Metallic Field Value Type Description System.Nullable < System.Single > MetallicMap Declaration public Texture2D MetallicMap Field Value Type Description Texture2D NormalMap Declaration public Texture2D NormalMap Field Value Type Description Texture2D OcclusionMap Declaration public Texture2D OcclusionMap Field Value Type Description Texture2D OverrideDetailMask Declaration public bool OverrideDetailMask Field Value Type Description System.Boolean OverrideEmission Declaration public bool OverrideEmission Field Value Type Description System.Boolean OverrideHeightMap Declaration public bool OverrideHeightMap Field Value Type Description System.Boolean OverrideMainTexture Declaration public bool OverrideMainTexture Field Value Type Description System.Boolean OverrideMetallicMap Declaration public bool OverrideMetallicMap Field Value Type Description System.Boolean OverrideNormalMap Declaration public bool OverrideNormalMap Field Value Type Description System.Boolean OverrideOcclusionMap Declaration public bool OverrideOcclusionMap Field Value Type Description System.Boolean Smoothness Declaration public float? Smoothness Field Value Type Description System.Nullable < System.Single > Methods ChangeDetailMask(Texture2D) Declaration public MaterialOverride ChangeDetailMask(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride ChangeEmission(Texture2D) Declaration public MaterialOverride ChangeEmission(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride ChangeHeightMap(Texture2D) Declaration public MaterialOverride ChangeHeightMap(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride ChangeMainTexture(Texture2D) Declaration public MaterialOverride ChangeMainTexture(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride ChangeMetallicMap(Texture2D) Declaration public MaterialOverride ChangeMetallicMap(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride ChangeNormalMap(Texture2D) Declaration public MaterialOverride ChangeNormalMap(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride ChangeOcclusionMap(Texture2D) Declaration public MaterialOverride ChangeOcclusionMap(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description MaterialOverride Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Helpers.ResourcesManagerHelpers.html": {
    "href": "api/InscryptionAPI.Helpers.ResourcesManagerHelpers.html",
    "title": "Class ResourcesManagerHelpers | InscryptionAPI",
    "keywords": "Class ResourcesManagerHelpers Inheritance System.Object ResourcesManagerHelpers Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public static class ResourcesManagerHelpers Methods GemCount(Boolean, GemType) Declaration public static int GemCount(bool playerGems, GemType gemToCheck) Parameters Type Name Description System.Boolean playerGems DiskCardGame.GemType gemToCheck Returns Type Description System.Int32 GemsOfType(ResourcesManager, GemType) Declaration public static int GemsOfType(this ResourcesManager instance, GemType gem) Parameters Type Name Description DiskCardGame.ResourcesManager instance DiskCardGame.GemType gem Returns Type Description System.Int32 OpponentHasGems(GemType[]) Declaration public static bool OpponentHasGems(params GemType[] gems) Parameters Type Name Description DiskCardGame.GemType [] gems Returns Type Description System.Boolean OwnerHasGems(Boolean, GemType[]) Declaration public static bool OwnerHasGems(bool playerGems, params GemType[] gems) Parameters Type Name Description System.Boolean playerGems DiskCardGame.GemType [] gems Returns Type Description System.Boolean PlayerHasGems(GemType[]) Declaration public static bool PlayerHasGems(params GemType[] gems) Parameters Type Name Description DiskCardGame.GemType [] gems Returns Type Description System.Boolean RemoveMaxEnergy(ResourcesManager, Int32) Removes a given amount of energy cells, which determines how much energy a player has available at the start of a turn. Affected by 'ResourcesManager.preventNextEnergyLoss'. Declaration public static IEnumerator RemoveMaxEnergy(this ResourcesManager instance, int amount) Parameters Type Name Description DiskCardGame.ResourcesManager instance The ResourcesManager Instance. System.Int32 amount How many energy cells to close. Gets capped to the current number of open energy cells. Returns Type Description System.Collections.IEnumerator RemoveMaxEnergy(ResourcesManager, Int32, Boolean) A variant of RemoveMaxEnergy that can bypass ResourcesManager.PreventNextEnergyLoss. Affected by 'ResourcesManager.preventNextEnergyLoss'. Declaration public static IEnumerator RemoveMaxEnergy(this ResourcesManager instance, int amount, bool preventable) Parameters Type Name Description DiskCardGame.ResourcesManager instance The ResourcesManager Instance. System.Int32 amount How many energy cells to close. Gets capped to the current number of open energy cells. System.Boolean preventable Returns Type Description System.Collections.IEnumerator ShowRemoveMaxEnergy(ResourcesManager, Int32) Declaration public static IEnumerator ShowRemoveMaxEnergy(this ResourcesManager instance, int amount) Parameters Type Name Description DiskCardGame.ResourcesManager instance System.Int32 amount Returns Type Description System.Collections.IEnumerator"
  },
  "api/InscryptionAPI.Helpers.TextureHelper.html": {
    "href": "api/InscryptionAPI.Helpers.TextureHelper.html",
    "title": "Class TextureHelper | InscryptionAPI",
    "keywords": "Class TextureHelper This class contains a number of helper methods for managing textures. Inheritance System.Object TextureHelper Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class TextureHelper Methods CombineTextures(List<Texture2D>, Texture2D, Int32, Int32, Int32, Int32) Combines multiple textures into one, using a tiled approach. Declaration public static Texture2D CombineTextures(List<Texture2D> pieces, Texture2D baseTexture, int xStep = 0, int yStep = 0, int xOffset = 0, int yOffset = 0) Parameters Type Name Description List < Texture2D > pieces The individual textures to combine into the base texture. Texture2D baseTexture The background texture for the combined texture. System.Int32 xStep Used to set the position for individual textures. System.Int32 yStep Used to set the position for individual textures. System.Int32 xOffset Used to set the position for individual textures. System.Int32 yOffset Used to set the position for individual textures. Returns Type Description Texture2D The modified texture (the same Texture references as ). Remarks This helper has a very specific purpose. The pixels in will be iteratively replaced with the pixels in the array. The X position for the i-th texture will be i. The Y position for the i-th texture will be (.Count - i - 1). Note : will be modified in-place! ConvertTexture(Texture2D, TextureHelper.SpriteType, FilterMode) Converts a Unity Texture2D object to a Sprite that conforms to the expectations for the given sprite type. Declaration public static Sprite ConvertTexture(this Texture2D texture, TextureHelper.SpriteType spriteType, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description Texture2D texture The Texture2D object to convert. TextureHelper.SpriteType spriteType The type of sprite to create. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. Returns Type Description Sprite A sprite containing the given texture. ConvertTexture(Texture2D, Nullable<Vector2>) Converts a Unity Texture2D object to a Sprite with the same dimensions as the texture. Declaration public static Sprite ConvertTexture(this Texture2D texture, Vector2? pivot = null) Parameters Type Name Description Texture2D texture The Texture2D object to convert. System.Nullable < Vector2 > pivot The pivot of the sprite. If null/default, the pivot will be the middle of the texture. Returns Type Description Sprite A sprite containing the given texture. DuplicateTexture(Texture2D) Creates an identical copy of a given texture Declaration public static Texture2D DuplicateTexture(Texture2D texture) Parameters Type Name Description Texture2D texture The texture to copy. Returns Type Description Texture2D GetEmissionSprite(Sprite) Declaration public static Sprite GetEmissionSprite(this Sprite sprite) Parameters Type Name Description Sprite sprite Returns Type Description Sprite GetImageAsSprite(String, TextureHelper.SpriteType, FilterMode) Converts an image on disk to a Sprite that conforms to the expectations for the given sprite type. Declaration public static Sprite GetImageAsSprite(string pathCardArt, TextureHelper.SpriteType spriteType, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description System.String pathCardArt The path to the card on disk. This can be relative to the BepInEx plugin path, or can be an absolute (rooted) path. TextureHelper.SpriteType spriteType The type of sprite to create. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. Returns Type Description Sprite A sprite containing the image file on disk. GetImageAsSprite(String, Assembly, TextureHelper.SpriteType, FilterMode) Converts an artwork file stored as a resource in an assembly file to a Sprite that conforms to the expectations for the given sprite type. Declaration public static Sprite GetImageAsSprite(string pathCardArt, Assembly target, TextureHelper.SpriteType spriteType, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description System.String pathCardArt The path to the card on disk. This can be relative to the BepInEx plugin path, or can be an absolute (rooted) path. System.Reflection.Assembly target The assembly to pull the artwork file from. TextureHelper.SpriteType spriteType The type of sprite to create. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. Returns Type Description Sprite A sprite containing the image file from the assembly. GetImageAsTexture(String, Assembly, FilterMode) Converts an artwork file stored as a resource in an assembly file to a Unity Texture2D object. Declaration public static Texture2D GetImageAsTexture(string pathCardArt, Assembly target, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description System.String pathCardArt The name of the artwork file in the assembly. System.Reflection.Assembly target The assembly to pull the artwork file from. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. Returns Type Description Texture2D The image file from the assembly as a Texture2D object. GetImageAsTexture(String, FilterMode) Converts an artwork file on disk to a Unity Texture2D object. Declaration public static Texture2D GetImageAsTexture(string pathCardArt, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description System.String pathCardArt The path to the card on disk. This can be relative to the BepInEx plugin path, or can be an absolute (rooted) path. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. Returns Type Description Texture2D The image file on disk as a Texture2D object. GetResourceBytes(String, Assembly) Reads the contents of an image file in an assembly and returns it as a byte array. Declaration public static byte[] GetResourceBytes(string filename, Assembly target) Parameters Type Name Description System.String filename System.Reflection.Assembly target The assembly to pull the art from. Returns Type Description System.Byte [] The contents of the file in pathCardArt as a byte array. ReadArtworkFileAsBytes(String) Reads the contents of an image file on disk and returns it as a byte array. Declaration public static byte[] ReadArtworkFileAsBytes(string pathCardArt) Parameters Type Name Description System.String pathCardArt The path to the card on disk. This can be relative to the BepInEx plugin path, or can be an absolute (rooted) path. Returns Type Description System.Byte [] The contents of the file in pathCardArt as a byte array. RegisterEmissionForSprite(Sprite, String, TextureHelper.SpriteType, FilterMode) Sets the emissive sprite for a given sprite. This is used when an Act 1 card receives an ability from a card merge. Declaration public static void RegisterEmissionForSprite(this Sprite regularSprite, string pathToArt, TextureHelper.SpriteType spriteType, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description Sprite regularSprite The normal sprite. System.String pathToArt The path to the card art. TextureHelper.SpriteType spriteType The type of sprite to create. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. RegisterEmissionForSprite(Sprite, Sprite) Sets the emissive sprite for a given sprite. This is used when an Act 1 card receives an ability from a card merge. Declaration public static void RegisterEmissionForSprite(this Sprite regularSprite, Sprite emissionSprite) Parameters Type Name Description Sprite regularSprite The normal sprite. Sprite emissionSprite The emissive sprite. RegisterEmissionForSprite(Sprite, Texture2D, TextureHelper.SpriteType, FilterMode) Sets the emissive sprite for a given sprite. This is used when an Act 1 card receives an ability from a card merge. Declaration public static void RegisterEmissionForSprite(this Sprite regularSprite, Texture2D emissiveTexture, TextureHelper.SpriteType spriteType, FilterMode filterMode = FilterMode.Point) Parameters Type Name Description Sprite regularSprite The normal sprite. Texture2D emissiveTexture The emissive texture to register. TextureHelper.SpriteType spriteType The type of sprite to create. FilterMode filterMode Sets the filter mode of the art. Leave this alone unless you know why you're changing it. TryReuseEmission(CardInfo, Sprite) Sets the emissive portrait for the card's alternate portrait using the same emission as the default portrait. Declaration public static void TryReuseEmission(CardInfo info, Sprite alternatePortrait) Parameters Type Name Description DiskCardGame.CardInfo info The card to set the emission for. Sprite alternatePortrait The alternate portrait for the card."
  },
  "api/InscryptionAPI.Helpers.TextureHelper.SpriteType.html": {
    "href": "api/InscryptionAPI.Helpers.TextureHelper.SpriteType.html",
    "title": "Enum TextureHelper.SpriteType | InscryptionAPI",
    "keywords": "Enum TextureHelper.SpriteType Thie is used to indicate what type of sprite you wish to create so that the appropriate size and pivot point can be determined. Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public enum SpriteType Fields Name Description Act2CostDecalLeft The decal used to display card costs in Act 2, on the top-left of the card. Act2CostDecalRight The decal used to display card costs in Act 2, on the top-right of the card. CardPortrait A card's portrait art in Act 1 or Act 3. ChallengeIcon A challenge skull displayed on the challenge UI during the setup of a Kaycee's Mod run. CostDecal The texture that displays the card's cost in Act 1. OversizedCostDecal The large decal used to display multiple/hybrid card costs in Act 1. PixelAbilityIcon An ability icon (sigil) in Act 2. PixelActivatedAbilityIcon An activated ability icon (sigil) in Act 2. PixelDecal The decal used by the API in Act 2, comprising the entire card's dimensions. PixelPortrait A card's portrait art in Act 2. PixelStandardButton The texture for a button in Act 2 (same kind of button used for the hammer and activated sigils). PixelStatIcon A special stat icon in Act 2. StarterDeckIcon The starter deck icon displayed on the challenge UI during the setup on a Kaycee's Mod run. Extension Methods ListExtensions.Repeat<TextureHelper.SpriteType>(Int32)"
  },
  "api/InscryptionAPI.Helpers.TranspilerHelpers.html": {
    "href": "api/InscryptionAPI.Helpers.TranspilerHelpers.html",
    "title": "Class TranspilerHelpers | InscryptionAPI",
    "keywords": "Class TranspilerHelpers Inheritance System.Object TranspilerHelpers Namespace : InscryptionAPI.Helpers Assembly : InscryptionAPI.dll Syntax public static class TranspilerHelpers Methods LogCodeInscryptions(List<CodeInstruction>, String) Declaration public static void LogCodeInscryptions(this List<CodeInstruction> codes, string prefix = null) Parameters Type Name Description List < HarmonyLib.CodeInstruction > codes System.String prefix"
  },
  "api/InscryptionAPI.html": {
    "href": "api/InscryptionAPI.html",
    "title": "Namespace InscryptionAPI | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI The parent namespace for everything contained in the API. Classes InscryptionAPIPlugin"
  },
  "api/InscryptionAPI.InscryptionAPIPlugin.html": {
    "href": "api/InscryptionAPI.InscryptionAPIPlugin.html",
    "title": "Class InscryptionAPIPlugin | InscryptionAPI",
    "keywords": "Class InscryptionAPIPlugin Inheritance System.Object Object Component Behaviour MonoBehaviour BepInEx.BaseUnityPlugin InscryptionAPIPlugin Namespace : InscryptionAPI Assembly : InscryptionAPI.dll Syntax [BepInPlugin(\"cyantist.inscryption.api\", \"InscryptionAPI\", \"2.21.0\")] [HarmonyPatch] public class InscryptionAPIPlugin : BaseUnityPlugin Fields Directory Declaration public static string Directory Field Value Type Description System.String ModGUID Declaration public const string ModGUID = \"cyantist.inscryption.api\" Field Value Type Description System.String ModName Declaration public const string ModName = \"InscryptionAPI\" Field Value Type Description System.String ModVer Declaration public const string ModVer = \"2.21.0\" Field Value Type Description System.String Events ScriptableObjectLoaderLoad Declaration public static event Action<Type> ScriptableObjectLoaderLoad Event Type Type Description Action < Type > Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Items.ConsumableItemManager.html": {
    "href": "api/InscryptionAPI.Items.ConsumableItemManager.html",
    "title": "Class ConsumableItemManager | InscryptionAPI",
    "keywords": "Class ConsumableItemManager Inheritance System.Object ConsumableItemManager Namespace : InscryptionAPI.Items Assembly : InscryptionAPI.dll Syntax public static class ConsumableItemManager Fields NewConsumableItemDatas Declaration public static ReadOnlyCollection<ConsumableItemData> NewConsumableItemDatas Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < DiskCardGame.ConsumableItemData > Methods Add(String, ConsumableItemData) Declaration public static ConsumableItemData Add(string pluginGUID, ConsumableItemData data) Parameters Type Name Description System.String pluginGUID DiskCardGame.ConsumableItemData data Returns Type Description DiskCardGame.ConsumableItemData New(String, String, String, Texture2D, Type, ConsumableItemManager.ModelType) Declaration public static ConsumableItemData New(string pluginGUID, string rulebookName, string rulebookDescription, Texture2D rulebookSprite, Type itemType, ConsumableItemManager.ModelType modelType) Parameters Type Name Description System.String pluginGUID System.String rulebookName System.String rulebookDescription Texture2D rulebookSprite Type itemType ConsumableItemManager.ModelType modelType Returns Type Description DiskCardGame.ConsumableItemData New(String, String, String, Texture2D, Type, ConsumableItemResource) Declaration public static ConsumableItemData New(string pluginGUID, string rulebookName, string rulebookDescription, Texture2D rulebookSprite, Type itemType, ConsumableItemResource resource) Parameters Type Name Description System.String pluginGUID System.String rulebookName System.String rulebookDescription Texture2D rulebookSprite Type itemType ConsumableItemResource resource Returns Type Description DiskCardGame.ConsumableItemData New(String, String, String, Texture2D, Type, GameObject) Declaration public static ConsumableItemData New(string pluginGUID, string rulebookName, string rulebookDescription, Texture2D rulebookSprite, Type itemType, GameObject prefab) Parameters Type Name Description System.String pluginGUID System.String rulebookName System.String rulebookDescription Texture2D rulebookSprite Type itemType GameObject prefab Returns Type Description DiskCardGame.ConsumableItemData NewCardInABottle(String, CardInfo, Texture2D) Declaration public static ConsumableItemData NewCardInABottle(string pluginGUID, CardInfo cardInfo, Texture2D rulebookTexture = null) Parameters Type Name Description System.String pluginGUID DiskCardGame.CardInfo cardInfo Texture2D rulebookTexture Returns Type Description DiskCardGame.ConsumableItemData NewCardInABottle(String, String, Texture2D) Declaration public static ConsumableItemData NewCardInABottle(string pluginGUID, string cardName, Texture2D rulebookTexture = null) Parameters Type Name Description System.String pluginGUID System.String cardName Texture2D rulebookTexture Returns Type Description DiskCardGame.ConsumableItemData RegisterPrefab(String, String, ConsumableItemResource) Declaration public static ConsumableItemManager.ModelType RegisterPrefab(string pluginGUID, string rulebookName, ConsumableItemResource resource) Parameters Type Name Description System.String pluginGUID System.String rulebookName ConsumableItemResource resource Returns Type Description ConsumableItemManager.ModelType"
  },
  "api/InscryptionAPI.Items.ConsumableItemManager.ModelType.html": {
    "href": "api/InscryptionAPI.Items.ConsumableItemManager.ModelType.html",
    "title": "Enum ConsumableItemManager.ModelType | InscryptionAPI",
    "keywords": "Enum ConsumableItemManager.ModelType Namespace : InscryptionAPI.Items Assembly : InscryptionAPI.dll Syntax public enum ModelType Fields Name Description BasicRune BasicRuneWithVeins CardInABottle HoveringRune Extension Methods ListExtensions.Repeat<ConsumableItemManager.ModelType>(Int32)"
  },
  "api/InscryptionAPI.Items.ConsumableItemResource.html": {
    "href": "api/InscryptionAPI.Items.ConsumableItemResource.html",
    "title": "Class ConsumableItemResource | InscryptionAPI",
    "keywords": "Class ConsumableItemResource Inheritance System.Object ResourceLookup ConsumableItemResource Namespace : InscryptionAPI.Items Assembly : InscryptionAPI.dll Syntax public class ConsumableItemResource : ResourceLookup Fields PreSetupCallback Declaration public Action<GameObject, ConsumableItemData> PreSetupCallback Field Value Type Description Action < GameObject , DiskCardGame.ConsumableItemData > Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Items.Extensions.ConsumableItemDataExtensions.html": {
    "href": "api/InscryptionAPI.Items.Extensions.ConsumableItemDataExtensions.html",
    "title": "Class ConsumableItemDataExtensions | InscryptionAPI",
    "keywords": "Class ConsumableItemDataExtensions Inheritance System.Object ConsumableItemDataExtensions Namespace : InscryptionAPI.Items.Extensions Assembly : InscryptionAPI.dll Syntax public static class ConsumableItemDataExtensions Methods CanActivateOutsideBattles(ConsumableItemData) Declaration public static bool CanActivateOutsideBattles(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description System.Boolean Mod Prefix. GetCardWithinBottle(ConsumableItemData) Declaration public static string GetCardWithinBottle(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description System.String The same ConsumableItemData so a chain can continue. GetComponentType(ConsumableItemData) Declaration public static Type GetComponentType(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description Type Mod Prefix. GetExtendedProperty(ConsumableItemData, String) Gets a custom property value from the ConsumableItemData Declaration public static string GetExtendedProperty(this ConsumableItemData data, string propertyName) Parameters Type Name Description DiskCardGame.ConsumableItemData data Card to access. System.String propertyName The name of the property to get the value of. Returns Type Description System.String . GetExtendedPropertyAsBool(ConsumableItemData, String) Gets a custom property as a boolean (can be null) Declaration public static bool? GetExtendedPropertyAsBool(this ConsumableItemData data, string propertyName) Parameters Type Name Description DiskCardGame.ConsumableItemData data Card to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Boolean > Returns the value of the property as a boolean or null if it didn't exist or couldn't be parsed as boolean. GetExtendedPropertyAsFloat(ConsumableItemData, String) Gets a custom property as a float (can by null) Declaration public static float? GetExtendedPropertyAsFloat(this ConsumableItemData data, string propertyName) Parameters Type Name Description DiskCardGame.ConsumableItemData data Card to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Single > Returns the value of the property as a float or null if it didn't exist or couldn't be parsed as float. GetExtendedPropertyAsInt(ConsumableItemData, String) Gets a custom property as an int (can by null) Declaration public static int? GetExtendedPropertyAsInt(this ConsumableItemData data, string propertyName) Parameters Type Name Description DiskCardGame.ConsumableItemData data Card to access. System.String propertyName Property name to get value of. Returns Type Description System.Nullable < System.Int32 > Returns the value of the property as an int or null if it didn't exist or couldn't be parsed as int. GetModPrefix(ConsumableItemData) Declaration public static string GetModPrefix(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description System.String Mod Prefix. GetPrefabModelType(ConsumableItemData) Declaration public static ConsumableItemManager.ModelType GetPrefabModelType(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description ConsumableItemManager.ModelType The same ConsumableItemData so a chain can continue. SetAct1(ConsumableItemData) Sets the item ready to be accessed in act 1 Declaration public static ConsumableItemData SetAct1(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetAct3(ConsumableItemData) Sets the item ready to be accessed in act 3 Declaration public static ConsumableItemData SetAct3(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetAscensionUnlocked(ConsumableItemData) Sets the item ready to be accessed in Ascension Declaration public static ConsumableItemData SetAscensionUnlocked(this ConsumableItemData data) Parameters Type Name Description DiskCardGame.ConsumableItemData data Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetCanActivateOutsideBattles(ConsumableItemData, Boolean) Declaration public static ConsumableItemData SetCanActivateOutsideBattles(this ConsumableItemData data, bool alwaysActivatable) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.Boolean alwaysActivatable Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetCardWithinBottle(ConsumableItemData, String) Sets the card that is contained within a bottle Declaration public static ConsumableItemData SetCardWithinBottle(this ConsumableItemData data, string cardName) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String cardName Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetComponentType(ConsumableItemData, Type) Declaration public static ConsumableItemData SetComponentType(this ConsumableItemData data, Type type) Parameters Type Name Description DiskCardGame.ConsumableItemData data Type type Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetExamineSoundId(ConsumableItemData, String) Declaration public static ConsumableItemData SetExamineSoundId(this ConsumableItemData data, string examineSoundId) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String examineSoundId Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetExtendedProperty(ConsumableItemData, String, Object) Adds a custom property value to the ConsumableItemData. Declaration public static ConsumableItemData SetExtendedProperty(this ConsumableItemData data, string propertyName, object value) Parameters Type Name Description DiskCardGame.ConsumableItemData data Card to access. System.String propertyName The name of the property to set. System.Object value The value of the property. Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetLearnItemDescription(ConsumableItemData, String) Declaration public static ConsumableItemData SetLearnItemDescription(this ConsumableItemData data, string description) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String description Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetNotRandomlyGiven(ConsumableItemData, Boolean) Declaration public static ConsumableItemData SetNotRandomlyGiven(this ConsumableItemData data, bool notRandomlyGiven) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.Boolean notRandomlyGiven Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetPickupSoundId(ConsumableItemData, String) Declaration public static ConsumableItemData SetPickupSoundId(this ConsumableItemData data, string pickupSoundId) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String pickupSoundId Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetPlacedSoundId(ConsumableItemData, String) Declaration public static ConsumableItemData SetPlacedSoundId(this ConsumableItemData data, string placedSoundId) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String placedSoundId Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetPowerLevel(ConsumableItemData, Int32) Declaration public static ConsumableItemData SetPowerLevel(this ConsumableItemData data, int powerLevel) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.Int32 powerLevel Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetPrefabID(ConsumableItemData, String) Declaration public static ConsumableItemData SetPrefabID(this ConsumableItemData data, string prefabID) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String prefabID Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetRegionSpecific(ConsumableItemData, Boolean) Declaration public static ConsumableItemData SetRegionSpecific(this ConsumableItemData data, bool regionSpecific) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.Boolean regionSpecific Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetRulebookCategory(ConsumableItemData, AbilityMetaCategory) Declaration public static ConsumableItemData SetRulebookCategory(this ConsumableItemData data, AbilityMetaCategory rulebookCategory) Parameters Type Name Description DiskCardGame.ConsumableItemData data DiskCardGame.AbilityMetaCategory rulebookCategory Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetRulebookDescription(ConsumableItemData, String) Declaration public static ConsumableItemData SetRulebookDescription(this ConsumableItemData data, string rulebookDescription) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String rulebookDescription Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetRulebookName(ConsumableItemData, String) Declaration public static ConsumableItemData SetRulebookName(this ConsumableItemData data, string rulebookName) Parameters Type Name Description DiskCardGame.ConsumableItemData data System.String rulebookName Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue. SetRulebookSprite(ConsumableItemData, Sprite) Declaration public static ConsumableItemData SetRulebookSprite(this ConsumableItemData data, Sprite rulebookSprite) Parameters Type Name Description DiskCardGame.ConsumableItemData data Sprite rulebookSprite Returns Type Description DiskCardGame.ConsumableItemData The same ConsumableItemData so a chain can continue."
  },
  "api/InscryptionAPI.Items.Extensions.html": {
    "href": "api/InscryptionAPI.Items.Extensions.html",
    "title": "Namespace InscryptionAPI.Items.Extensions | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Items.Extensions Classes ConsumableItemDataExtensions"
  },
  "api/InscryptionAPI.Items.html": {
    "href": "api/InscryptionAPI.Items.html",
    "title": "Namespace InscryptionAPI.Items | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Items This namespace is dedicated to managing custom items, which can be obtained and used any act except Act 2. Items provide unique effects when activated and are consumed on use. Classes ConsumableItemManager ConsumableItemResource ResourceLookup Define how an asset should be retrieved so we can fetch it at any time. Enums ConsumableItemManager.ModelType"
  },
  "api/InscryptionAPI.Items.ResourceLookup.html": {
    "href": "api/InscryptionAPI.Items.ResourceLookup.html",
    "title": "Class ResourceLookup | InscryptionAPI",
    "keywords": "Class ResourceLookup Define how an asset should be retrieved so we can fetch it at any time. Inheritance System.Object ResourceLookup ConsumableItemResource Namespace : InscryptionAPI.Items Assembly : InscryptionAPI.dll Syntax public class ResourceLookup : ICloneable Properties Prefab Declaration public GameObject Prefab { get; } Property Value Type Description GameObject ResourceBankID Declaration public string ResourceBankID { get; } Property Value Type Description System.String ResourcePath Declaration public string ResourcePath { get; } Property Value Type Description System.String Methods Clone() Declaration public object Clone() Returns Type Description System.Object FromAssetBundle(String, String) Declaration public void FromAssetBundle(string assetBundlePath, string assetBundlePrefabName) Parameters Type Name Description System.String assetBundlePath System.String assetBundlePrefabName FromAssetBundle(AssetBundle, String) Declaration public void FromAssetBundle(AssetBundle assetBundle, string assetBundlePrefabName) Parameters Type Name Description AssetBundle assetBundle System.String assetBundlePrefabName FromAssetBundleInAssembly<T>(String, String) Declaration public void FromAssetBundleInAssembly<T>(string assetBundlePath, string assetBundlePrefabName) Parameters Type Name Description System.String assetBundlePath System.String assetBundlePrefabName Type Parameters Name Description T FromPrefab(GameObject) Declaration public void FromPrefab(GameObject prefab) Parameters Type Name Description GameObject prefab FromResourceBank(String) Declaration public void FromResourceBank(string resourceBankID) Parameters Type Name Description System.String resourceBankID FromResources(String) Declaration public void FromResources(string resourcePath) Parameters Type Name Description System.String resourcePath Get<T>() Declaration public virtual T Get<T>() where T : UnityObject Returns Type Description T Type Parameters Name Description T ToString() Declaration public override string ToString() Returns Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Localizing.html": {
    "href": "api/InscryptionAPI.Localizing.html",
    "title": "Namespace InscryptionAPI.Localizing | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Localizing This namespace is dedicated to managing custom language localisations. Allows for adding custom languages not supported by Unity, or adding translations for pre-existing languages not supported by base Inscryption. Classes LocalizationManager LocalizationManager.CustomLanguage LocalizationManager.CustomTranslation Enums LocalizationManager.FontReplacementType The list of Fonts used in Inscryption."
  },
  "api/InscryptionAPI.Localizing.LocalizationManager.CustomLanguage.html": {
    "href": "api/InscryptionAPI.Localizing.LocalizationManager.CustomLanguage.html",
    "title": "Class LocalizationManager.CustomLanguage | InscryptionAPI",
    "keywords": "Class LocalizationManager.CustomLanguage Inheritance System.Object LocalizationManager.CustomLanguage Namespace : InscryptionAPI.Localizing Assembly : InscryptionAPI.dll Syntax public class CustomLanguage Fields Language Declaration public Language Language Field Value Type Description Language LanguageCode Declaration public string LanguageCode Field Value Type Description System.String LanguageName Declaration public string LanguageName Field Value Type Description System.String PathToStringTable Declaration public string PathToStringTable Field Value Type Description System.String PluginGUID Declaration public string PluginGUID Field Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Localizing.LocalizationManager.CustomTranslation.html": {
    "href": "api/InscryptionAPI.Localizing.LocalizationManager.CustomTranslation.html",
    "title": "Class LocalizationManager.CustomTranslation | InscryptionAPI",
    "keywords": "Class LocalizationManager.CustomTranslation Inheritance System.Object LocalizationManager.CustomTranslation Namespace : InscryptionAPI.Localizing Assembly : InscryptionAPI.dll Syntax public class CustomTranslation Fields PluginGUID Declaration public string PluginGUID Field Value Type Description System.String Translation Declaration public Localization.Translation Translation Field Value Type Description Localization.Translation Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Localizing.LocalizationManager.FontReplacementType.html": {
    "href": "api/InscryptionAPI.Localizing.LocalizationManager.FontReplacementType.html",
    "title": "Enum LocalizationManager.FontReplacementType | InscryptionAPI",
    "keywords": "Enum LocalizationManager.FontReplacementType The list of Fonts used in Inscryption. Namespace : InscryptionAPI.Localizing Assembly : InscryptionAPI.dll Syntax public enum FontReplacementType Fields Name Description DaggerSquare HeavyWeight Liberation Marksman Misc3D Extension Methods ListExtensions.Repeat<LocalizationManager.FontReplacementType>(Int32)"
  },
  "api/InscryptionAPI.Localizing.LocalizationManager.html": {
    "href": "api/InscryptionAPI.Localizing.LocalizationManager.html",
    "title": "Class LocalizationManager | InscryptionAPI",
    "keywords": "Class LocalizationManager Inheritance System.Object LocalizationManager Namespace : InscryptionAPI.Localizing Assembly : InscryptionAPI.dll Syntax public static class LocalizationManager Fields AllLanguageButtonText Declaration public static string[] AllLanguageButtonText Field Value Type Description System.String [] AllLanguageNames Declaration public static string[] AllLanguageNames Field Value Type Description System.String [] AllLanguages Declaration public static List<LocalizationManager.CustomLanguage> AllLanguages Field Value Type Description List < LocalizationManager.CustomLanguage > CustomTranslations Declaration public static List<LocalizationManager.CustomTranslation> CustomTranslations Field Value Type Description List < LocalizationManager.CustomTranslation > NewLanguages Declaration public static List<LocalizationManager.CustomLanguage> NewLanguages Field Value Type Description List < LocalizationManager.CustomLanguage > OnLanguageLoaded Declaration public static Action<Language> OnLanguageLoaded Field Value Type Description Action < Language > Methods Add(LocalizationManager.CustomTranslation) Declaration public static LocalizationManager.CustomTranslation Add(LocalizationManager.CustomTranslation translation) Parameters Type Name Description LocalizationManager.CustomTranslation translation Returns Type Description LocalizationManager.CustomTranslation AddFontReplacement(Language, FontReplacement) Declaration public static void AddFontReplacement(Language language, FontReplacement replacement) Parameters Type Name Description Language language FontReplacement replacement CodeToLanguage(String) Retrieves the LanguageCode with the given LanguageCode. Declaration public static Language CodeToLanguage(string code) Parameters Type Name Description System.String code Returns Type Description Language ExportAllToCSV() Declaration public static void ExportAllToCSV() Get(String, String) Declaration public static LocalizationManager.CustomTranslation Get(string englishText, string id) Parameters Type Name Description System.String englishText System.String id Returns Type Description LocalizationManager.CustomTranslation GetFontReplacementForFont(LocalizationManager.FontReplacementType, Font, TMP_FontAsset) Declaration public static FontReplacement GetFontReplacementForFont(LocalizationManager.FontReplacementType type, Font font = null, TMP_FontAsset tmpFont = null) Parameters Type Name Description LocalizationManager.FontReplacementType type Font font TMPro.TMP_FontAsset tmpFont Returns Type Description FontReplacement LanguageToCode(Language) Retrieves the LanguageCode for the given Language. Declaration public static string LanguageToCode(Language language) Parameters Type Name Description Language language Returns Type Description System.String New(String, String, String, String, Language) Declaration public static LocalizationManager.CustomTranslation New(string pluginGUID, string id, string englishString, string translatedString, Language language) Parameters Type Name Description System.String pluginGUID System.String id System.String englishString System.String translatedString Language language Returns Type Description LocalizationManager.CustomTranslation NewLanguage(String, String, String, String, String, List<FontReplacement>) Declaration public static Language NewLanguage(string pluginGUID, string languageName, string code, string resetButtonText, string stringTablePath = null, List<FontReplacement> fontReplacements = null) Parameters Type Name Description System.String pluginGUID System.String languageName System.String code System.String resetButtonText System.String stringTablePath List < FontReplacement > fontReplacements Returns Type Description Language Translate(String, String, String, String, Language) Adds a translation for a string into the provided Language. Declaration public static LocalizationManager.CustomTranslation Translate(string pluginGUID, string id, string englishString, string translatedString, Language language) Parameters Type Name Description System.String pluginGUID The GUID of the mod adding the translation. System.String id A unique identifier for this translation. System.String englishString The original string. System.String translatedString The original string translated into the target language. Language language The language this translation is for. Returns Type Description LocalizationManager.CustomTranslation A CustomTranslation object corresponding to the created translation."
  },
  "api/InscryptionAPI.Masks.CustomMask.html": {
    "href": "api/InscryptionAPI.Masks.CustomMask.html",
    "title": "Class CustomMask | InscryptionAPI",
    "keywords": "Class CustomMask Inheritance System.Object CustomMask Namespace : InscryptionAPI.Masks Assembly : InscryptionAPI.dll Syntax public class CustomMask Constructors CustomMask(String, String, LeshyAnimationController.Mask, Boolean) Declaration public CustomMask(string GUID, string Name, LeshyAnimationController.Mask ID, bool isOverride) Parameters Type Name Description System.String GUID System.String Name DiskCardGame.LeshyAnimationController.Mask ID System.Boolean isOverride Fields GUID Declaration public readonly string GUID Field Value Type Description System.String ID Declaration public readonly LeshyAnimationController.Mask ID Field Value Type Description DiskCardGame.LeshyAnimationController.Mask Name Declaration public readonly string Name Field Value Type Description System.String Override Declaration public readonly bool Override Field Value Type Description System.Boolean Properties BehaviourType Declaration public Type BehaviourType { get; } Property Value Type Description Type MaterialOverrides Declaration public List<MaterialOverride> MaterialOverrides { get; } Property Value Type Description List < MaterialOverride > ModelType Declaration public MaskManager.ModelType ModelType { get; } Property Value Type Description MaskManager.ModelType Methods AddMaterialOverride(MaterialOverride) Declaration public CustomMask AddMaterialOverride(MaterialOverride materialOverride) Parameters Type Name Description MaterialOverride materialOverride Returns Type Description CustomMask SetMaskBehaviour(Type) Declaration public CustomMask SetMaskBehaviour(Type type) Parameters Type Name Description Type type Returns Type Description CustomMask SetModelType(MaskManager.ModelType) Declaration public CustomMask SetModelType(MaskManager.ModelType modelType) Parameters Type Name Description MaskManager.ModelType modelType Returns Type Description CustomMask ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Masks.html": {
    "href": "api/InscryptionAPI.Masks.html",
    "title": "Namespace InscryptionAPI.Masks | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Masks This namespace is dedicated to managing custom masks, which are worn by Leshy during boss battles. Classes CustomMask MaskBehaviour MaskManager Enums MaskManager.ModelType"
  },
  "api/InscryptionAPI.Masks.MaskBehaviour.html": {
    "href": "api/InscryptionAPI.Masks.MaskBehaviour.html",
    "title": "Class MaskBehaviour | InscryptionAPI",
    "keywords": "Class MaskBehaviour Inheritance System.Object Object Component Behaviour MonoBehaviour MaskBehaviour Namespace : InscryptionAPI.Masks Assembly : InscryptionAPI.dll Syntax public class MaskBehaviour : MonoBehaviour Fields maskData Declaration protected CustomMask maskData Field Value Type Description CustomMask Methods Initialize(CustomMask) Declaration public virtual void Initialize(CustomMask mask) Parameters Type Name Description CustomMask mask OverrideDetailMask(MaterialOverride, Material) Declaration protected virtual void OverrideDetailMask(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideEmission(MaterialOverride, Material) Declaration protected virtual void OverrideEmission(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideHeightMap(MaterialOverride, Material) Declaration protected virtual void OverrideHeightMap(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideHeightValue(MaterialOverride, Material) Declaration protected virtual void OverrideHeightValue(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideMainTexture(MaterialOverride, Material) Declaration protected virtual void OverrideMainTexture(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideMetallic(MaterialOverride, Material) Declaration protected virtual void OverrideMetallic(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideMetallicMap(MaterialOverride, Material) Declaration protected virtual void OverrideMetallicMap(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideNormalMap(MaterialOverride, Material) Declaration protected virtual void OverrideNormalMap(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideOcclusionMap(MaterialOverride, Material) Declaration protected virtual void OverrideOcclusionMap(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideSmoothnessValue(MaterialOverride, Material) Declaration protected virtual void OverrideSmoothnessValue(MaterialOverride materialOverride, Material material) Parameters Type Name Description MaterialOverride materialOverride Material material OverrideTexture(CustomMask) Declaration protected virtual void OverrideTexture(CustomMask mask) Parameters Type Name Description CustomMask mask Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Masks.MaskManager.html": {
    "href": "api/InscryptionAPI.Masks.MaskManager.html",
    "title": "Class MaskManager | InscryptionAPI",
    "keywords": "Class MaskManager Inheritance System.Object MaskManager Namespace : InscryptionAPI.Masks Assembly : InscryptionAPI.dll Syntax public static class MaskManager Fields BaseMasks Declaration public static List<CustomMask> BaseMasks Field Value Type Description List < CustomMask > CustomMasks Declaration public static List<CustomMask> CustomMasks Field Value Type Description List < CustomMask > NoMask Declaration public static LeshyAnimationController.Mask NoMask Field Value Type Description DiskCardGame.LeshyAnimationController.Mask TypeToPrefabLookup Declaration public static Dictionary<MaskManager.ModelType, ResourceLookup> TypeToPrefabLookup Field Value Type Description Dictionary < MaskManager.ModelType , ResourceLookup > Methods Add(String, String, String) Declaration public static CustomMask Add(string guid, string name, string texturePath = null) Parameters Type Name Description System.String guid System.String name System.String texturePath Returns Type Description CustomMask AddCustomMask(String, String, LeshyAnimationController.Mask, MaskManager.ModelType, Boolean) Adds a custom mask to the game so you can tell leshy to put it on his face. Typically during a boss fight. Declaration public static CustomMask AddCustomMask(string guid, string name, LeshyAnimationController.Mask maskType, MaskManager.ModelType modelType, bool isOverride) Parameters Type Name Description System.String guid GUID of your mod. System.String name Name of the mask. DiskCardGame.LeshyAnimationController.Mask maskType The mask we want to add so we cna tell leshy to put on that specific mask. MaskManager.ModelType modelType The model the mask will use. System.Boolean isOverride . Returns Type Description CustomMask . AddRandom(String, String, LeshyAnimationController.Mask, String) Declaration public static CustomMask AddRandom(string guid, string name, LeshyAnimationController.Mask maskType, string texturePath = null) Parameters Type Name Description System.String guid System.String name DiskCardGame.LeshyAnimationController.Mask maskType System.String texturePath Returns Type Description CustomMask Override(String, String, LeshyAnimationController.Mask, String) Declaration public static CustomMask Override(string guid, string name, LeshyAnimationController.Mask maskType, string texturePath = null) Parameters Type Name Description System.String guid System.String name DiskCardGame.LeshyAnimationController.Mask maskType System.String texturePath Returns Type Description CustomMask RegisterPrefab(String, String, ResourceLookup) Declaration public static MaskManager.ModelType RegisterPrefab(string pluginGUID, string prefabName, ResourceLookup resource) Parameters Type Name Description System.String pluginGUID System.String prefabName ResourceLookup resource Returns Type Description MaskManager.ModelType"
  },
  "api/InscryptionAPI.Masks.MaskManager.ModelType.html": {
    "href": "api/InscryptionAPI.Masks.MaskManager.ModelType.html",
    "title": "Enum MaskManager.ModelType | InscryptionAPI",
    "keywords": "Enum MaskManager.ModelType Namespace : InscryptionAPI.Masks Assembly : InscryptionAPI.dll Syntax public enum ModelType Fields Name Description Angler Doctor FlatMask Prospector Sphere Trader Trapper Woodcarver Extension Methods ListExtensions.Repeat<MaskManager.ModelType>(Int32)"
  },
  "api/InscryptionAPI.Nodes.And.html": {
    "href": "api/InscryptionAPI.Nodes.And.html",
    "title": "Class And | InscryptionAPI",
    "keywords": "Class And Selection condition that is satisfied when both of its target conditions are satisfied. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition And Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class And : NodeData.SelectionCondition Constructors And(NodeData.SelectionCondition, NodeData.SelectionCondition) Creates an \"And\" selection condition and sets its target conditions to selectionCondition1 and selectionCondition2. Declaration public And(NodeData.SelectionCondition selectionCondition1, NodeData.SelectionCondition selectionCondition2) Parameters Type Name Description DiskCardGame.NodeData.SelectionCondition selectionCondition1 The target condition 1 for the created \"And\" selection condition. DiskCardGame.NodeData.SelectionCondition selectionCondition2 The target condition 2 for the created \"And\" selection condition. Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.ChallengeIsActive.html": {
    "href": "api/InscryptionAPI.Nodes.ChallengeIsActive.html",
    "title": "Class ChallengeIsActive | InscryptionAPI",
    "keywords": "Class ChallengeIsActive Inheritance System.Object DiskCardGame.NodeData.SelectionCondition ChallengeIsActive Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class ChallengeIsActive : NodeData.SelectionCondition Constructors ChallengeIsActive(AscensionChallenge, Boolean) Declaration public ChallengeIsActive(AscensionChallenge challenge, bool exclude) Parameters Type Name Description DiskCardGame.AscensionChallenge challenge System.Boolean exclude Fields challenge Declaration public AscensionChallenge challenge Field Value Type Description DiskCardGame.AscensionChallenge exclude Declaration public bool exclude Field Value Type Description System.Boolean Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.CustomCardChoiceNodeSequencer.html": {
    "href": "api/InscryptionAPI.Nodes.CustomCardChoiceNodeSequencer.html",
    "title": "Class CustomCardChoiceNodeSequencer | InscryptionAPI",
    "keywords": "Class CustomCardChoiceNodeSequencer Core class for custom card choice nodes that implements all node-related interfaces for you. ONLY WORKS IN ACT 1. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.CardChoicesSequencer CustomCardChoiceNodeSequencer Implements ICustomNodeSequencer IInherit IDestroyOnEnd IDoNotReturnToMapOnEnd Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public abstract class CustomCardChoiceNodeSequencer : CardChoicesSequencer, ICustomNodeSequencer, IInherit, IDestroyOnEnd, IDoNotReturnToMapOnEnd Properties DeckPileInheritsOffsets True if deck pile should inherit PositionOffset and RotationOffset together with DeckPilePositionOffset and DeckPileRotationOffset. Defaults to false. Declaration public virtual bool DeckPileInheritsOffsets { get; } Property Value Type Description System.Boolean DeckPilePositionOffset Position offset for the deck pile. Declaration public virtual Vector3 DeckPilePositionOffset { get; } Property Value Type Description Vector3 DeckPileRotationOffset Rotation offset for the deck pile. Declaration public virtual Quaternion DeckPileRotationOffset { get; } Property Value Type Description Quaternion InheritTarget CardChoicesSequencer this should inherit. Defaults to the normal card choice. Declaration public virtual CardChoicesSequencer InheritTarget { get; } Property Value Type Description DiskCardGame.CardChoicesSequencer PositionOffset Position offset from the position of the inherit target. Declaration public virtual Vector3 PositionOffset { get; } Property Value Type Description Vector3 RotationOffset Rotation offset from the rotation of the inherit target. Declaration public virtual Quaternion RotationOffset { get; } Property Value Type Description Quaternion ShouldInherit True if this should inherit from InheritTarget. Defaults to true. Declaration public virtual bool ShouldInherit { get; } Property Value Type Description System.Boolean Methods DoCustomSequence(CustomSpecialNodeData) Trigger the custom node sequence. Declaration public abstract IEnumerator DoCustomSequence(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. Returns Type Description System.Collections.IEnumerator . Inherit(CustomSpecialNodeData) Inherits this from InheritTarget, copying the deck pile, the selectable card prefab and gamepad grid. Declaration public virtual void Inherit(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. ShouldDestroyOnEnd(CustomSpecialNodeData) Returns true if this sequencer should be destroyed after ending. Defaults to false. Declaration public virtual bool ShouldDestroyOnEnd(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. Returns Type Description System.Boolean True if this sequencer should be destroyed after ending. ShouldNotReturnToMapOnEnd(CustomSpecialNodeData) Returns true if this sequencer shouldn't return the player to the map after ending. Defaults to false. Declaration public virtual bool ShouldNotReturnToMapOnEnd(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. Returns Type Description System.Boolean True if this sequencer shouldn't return the player to the map after ending. Implements ICustomNodeSequencer IInherit IDestroyOnEnd IDoNotReturnToMapOnEnd Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.CustomNodeSequencer.html": {
    "href": "api/InscryptionAPI.Nodes.CustomNodeSequencer.html",
    "title": "Class CustomNodeSequencer | InscryptionAPI",
    "keywords": "Class CustomNodeSequencer Core class for miscellaneous non-card related nodes that implements all node-related interfaces for you. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour CustomNodeSequencer Implements ICustomNodeSequencer IInherit IDestroyOnEnd IDoNotReturnToMapOnEnd Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public abstract class CustomNodeSequencer : ManagedBehaviour, ICustomNodeSequencer, IInherit, IDestroyOnEnd, IDoNotReturnToMapOnEnd Methods DoCustomSequence(CustomSpecialNodeData) Trigger the custom node sequence. Declaration public abstract IEnumerator DoCustomSequence(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. Returns Type Description System.Collections.IEnumerator . Inherit(CustomSpecialNodeData) Used to inherit from another node sequencer and setup everything needed for the sequence to work. Declaration public virtual void Inherit(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. ShouldDestroyOnEnd(CustomSpecialNodeData) Returns true if this sequencer should be destroyed after ending. Defaults to false. Declaration public virtual bool ShouldDestroyOnEnd(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. Returns Type Description System.Boolean True if this sequencer should be destroyed after ending. ShouldNotReturnToMapOnEnd(CustomSpecialNodeData) Returns true if this sequencer shouldn't return the player to the map after ending. Defaults to false. Declaration public virtual bool ShouldNotReturnToMapOnEnd(CustomSpecialNodeData node) Parameters Type Name Description CustomSpecialNodeData node Node that triggered this sequence. Returns Type Description System.Boolean True if this sequencer shouldn't return the player to the map after ending. Implements ICustomNodeSequencer IInherit IDestroyOnEnd IDoNotReturnToMapOnEnd Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.CustomPreviousNodesContent.html": {
    "href": "api/InscryptionAPI.Nodes.CustomPreviousNodesContent.html",
    "title": "Class CustomPreviousNodesContent | InscryptionAPI",
    "keywords": "Class CustomPreviousNodesContent Selection condition that is satisfied when the previous nodes either contain or don't contain a custom node with a specific name and guid. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition CustomPreviousNodesContent Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class CustomPreviousNodesContent : NodeData.SelectionCondition Constructors CustomPreviousNodesContent(String, String, Boolean) Creates an \"CustomPreviousNodesContent\" selection condition and sets its target guid, name and required value. Declaration public CustomPreviousNodesContent(string guid, string name, bool doesContain) Parameters Type Name Description System.String guid The mod guid of the node this selection condition will be looking for. System.String name The name of the node this selection condition will be looking for. System.Boolean doesContain If true, this condition will be satisfied if the previous nodes do contain the node that this condition is looking for. If false, it will be satisfied if the previous nodes don't contain it. Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.CustomPreviousRowContent.html": {
    "href": "api/InscryptionAPI.Nodes.CustomPreviousRowContent.html",
    "title": "Class CustomPreviousRowContent | InscryptionAPI",
    "keywords": "Class CustomPreviousRowContent Selection condition that is satisfied when the previous row of nodes either contains or doesn't contain a custom node with a specific name and guid. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition CustomPreviousRowContent Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class CustomPreviousRowContent : NodeData.SelectionCondition Constructors CustomPreviousRowContent(String, String, Boolean) Creates an \"CustomPreviousRowContent\" selection condition and sets its target guid, name and required value. Declaration public CustomPreviousRowContent(string guid, string name, bool doesContain) Parameters Type Name Description System.String guid The mod guid of the node this selection condition will be looking for. System.String name The name of the node this selection condition will be looking for. System.Boolean doesContain If true, this condition will be satisfied if the previous row of nodes does contain the node that this condition is looking for. If false, it will be satisfied if the previous row of nodes doesn't contain it. Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.CustomSpecialNodeData.html": {
    "href": "api/InscryptionAPI.Nodes.CustomSpecialNodeData.html",
    "title": "Class CustomSpecialNodeData | InscryptionAPI",
    "keywords": "Class CustomSpecialNodeData Inheritance System.Object DiskCardGame.MapElementData DiskCardGame.NodeData DiskCardGame.SpecialNodeData CustomSpecialNodeData Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class CustomSpecialNodeData : SpecialNodeData Constructors CustomSpecialNodeData(NewNodeManager.FullNode) Declaration public CustomSpecialNodeData(NewNodeManager.FullNode node) Parameters Type Name Description NewNodeManager.FullNode node Fields guid Declaration public readonly string guid Field Value Type Description System.String name Declaration public readonly string name Field Value Type Description System.String Properties ForceGenerationConditions Declaration public override List<NodeData.SelectionCondition> ForceGenerationConditions { get; } Property Value Type Description List < DiskCardGame.NodeData.SelectionCondition > Overrides DiskCardGame.NodeData.ForceGenerationConditions GenerationPrerequisiteConditions Declaration public override List<NodeData.SelectionCondition> GenerationPrerequisiteConditions { get; } Property Value Type Description List < DiskCardGame.NodeData.SelectionCondition > Overrides DiskCardGame.NodeData.GenerationPrerequisiteConditions Node FullNode this NodeData originated from. Declaration public NewNodeManager.FullNode Node { get; } Property Value Type Description NewNodeManager.FullNode PrefabPath Declaration public override string PrefabPath { get; } Property Value Type Description System.String Overrides DiskCardGame.NodeData.PrefabPath Methods Get(String) Gets value in runtime data using key. Declaration public object Get(string key) Parameters Type Name Description System.String key The key to the value. Returns Type Description System.Object If runtime data contains valuem, key. If it does not, returns the default. Get<T>(String) Gets value in runtime data using key. Declaration public T Get<T>(string key) Parameters Type Name Description System.String key The key to the value. Returns Type Description T If runtime data contains value, key. If it does not, returns the default. Type Parameters Name Description T Set(String, Object) Saves value in a dictionary of runtime data using key. Declaration public void Set(string key, object value) Parameters Type Name Description System.String key The key to the value. System.Object value The value to save. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.EasyAccess.html": {
    "href": "api/InscryptionAPI.Nodes.EasyAccess.html",
    "title": "Class EasyAccess | InscryptionAPI",
    "keywords": "Class EasyAccess Provides easy access to act 1 node sequencers. Inheritance System.Object EasyAccess Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public static class EasyAccess Properties BoulderChoice Returns the sequencer for the Prospector boulder strike node. Declaration public static BoulderChoiceSequencer BoulderChoice { get; } Property Value Type Description DiskCardGame.BoulderChoiceSequencer BuildTotem Returns the sequencer for the Woodcarver build totem node. Declaration public static BuildTotemSequencer BuildTotem { get; } Property Value Type Description DiskCardGame.BuildTotemSequencer BuyPelts Returns the sequencer for the Trapper buy pelts node. Declaration public static BuyPeltsSequencer BuyPelts { get; } Property Value Type Description DiskCardGame.BuyPeltsSequencer CardMerge Returns the sequencer for the sacrifice stone card merge node. Declaration public static CardMergeSequencer CardMerge { get; } Property Value Type Description DiskCardGame.CardMergeSequencer CardRemove Returns the sequencer for the Bone Lord card remove node. Declaration public static CardRemoveSequencer CardRemove { get; } Property Value Type Description DiskCardGame.CardRemoveSequencer CardSingleChoices Returns the sequencer for normal card choices. Declaration public static CardSingleChoicesSequencer CardSingleChoices { get; } Property Value Type Description DiskCardGame.CardSingleChoicesSequencer CardStatBoost Returns the sequencer for the campfire card stat boost node. Declaration public static CardStatBoostSequencer CardStatBoost { get; } Property Value Type Description DiskCardGame.CardStatBoostSequencer ChooseEyeball Returns the sequencer for the Special Dagger choose eyeball special event. Declaration public static ChooseEyeballSequencer ChooseEyeball { get; } Property Value Type Description DiskCardGame.ChooseEyeballSequencer CopyCard Returns the sequencer for the Kaycee's Mod-specific Goobert copy card node. Declaration public static CopyCardSequencer CopyCard { get; } Property Value Type Description DiskCardGame.CopyCardSequencer DeckTrial Returns the sequencer for the cave deck trial node. Declaration public static DeckTrialSequencer DeckTrial { get; } Property Value Type Description DiskCardGame.DeckTrialSequencer DuplicateMerge Returns the sequencer for the Mycologists duplicate card merge node. Declaration public static DuplicateMergeSequencer DuplicateMerge { get; } Property Value Type Description DiskCardGame.DuplicateMergeSequencer GainConsumables Returns the sequencer for the backpack gain items node. Declaration public static GainConsumablesSequencer GainConsumables { get; } Property Value Type Description DiskCardGame.GainConsumablesSequencer NodeHandler Returns the instance of SpecialNodeHandler. Declaration public static SpecialNodeHandler NodeHandler { get; } Property Value Type Description DiskCardGame.SpecialNodeHandler RareCardChoices Returns the sequencer for the post-boss rare card choice special event. Declaration public static RareCardChoicesSequencer RareCardChoices { get; } Property Value Type Description DiskCardGame.RareCardChoicesSequencer TradePelts Returns the sequencer for the Trader trade pelts node. Declaration public static TradePeltsSequencer TradePelts { get; } Property Value Type Description DiskCardGame.TradePeltsSequencer VictoryFeast Returns the sequencer for post-Leshy victory feast special event. Declaration public static VictoryFeastSequencer VictoryFeast { get; } Property Value Type Description DiskCardGame.VictoryFeastSequencer"
  },
  "api/InscryptionAPI.Nodes.False.html": {
    "href": "api/InscryptionAPI.Nodes.False.html",
    "title": "Class False | InscryptionAPI",
    "keywords": "Class False Selection condition that is never satisfied. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition False Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class False : NodeData.SelectionCondition Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.Func.html": {
    "href": "api/InscryptionAPI.Nodes.Func.html",
    "title": "Class Func | InscryptionAPI",
    "keywords": "Class Func Selection condition that is satisfied when the delegate given to it returns true. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition Func Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class Func : NodeData.SelectionCondition Constructors Func(Func<Int32, List<NodeData>, Boolean>) Creates a \"Func\" selection condition and sets its target delegate to del Declaration public Func(Func<int, List<NodeData>, bool> del) Parameters Type Name Description InscryptionAPI.Nodes.Func < System.Int32 , List < DiskCardGame.NodeData >, System.Boolean > del The target delegate for the condition. Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.GenerationType.html": {
    "href": "api/InscryptionAPI.Nodes.GenerationType.html",
    "title": "Enum GenerationType | InscryptionAPI",
    "keywords": "Enum GenerationType Flags for different types of generation. Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public enum GenerationType Fields Name Description None Nodes flagged with this will not generate. PostBoss Nodes flagged with this will always appear after the boss if all of the generation prerequisites are satisfied. PreBoss Nodes flagged with this will always appear before the boss if all of the generation prerequisites are satisfied. RegionStart Nodes flagged with this will always appear at the start of each map if all of the generation prerequisites are satisfied. SpecialCardChoice Nodes flagged with this will be added to the pool of \"special card choices\" such as the Prospector, the Trader and deck trials. SpecialEvent Nodes flagged with this will be added to the pool of \"special events\" such as the campfire, the sacrifice stones and the Mycologists. Extension Methods ListExtensions.Repeat<GenerationType>(Int32)"
  },
  "api/InscryptionAPI.Nodes.html": {
    "href": "api/InscryptionAPI.Nodes.html",
    "title": "Namespace InscryptionAPI.Nodes | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Nodes This namespace is dedicated to managing custom map nodes. Map nodes need a special sequencer, which controls the game logic when visiting a node. A couple template sequencers are provided in this namespace. Classes And Selection condition that is satisfied when both of its target conditions are satisfied. ChallengeIsActive CustomCardChoiceNodeSequencer Core class for custom card choice nodes that implements all node-related interfaces for you. ONLY WORKS IN ACT 1. CustomNodeSequencer Core class for miscellaneous non-card related nodes that implements all node-related interfaces for you. CustomPreviousNodesContent Selection condition that is satisfied when the previous nodes either contain or don't contain a custom node with a specific name and guid. CustomPreviousRowContent Selection condition that is satisfied when the previous row of nodes either contains or doesn't contain a custom node with a specific name and guid. CustomSpecialNodeData EasyAccess Provides easy access to act 1 node sequencers. False Selection condition that is never satisfied. Func Selection condition that is satisfied when the delegate given to it returns true. NewNodeManager The new version of NodeManager, used for more advanced node work. NewNodeManager.FullNode Represents a new node added by the API. Not Selection condition that is satisfied when the target condition given to it is not satisfied. NumChallengesOfTypeActive True Selection condition that is always satisfied. Interfaces ICustomNodeSequencer Interface for triggering node sequences. IDestroyOnEnd Interface for destroying the node sequencer at the end. IDoNotReturnToMapOnEnd Interface for not returning to the map after the node sequencer ends. IInherit Interface for inheriting from other node sequencers and setup before the node sequence starts. Enums GenerationType Flags for different types of generation."
  },
  "api/InscryptionAPI.Nodes.ICustomNodeSequencer.html": {
    "href": "api/InscryptionAPI.Nodes.ICustomNodeSequencer.html",
    "title": "Interface ICustomNodeSequencer | InscryptionAPI",
    "keywords": "Interface ICustomNodeSequencer Interface for triggering node sequences. Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public interface ICustomNodeSequencer Methods DoCustomSequence(CustomSpecialNodeData) Trigger the custom node sequence. Declaration IEnumerator DoCustomSequence(CustomSpecialNodeData nodeData) Parameters Type Name Description CustomSpecialNodeData nodeData Node that triggered this sequence. Returns Type Description System.Collections.IEnumerator . Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.IDestroyOnEnd.html": {
    "href": "api/InscryptionAPI.Nodes.IDestroyOnEnd.html",
    "title": "Interface IDestroyOnEnd | InscryptionAPI",
    "keywords": "Interface IDestroyOnEnd Interface for destroying the node sequencer at the end. Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public interface IDestroyOnEnd Methods ShouldDestroyOnEnd(CustomSpecialNodeData) If this returns true, the node sequencer will be destroyed at the end. Declaration bool ShouldDestroyOnEnd(CustomSpecialNodeData nodeData) Parameters Type Name Description CustomSpecialNodeData nodeData Node that triggered this sequence. Returns Type Description System.Boolean . Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.IDoNotReturnToMapOnEnd.html": {
    "href": "api/InscryptionAPI.Nodes.IDoNotReturnToMapOnEnd.html",
    "title": "Interface IDoNotReturnToMapOnEnd | InscryptionAPI",
    "keywords": "Interface IDoNotReturnToMapOnEnd Interface for not returning to the map after the node sequencer ends. Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public interface IDoNotReturnToMapOnEnd Methods ShouldNotReturnToMapOnEnd(CustomSpecialNodeData) If this returns true, the player will not be returned to the map after the node sequencer ends Declaration bool ShouldNotReturnToMapOnEnd(CustomSpecialNodeData nodeData) Parameters Type Name Description CustomSpecialNodeData nodeData Node that triggered this sequence. Returns Type Description System.Boolean . Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.IInherit.html": {
    "href": "api/InscryptionAPI.Nodes.IInherit.html",
    "title": "Interface IInherit | InscryptionAPI",
    "keywords": "Interface IInherit Interface for inheriting from other node sequencers and setup before the node sequence starts. Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public interface IInherit Methods Inherit(CustomSpecialNodeData) Used to inherit from another node sequencer and setup everything needed for the sequence to work. Declaration void Inherit(CustomSpecialNodeData nodeData) Parameters Type Name Description CustomSpecialNodeData nodeData Node that triggered this sequence. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.NewNodeManager.FullNode.html": {
    "href": "api/InscryptionAPI.Nodes.NewNodeManager.FullNode.html",
    "title": "Class NewNodeManager.FullNode | InscryptionAPI",
    "keywords": "Class NewNodeManager.FullNode Represents a new node added by the API. Inheritance System.Object NewNodeManager.FullNode Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class FullNode Fields forceGenerationConditions Prerequisites for forcing the node generation. If all generation prerequisites and force generation conditions are met, this node will always generate in place of other nodes of the same generation type. Declaration public List<NodeData.SelectionCondition> forceGenerationConditions Field Value Type Description List < DiskCardGame.NodeData.SelectionCondition > generationPrerequisites Prerequisites for the node generating. If at least one of them is not met, the node won't be generated. Declaration public List<NodeData.SelectionCondition> generationPrerequisites Field Value Type Description List < DiskCardGame.NodeData.SelectionCondition > generationType Flags that affect the way the node generates. Declaration public GenerationType generationType Field Value Type Description GenerationType guid Guid of the mod this node came from. Declaration public string guid Field Value Type Description System.String name Name of the node. Declaration public string name Field Value Type Description System.String nodeAnimation Animation frames for the node object on the map. If null or empty, the animation frames of the map object won't be affected. Declaration public List<Texture2D> nodeAnimation Field Value Type Description List < Texture2D > nodePrefab Prefab for the node object. If null, a default node object will be created and modified instead. Declaration public GameObject nodePrefab Field Value Type Description GameObject nodeSequencerType Type for the node sequencer. If null, it will try to get the sequencer type from the sequencer prefab instead. Declaration public Type nodeSequencerType Field Value Type Description Type onPostNodeGeneration Triggers after the node object has been added to the map. Can be used to modify it. Declaration public Action<CustomSpecialNodeData, MapNode2D> onPostNodeGeneration Field Value Type Description Action < CustomSpecialNodeData , DiskCardGame.MapNode2D > onPreNodeGeneration Triggers when the node gets created, but before the actual node objects gets added to the map. Can be used for writing runtime information. Declaration public Action<CustomSpecialNodeData> onPreNodeGeneration Field Value Type Description Action < CustomSpecialNodeData > sequencerPrefab Prefab for the node sequencer. If null, an empty object with the sequencer type will be generated instead. Declaration public GameObject sequencerPrefab Field Value Type Description GameObject Methods GetSequencerType() Gets the sequencer type for this node. Declaration public Type GetSequencerType() Returns Type Description Type The sequencer type for this node. IsValidSequencerType() Returns true if the sequencer type for this nod is a valid sequencer type (not null, not abstract, is subclass of Component and has the ICustomNodeSequencer interface). Declaration public bool IsValidSequencerType() Returns Type Description System.Boolean True if the sequencer type for this nod is a valid sequencer type (not null, not abstract, is subclass of Component and has the ICustomNodeSequencer interface). SequencerTypeIsValid(Type) Returns true if type is a valid sequencer type (not null, not abstract, is subclass of Component and has the ICustomNodeSequencer interface). Declaration public static bool SequencerTypeIsValid(Type type) Parameters Type Name Description Type type Type to check. Returns Type Description System.Boolean True if type is a valid sequencer type (not null, not abstract, is subclass of Component and has the ICustomNodeSequencer interface). SetForceGenerationConditions(List<NodeData.SelectionCondition>) Sets the force generation conditions for this node. Declaration public NewNodeManager.FullNode SetForceGenerationConditions(List<NodeData.SelectionCondition> newForceGenerationConditions) Parameters Type Name Description List < DiskCardGame.NodeData.SelectionCondition > newForceGenerationConditions Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetGenerationPrerequisites(List<NodeData.SelectionCondition>) Sets the generation prerequisites for this node. Declaration public NewNodeManager.FullNode SetGenerationPrerequisites(List<NodeData.SelectionCondition> newGenerationPrerequisites) Parameters Type Name Description List < DiskCardGame.NodeData.SelectionCondition > newGenerationPrerequisites New force generation conditions for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetGenerationType(GenerationType) Sets the generation type for this node. Declaration public NewNodeManager.FullNode SetGenerationType(GenerationType newGenerationType) Parameters Type Name Description GenerationType newGenerationType The new generation type for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetGuid(String) Sets the mod guid for this node. Declaration public NewNodeManager.FullNode SetGuid(string newGuid) Parameters Type Name Description System.String newGuid The new mod guid for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetName(String) Sets this node's name. Declaration public NewNodeManager.FullNode SetName(string newName) Parameters Type Name Description System.String newName The new name for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetNodeAnimation(List<Texture2D>) Sets the animation frames for this node. Declaration public NewNodeManager.FullNode SetNodeAnimation(List<Texture2D> newNodeAnimation) Parameters Type Name Description List < Texture2D > newNodeAnimation The new animation frames for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetNodePrefab(GameObject) Sets the node prefab for this node. Declaration public NewNodeManager.FullNode SetNodePrefab(GameObject newNodePrefab) Parameters Type Name Description GameObject newNodePrefab The new node prefab for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetNodeSequencerType(Type) Sets the sequencer type for this node. Declaration public NewNodeManager.FullNode SetNodeSequencerType(Type newNodeSequencerType) Parameters Type Name Description Type newNodeSequencerType The new sequencer type for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetNodeSequencerType<T>() Sets the sequencer type for this node. Declaration public NewNodeManager.FullNode SetNodeSequencerType<T>() where T : ICustomNodeSequencer Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. Type Parameters Name Description T The new sequencer type for this node. SetOnPostNodeGeneration(Action<CustomSpecialNodeData, MapNode2D>) Sets the \"On Post Node Generation\" action for this node. Declaration public NewNodeManager.FullNode SetOnPostNodeGeneration(Action<CustomSpecialNodeData, MapNode2D> newOnPostNodeGeneration) Parameters Type Name Description Action < CustomSpecialNodeData , DiskCardGame.MapNode2D > newOnPostNodeGeneration The new \"OnPostNodeGeneration\" action for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetOnPreNodeGeneration(Action<CustomSpecialNodeData>) Sets the \"On Pre Node Generation\" action for this node. Declaration public NewNodeManager.FullNode SetOnPreNodeGeneration(Action<CustomSpecialNodeData> newOnPreNodeGeneration) Parameters Type Name Description Action < CustomSpecialNodeData > newOnPreNodeGeneration The new \"On Pre Node Generation\" action for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. SetSequencerPrefab(GameObject) Sets the sequencer prefab for this node. Declaration public NewNodeManager.FullNode SetSequencerPrefab(GameObject newSequencerPrefab) Parameters Type Name Description GameObject newSequencerPrefab The new sequencer prefab for this node. Returns Type Description NewNodeManager.FullNode This node, for method chaining purposes. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.NewNodeManager.html": {
    "href": "api/InscryptionAPI.Nodes.NewNodeManager.html",
    "title": "Class NewNodeManager | InscryptionAPI",
    "keywords": "Class NewNodeManager The new version of NodeManager, used for more advanced node work. Inheritance System.Object NewNodeManager Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public static class NewNodeManager Fields NewNodes A collection of all new nodes added using the API. Declaration public static readonly ReadOnlyCollection<NewNodeManager.FullNode> NewNodes Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < NewNodeManager.FullNode > Methods New(String, String, GenerationType, Type, List<Texture2D>, List<NodeData.SelectionCondition>, List<NodeData.SelectionCondition>, Action<CustomSpecialNodeData>, Action<CustomSpecialNodeData, MapNode2D>, GameObject, GameObject) Creates a new node. Declaration public static NewNodeManager.FullNode New(string guid, string name, GenerationType generationType = GenerationType.None, Type nodeSequencerType = null, List<Texture2D> nodeAnimation = null, List<NodeData.SelectionCondition> generationPrerequisites = null, List<NodeData.SelectionCondition> forceGenerationConditions = null, Action<CustomSpecialNodeData> onPreGeneration = null, Action<CustomSpecialNodeData, MapNode2D> onPostGeneration = null, GameObject sequencerPrefab = null, GameObject nodePrefab = null) Parameters Type Name Description System.String guid The guid of the mod the node comes from. System.String name The name of the node. GenerationType generationType The generation flags for the node. Type nodeSequencerType The node sequencer type for the node. List < Texture2D > nodeAnimation The animation frames for the node. List < DiskCardGame.NodeData.SelectionCondition > generationPrerequisites The generation prerequisites for the node. List < DiskCardGame.NodeData.SelectionCondition > forceGenerationConditions The force generation conditions for the node. Action < CustomSpecialNodeData > onPreGeneration The action that triggers when the node is created, but before the node object is added to the map. Action < CustomSpecialNodeData , DiskCardGame.MapNode2D > onPostGeneration The action that triggers after the node object is added to the map. GameObject sequencerPrefab The sequencer prefab for the node. GameObject nodePrefab The node object prefab for the node. Returns Type Description NewNodeManager.FullNode The created node. New<T>(String, String, GenerationType, List<Texture2D>, List<NodeData.SelectionCondition>, List<NodeData.SelectionCondition>, Action<CustomSpecialNodeData>, Action<CustomSpecialNodeData, MapNode2D>, GameObject, GameObject) Creates a new node. Declaration public static NewNodeManager.FullNode New<T>(string guid, string name, GenerationType generationType = GenerationType.None, List<Texture2D> nodeAnimation = null, List<NodeData.SelectionCondition> generationPrerequisites = null, List<NodeData.SelectionCondition> forceGenerationConditions = null, Action<CustomSpecialNodeData> onPreGeneration = null, Action<CustomSpecialNodeData, MapNode2D> onPostGeneration = null, GameObject sequencerPrefab = null, GameObject nodePrefab = null) where T : ICustomNodeSequencer Parameters Type Name Description System.String guid The guid of the mod the node comes from. System.String name The name of the node. GenerationType generationType The generation flags for the node. List < Texture2D > nodeAnimation The animation frames for the node. List < DiskCardGame.NodeData.SelectionCondition > generationPrerequisites The generation prerequisites for the node. List < DiskCardGame.NodeData.SelectionCondition > forceGenerationConditions The force generation conditions for the node. Action < CustomSpecialNodeData > onPreGeneration The action that triggers when the node is created, but before the node object is added to the map. Action < CustomSpecialNodeData , DiskCardGame.MapNode2D > onPostGeneration The action that triggers after the node object is added to the map. GameObject sequencerPrefab The sequencer prefab for the node. GameObject nodePrefab The node object prefab for the node. Returns Type Description NewNodeManager.FullNode The created node. Type Parameters Name Description T The node sequencer type for the node."
  },
  "api/InscryptionAPI.Nodes.Not.html": {
    "href": "api/InscryptionAPI.Nodes.Not.html",
    "title": "Class Not | InscryptionAPI",
    "keywords": "Class Not Selection condition that is satisfied when the target condition given to it is not satisfied. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition Not Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class Not : NodeData.SelectionCondition Constructors Not(NodeData.SelectionCondition) Creates a \"Not\" selection condition and sets its target condition to selectionCondition. Declaration public Not(NodeData.SelectionCondition selectionCondition) Parameters Type Name Description DiskCardGame.NodeData.SelectionCondition selectionCondition The target condition for the created \"Not\" selection condition. Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.NumChallengesOfTypeActive.html": {
    "href": "api/InscryptionAPI.Nodes.NumChallengesOfTypeActive.html",
    "title": "Class NumChallengesOfTypeActive | InscryptionAPI",
    "keywords": "Class NumChallengesOfTypeActive Inheritance System.Object DiskCardGame.NodeData.SelectionCondition NumChallengesOfTypeActive Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class NumChallengesOfTypeActive : NodeData.SelectionCondition Constructors NumChallengesOfTypeActive(AscensionChallenge, Int32, Boolean) Declaration public NumChallengesOfTypeActive(AscensionChallenge challenge, int numChallenges, bool greaterThanNumActive) Parameters Type Name Description DiskCardGame.AscensionChallenge challenge System.Int32 numChallenges System.Boolean greaterThanNumActive Fields challenge Declaration public AscensionChallenge challenge Field Value Type Description DiskCardGame.AscensionChallenge greaterThanNumActive Declaration public bool greaterThanNumActive Field Value Type Description System.Boolean numChallenges Declaration public int numChallenges Field Value Type Description System.Int32 Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Nodes.True.html": {
    "href": "api/InscryptionAPI.Nodes.True.html",
    "title": "Class True | InscryptionAPI",
    "keywords": "Class True Selection condition that is always satisfied. Inheritance System.Object DiskCardGame.NodeData.SelectionCondition True Namespace : InscryptionAPI.Nodes Assembly : InscryptionAPI.dll Syntax public class True : NodeData.SelectionCondition Methods Satisfied(Int32, List<NodeData>) Declaration public override bool Satisfied(int gridY, List<NodeData> previousNodes) Parameters Type Name Description System.Int32 gridY List < DiskCardGame.NodeData > previousNodes Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Pelts.Extensions.html": {
    "href": "api/InscryptionAPI.Pelts.Extensions.html",
    "title": "Namespace InscryptionAPI.Pelts.Extensions | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Pelts.Extensions Classes PeltExtensions"
  },
  "api/InscryptionAPI.Pelts.Extensions.PeltExtensions.html": {
    "href": "api/InscryptionAPI.Pelts.Extensions.PeltExtensions.html",
    "title": "Class PeltExtensions | InscryptionAPI",
    "keywords": "Class PeltExtensions Inheritance System.Object PeltExtensions Namespace : InscryptionAPI.Pelts.Extensions Assembly : InscryptionAPI.dll Syntax public static class PeltExtensions Methods SetBuyPrice(PeltManager.PeltData, Int32, Int32) Sets the pelt's base price, and optionally sets its maximum price. Declaration public static PeltManager.PeltData SetBuyPrice(this PeltManager.PeltData peltData, int baseBuyPrice, int maxBuyPrice = 0) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.Int32 baseBuyPrice The base price of the pelt before calculations occur. System.Int32 maxBuyPrice The highest price the pelt can be offered for - only considers values above 0. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetBuyPriceAdjustment(PeltManager.PeltData, Func<Int32, Int32>) Sets the function used to determine how this pelt's price will increase across a run. Declaration public static PeltManager.PeltData SetBuyPriceAdjustment(this PeltManager.PeltData peltData, Func<int, int> buyPriceAdjustment) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. Func < System.Int32 , System.Int32 > buyPriceAdjustment Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetBuyPriceModifiers(PeltManager.PeltData, Int32, Int32) Sets the buy price modifiers for when Trapper and Trader have been defeated or when the Expensive Pelts challenge is active. Declaration public static PeltManager.PeltData SetBuyPriceModifiers(this PeltManager.PeltData peltData, int bossPriceCut = 2, int challengePriceHike = 2) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.Int32 bossPriceCut The price divider for when the Trapper and Trader have been defeated. Default value halves the price. System.Int32 challengePriceHike The price multiplier for when the Expensive Pelts challenge is active. Default value doubles the price. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetCardChoices(PeltManager.PeltData, Func<List<CardInfo>>) Sets the function used to determine what cards can be offered by the Trader in exchange for this pelt. Declaration public static PeltManager.PeltData SetCardChoices(this PeltManager.PeltData peltData, Func<List<CardInfo>> getCardChoices) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. Func < List < DiskCardGame.CardInfo >> getCardChoices Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetIsSoldByTrapper(PeltManager.PeltData, Boolean) Sets whether the pelt can be bought from the Trapper. Declaration public static PeltManager.PeltData SetIsSoldByTrapper(this PeltManager.PeltData peltData, bool soldByTrapper = true) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.Boolean soldByTrapper Whether the pelt should be sellable by the Trapper. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetMaxBuyPrice(PeltManager.PeltData, Int32) Sets the pelt's max possible price. Declaration public static PeltManager.PeltData SetMaxBuyPrice(this PeltManager.PeltData peltData, int maxBuyPrice) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.Int32 maxBuyPrice The highest price the pelt can be offered for - only considers values above 0r. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetModifyCardChoiceAtTrader(PeltManager.PeltData, Action<CardInfo>) Sets the function used to change individual cards offered at the trader. Example: Add a decal to all cards Declaration public static PeltManager.PeltData SetModifyCardChoiceAtTrader(this PeltManager.PeltData peltData, Action<CardInfo> modifyCardChoiceAtTrader) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. Action < DiskCardGame.CardInfo > modifyCardChoiceAtTrader The Func used to change a card at the trader. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetNumberOfTraderChoices(PeltManager.PeltData, Int32) Sets the number of card choices the Trader will present to the player in exchange for this pelt. Declaration public static PeltManager.PeltData SetNumberOfTraderChoices(this PeltManager.PeltData peltData, int numOfChoices) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.Int32 numOfChoices Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetPluginGuid(PeltManager.PeltData, String) Sets the PeltData's pluginGuid (this is done automatically so only use this if you know what you're doing!). Declaration public static PeltManager.PeltData SetPluginGuid(this PeltManager.PeltData peltData, string pluginGuid) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.String pluginGuid The GUID of the plugin this pelt is associated with. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue. SetTierName(PeltManager.PeltData, String) Sets the name used by the Trader when trading this pelt to them. Also used to determine the eventId of the corresponding DialogueEvent. Declaration public static PeltManager.PeltData SetTierName(this PeltManager.PeltData peltData, string tierName) Parameters Type Name Description PeltManager.PeltData peltData The PeltData to access. System.String tierName The name that will be spoken by the Trader and used to reference the custom dialogue event. Returns Type Description PeltManager.PeltData The same PeltData so a chain can continue."
  },
  "api/InscryptionAPI.Pelts.html": {
    "href": "api/InscryptionAPI.Pelts.html",
    "title": "Namespace InscryptionAPI.Pelts | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Pelts This namespace is dedicated to managing custom pelt data NOT pelt cards. Custom pelt data is used by the Trapper and Trader. Classes PeltManager PeltManager.PeltData"
  },
  "api/InscryptionAPI.Pelts.Patches.BuyPeltsSequencer_GiveFreePeltSequence.html": {
    "href": "api/InscryptionAPI.Pelts.Patches.BuyPeltsSequencer_GiveFreePeltSequence.html",
    "title": "Class BuyPeltsSequencer_GiveFreePeltSequence | InscryptionAPI",
    "keywords": "Class BuyPeltsSequencer_GiveFreePeltSequence Inheritance System.Object BuyPeltsSequencer_GiveFreePeltSequence Namespace : InscryptionAPI.Pelts.Patches Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public class BuyPeltsSequencer_GiveFreePeltSequence Methods ChangeFreeCard(CardInfo) Declaration public static CardInfo ChangeFreeCard(CardInfo currentFreeCard) Parameters Type Name Description DiskCardGame.CardInfo currentFreeCard Returns Type Description DiskCardGame.CardInfo Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Pelts.Patches.html": {
    "href": "api/InscryptionAPI.Pelts.Patches.html",
    "title": "Namespace InscryptionAPI.Pelts.Patches | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Pelts.Patches Classes BuyPeltsSequencer_GiveFreePeltSequence TradePeltsSequencer_CreatePeltCards TradePeltsSequencer_TradePelts"
  },
  "api/InscryptionAPI.Pelts.Patches.TradePeltsSequencer_CreatePeltCards.html": {
    "href": "api/InscryptionAPI.Pelts.Patches.TradePeltsSequencer_CreatePeltCards.html",
    "title": "Class TradePeltsSequencer_CreatePeltCards | InscryptionAPI",
    "keywords": "Class TradePeltsSequencer_CreatePeltCards Inheritance System.Object TradePeltsSequencer_CreatePeltCards Namespace : InscryptionAPI.Pelts.Patches Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public class TradePeltsSequencer_CreatePeltCards Methods NumPelts(Int32, Int32) Returns the number of Pelts to display during the sequence. Declaration public static int NumPelts(int tier, int cardChoiceCount) Parameters Type Name Description System.Int32 tier The tier/index of the Pelt we're trading. System.Int32 cardChoiceCount How many card choices will be shown for this Pelt. Returns Type Description System.Int32 Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Pelts.Patches.TradePeltsSequencer_TradePelts.html": {
    "href": "api/InscryptionAPI.Pelts.Patches.TradePeltsSequencer_TradePelts.html",
    "title": "Class TradePeltsSequencer_TradePelts | InscryptionAPI",
    "keywords": "Class TradePeltsSequencer_TradePelts Inheritance System.Object TradePeltsSequencer_TradePelts Namespace : InscryptionAPI.Pelts.Patches Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public class TradePeltsSequencer_TradePelts Methods CentreCreateTradeCards(TradePeltsSequencer, List<CardInfo>, Int32, Boolean) Centres trade cards when the amount offered isn't 4 or 8. Declaration public static IEnumerator CentreCreateTradeCards(TradePeltsSequencer __instance, List<CardInfo> cards, int cardsPerRow, bool rareCards) Parameters Type Name Description DiskCardGame.TradePeltsSequencer __instance List < DiskCardGame.CardInfo > cards System.Int32 cardsPerRow System.Boolean rareCards Returns Type Description System.Collections.IEnumerator Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Pelts.PeltManager.html": {
    "href": "api/InscryptionAPI.Pelts.PeltManager.html",
    "title": "Class PeltManager | InscryptionAPI",
    "keywords": "Class PeltManager Inheritance System.Object PeltManager Namespace : InscryptionAPI.Pelts Assembly : InscryptionAPI.dll Syntax public static class PeltManager Methods Add(PeltManager.PeltData) Adds a CustomPeltData to the game, enabling it to be usable with the Trapper and Trader. Declaration public static void Add(PeltManager.PeltData data) Parameters Type Name Description PeltManager.PeltData data The CustomPeltData to add. AllPeltsAvailableAtTrader() Declaration public static List<PeltManager.PeltData> AllPeltsAvailableAtTrader() Returns Type Description List < PeltManager.PeltData > GetCostOfPelt(String) Declaration public static int GetCostOfPelt(string peltName) Parameters Type Name Description System.String peltName Returns Type Description System.Int32 GetPelt(String) Declaration public static PeltManager.PeltData GetPelt(string peltName) Parameters Type Name Description System.String peltName Returns Type Description PeltManager.PeltData GetTierNameFromData(PeltManager.PeltData) Declaration public static string GetTierNameFromData(PeltManager.PeltData peltData) Parameters Type Name Description PeltManager.PeltData peltData Returns Type Description System.String GetTierNameFromPelt(String) Declaration public static string GetTierNameFromPelt(string cardName) Parameters Type Name Description System.String cardName Returns Type Description System.String New(String, CardInfo, Func<List<CardInfo>>, Int32, Int32, Int32) Creates a new instance of CustomPeltData then adds it to the game. Declaration public static PeltManager.PeltData New(string pluginGuid, CardInfo peltCardInfo, Func<List<CardInfo>> getCardChoices, int baseBuyPrice, int extraAbilitiesToAdd = 0, int choicesOfferedByTrader = 8) Parameters Type Name Description System.String pluginGuid GUID of the mod adding this pelt. DiskCardGame.CardInfo peltCardInfo The CardInfo for the actual pelt card. Func < List < DiskCardGame.CardInfo >> getCardChoices The list of possible cards the Trader will offer for this pelt. System.Int32 baseBuyPrice The starting price of this pelt when buying from the Trapper. System.Int32 extraAbilitiesToAdd The number of extra sigils card choices will have when trading this pelt to the Trader. System.Int32 choicesOfferedByTrader How many cards to offer the player when trading the pelt. Returns Type Description PeltManager.PeltData The newly created CustomPeltData so a chain can continue. New(String, CardInfo, Int32, Int32, Int32, Func<List<CardInfo>>) Declaration public static PeltManager.PeltData New(string pluginGuid, CardInfo peltCardInfo, int baseBuyPrice, int extraAbilitiesToAdd, int choicesOfferedByTrader, Func<List<CardInfo>> getCardChoices) Parameters Type Name Description System.String pluginGuid DiskCardGame.CardInfo peltCardInfo System.Int32 baseBuyPrice System.Int32 extraAbilitiesToAdd System.Int32 choicesOfferedByTrader Func < List < DiskCardGame.CardInfo >> getCardChoices Returns Type Description PeltManager.PeltData"
  },
  "api/InscryptionAPI.Pelts.PeltManager.PeltData.html": {
    "href": "api/InscryptionAPI.Pelts.PeltManager.PeltData.html",
    "title": "Class PeltManager.PeltData | InscryptionAPI",
    "keywords": "Class PeltManager.PeltData Inheritance System.Object PeltManager.PeltData Namespace : InscryptionAPI.Pelts Assembly : InscryptionAPI.dll Syntax public class PeltData Fields baseBuyPrice Declaration public int baseBuyPrice Field Value Type Description System.Int32 bossDefeatedPriceReduction Declaration public int bossDefeatedPriceReduction Field Value Type Description System.Int32 BuyPriceAdjustment Declaration public Func<int, int> BuyPriceAdjustment Field Value Type Description Func < System.Int32 , System.Int32 > CardChoices Declaration public Func<List<CardInfo>> CardChoices Field Value Type Description Func < List < DiskCardGame.CardInfo >> choicesOfferedByTrader Declaration public int choicesOfferedByTrader Field Value Type Description System.Int32 expensivePeltsPriceMultiplier Declaration public int expensivePeltsPriceMultiplier Field Value Type Description System.Int32 extraAbilitiesToAdd Declaration public int extraAbilitiesToAdd Field Value Type Description System.Int32 isSoldByTrapper Declaration public bool isSoldByTrapper Field Value Type Description System.Boolean maxBuyPrice Declaration public int maxBuyPrice Field Value Type Description System.Int32 ModifyCardChoiceAtTrader Declaration public Action<CardInfo> ModifyCardChoiceAtTrader Field Value Type Description Action < DiskCardGame.CardInfo > peltCardName Declaration public string peltCardName Field Value Type Description System.String peltTierName Declaration public string peltTierName Field Value Type Description System.String pluginGuid Declaration public string pluginGuid Field Value Type Description System.String Properties BuyPrice Declaration public virtual int BuyPrice { get; } Property Value Type Description System.Int32 Extension Methods ListExtensions.Repeat<T>(T, Int32) PeltExtensions.SetPluginGuid(PeltManager.PeltData, String) PeltExtensions.SetBuyPrice(PeltManager.PeltData, Int32, Int32) PeltExtensions.SetMaxBuyPrice(PeltManager.PeltData, Int32) PeltExtensions.SetBuyPriceModifiers(PeltManager.PeltData, Int32, Int32) PeltExtensions.SetBuyPriceAdjustment(PeltManager.PeltData, Func<Int32, Int32>) PeltExtensions.SetModifyCardChoiceAtTrader(PeltManager.PeltData, Action<CardInfo>) PeltExtensions.SetIsSoldByTrapper(PeltManager.PeltData, Boolean) PeltExtensions.SetNumberOfTraderChoices(PeltManager.PeltData, Int32) PeltExtensions.SetCardChoices(PeltManager.PeltData, Func<List<CardInfo>>) PeltExtensions.SetTierName(PeltManager.PeltData, String)"
  },
  "api/InscryptionAPI.PixelCard.GBCPackManager.html": {
    "href": "api/InscryptionAPI.PixelCard.GBCPackManager.html",
    "title": "Class GBCPackManager | InscryptionAPI",
    "keywords": "Class GBCPackManager Inheritance System.Object GBCPackManager Namespace : InscryptionAPI.PixelCard Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class GBCPackManager Events ModifyGBCPacks This event runs every time a GBC Pack is opened. By adding listeners to this event, you can modify the possible choices after non-GBCPack and singleton cards have been removed. Declaration public static event Func<List<CardInfo>, List<CardInfo>> ModifyGBCPacks Event Type Type Description Func < List < DiskCardGame.CardInfo >, List < DiskCardGame.CardInfo >>"
  },
  "api/InscryptionAPI.PixelCard.html": {
    "href": "api/InscryptionAPI.PixelCard.html",
    "title": "Namespace InscryptionAPI.PixelCard | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.PixelCard This namespace is dedicated to managing a few special classes that expand on Act 2 card functionality. Classes GBCPackManager PixelAppearanceBehaviour PixelCardManager PixelCardManager.PixelDecalData PixelGemificationBorder"
  },
  "api/InscryptionAPI.PixelCard.PixelAppearanceBehaviour.html": {
    "href": "api/InscryptionAPI.PixelCard.PixelAppearanceBehaviour.html",
    "title": "Class PixelAppearanceBehaviour | InscryptionAPI",
    "keywords": "Class PixelAppearanceBehaviour Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.CardAppearanceBehaviour PixelAppearanceBehaviour Namespace : InscryptionAPI.PixelCard Assembly : InscryptionAPI.dll Syntax public class PixelAppearanceBehaviour : CardAppearanceBehaviour Methods ApplyAppearance() Declaration public override void ApplyAppearance() Overrides DiskCardGame.CardAppearanceBehaviour.ApplyAppearance() OnAppearanceApplied() Declaration public virtual void OnAppearanceApplied() OverrideBackground() Declaration public virtual Sprite OverrideBackground() Returns Type Description Sprite OverridePixelPortrait() Declaration public virtual Sprite OverridePixelPortrait() Returns Type Description Sprite PixelAppearance() Declaration public virtual Sprite PixelAppearance() Returns Type Description Sprite Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.PixelCard.PixelCardManager.html": {
    "href": "api/InscryptionAPI.PixelCard.PixelCardManager.html",
    "title": "Class PixelCardManager | InscryptionAPI",
    "keywords": "Class PixelCardManager Inheritance System.Object PixelCardManager Namespace : InscryptionAPI.PixelCard Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class PixelCardManager Fields CustomPixelDecals Declaration public static readonly List<PixelCardManager.PixelDecalData> CustomPixelDecals Field Value Type Description List < PixelCardManager.PixelDecalData > PixelGemifiedBlueLit Declaration public static Sprite PixelGemifiedBlueLit Field Value Type Description Sprite PixelGemifiedDecal Declaration public static Sprite PixelGemifiedDecal Field Value Type Description Sprite PixelGemifiedGreenLit Declaration public static Sprite PixelGemifiedGreenLit Field Value Type Description Sprite PixelGemifiedOrangeLit Declaration public static Sprite PixelGemifiedOrangeLit Field Value Type Description Sprite Methods AddGBCDecal(String, String, Texture2D) Declaration public static PixelCardManager.PixelDecalData AddGBCDecal(string pluginGUID, string textureName, Texture2D texture) Parameters Type Name Description System.String pluginGUID System.String textureName Texture2D texture Returns Type Description PixelCardManager.PixelDecalData"
  },
  "api/InscryptionAPI.PixelCard.PixelCardManager.PixelDecalData.html": {
    "href": "api/InscryptionAPI.PixelCard.PixelCardManager.PixelDecalData.html",
    "title": "Class PixelCardManager.PixelDecalData | InscryptionAPI",
    "keywords": "Class PixelCardManager.PixelDecalData Inheritance System.Object PixelCardManager.PixelDecalData Namespace : InscryptionAPI.PixelCard Assembly : InscryptionAPI.dll Syntax public class PixelDecalData Fields DecalTexture Declaration public Texture2D DecalTexture Field Value Type Description Texture2D PluginGUID Declaration public string PluginGUID Field Value Type Description System.String TextureName Declaration public string TextureName Field Value Type Description System.String Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.PixelCard.PixelGemificationBorder.html": {
    "href": "api/InscryptionAPI.PixelCard.PixelGemificationBorder.html",
    "title": "Class PixelGemificationBorder | InscryptionAPI",
    "keywords": "Class PixelGemificationBorder Inheritance System.Object Object Component Behaviour MonoBehaviour PixelGemificationBorder Namespace : InscryptionAPI.PixelCard Assembly : InscryptionAPI.dll Syntax public class PixelGemificationBorder : MonoBehaviour Fields BlueGemLit Declaration public GameObject BlueGemLit Field Value Type Description GameObject card Declaration public Card card Field Value Type Description DiskCardGame.Card GreenGemLit Declaration public GameObject GreenGemLit Field Value Type Description GameObject OrangeGemLit Declaration public GameObject OrangeGemLit Field Value Type Description GameObject Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Regions.html": {
    "href": "api/InscryptionAPI.Regions.html",
    "title": "Namespace InscryptionAPI.Regions | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Regions This namespace is dedicated to managing custom regions, which control the map environment and nodes. Classes Part1RegionData RegionExtensions RegionManager RegionManager.MapDataReader_SpawnMapObjects"
  },
  "api/InscryptionAPI.Regions.Part1RegionData.html": {
    "href": "api/InscryptionAPI.Regions.Part1RegionData.html",
    "title": "Class Part1RegionData | InscryptionAPI",
    "keywords": "Class Part1RegionData Inheritance System.Object Part1RegionData Namespace : InscryptionAPI.Regions Assembly : InscryptionAPI.dll Syntax public class Part1RegionData Constructors Part1RegionData(RegionData, Int32) Declaration public Part1RegionData(RegionData region, int tier) Parameters Type Name Description DiskCardGame.RegionData region System.Int32 tier Properties AllowLockedTerrainCards Declaration public bool AllowLockedTerrainCards { get; set; } Property Value Type Description System.Boolean AllowSacrificableTerrainCards Declaration public bool AllowSacrificableTerrainCards { get; set; } Property Value Type Description System.Boolean AllowTerrainOnEnemySide Declaration public bool AllowTerrainOnEnemySide { get; set; } Property Value Type Description System.Boolean AllowTerrainOnPlayerSide Declaration public bool AllowTerrainOnPlayerSide { get; set; } Property Value Type Description System.Boolean DoNotForceReachTerrain Declaration public bool DoNotForceReachTerrain { get; set; } Property Value Type Description System.Boolean GUID Declaration public string GUID { get; } Property Value Type Description System.String MaxTerrain Declaration public int MaxTerrain { get; set; } Property Value Type Description System.Int32 MinTerrain Declaration public int MinTerrain { get; set; } Property Value Type Description System.Int32 Region Declaration public RegionData Region { get; } Property Value Type Description DiskCardGame.RegionData RemoveDefaultReachTerrain Declaration public bool RemoveDefaultReachTerrain { get; set; } Property Value Type Description System.Boolean Tier Declaration public int Tier { get; } Property Value Type Description System.Int32 Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Regions.RegionExtensions.html": {
    "href": "api/InscryptionAPI.Regions.RegionExtensions.html",
    "title": "Class RegionExtensions | InscryptionAPI",
    "keywords": "Class RegionExtensions Inheritance System.Object RegionExtensions Namespace : InscryptionAPI.Regions Assembly : InscryptionAPI.dll Syntax public static class RegionExtensions Methods AddBosses(RegionData, Opponent.Type[]) Declaration public static RegionData AddBosses(this RegionData region, params Opponent.Type[] bosses) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.Opponent.Type [] bosses Returns Type Description DiskCardGame.RegionData AddConsumableItems(RegionData, ConsumableItemData[]) Declaration public static RegionData AddConsumableItems(this RegionData region, params ConsumableItemData[] consumables) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.ConsumableItemData [] consumables Returns Type Description DiskCardGame.RegionData AddConsumableItems(RegionData, String[]) Adds consumables to this region. This only applies to consumables that are regionSpecific . Adding non-region-specific consumables will increase the probability of the consumable appearing. Declaration public static RegionData AddConsumableItems(this RegionData region, params string[] consumables) Parameters Type Name Description DiskCardGame.RegionData region System.String [] consumables . Returns Type Description DiskCardGame.RegionData AddDominantTribes(RegionData, Tribe[]) Adds dominant tribes to this region. One of three normal card choices is guaranteed to contain a card from the region's dominant tribes. Every region must have at least one dominant tribe. Declaration public static RegionData AddDominantTribes(this RegionData region, params Tribe[] tribes) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.Tribe [] tribes The tribes to add. Returns Type Description DiskCardGame.RegionData AddEncounters(RegionData, EncounterBlueprintData[]) Adds normal (card battle node) encounters to this region. Every region with battles needs at least one encounter. Declaration public static RegionData AddEncounters(this RegionData region, params EncounterBlueprintData[] encounters) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.EncounterBlueprintData [] encounters The encounters to add. Returns Type Description DiskCardGame.RegionData AddFillerScenery(RegionData, FillerSceneryEntry[]) Declaration public static RegionData AddFillerScenery(this RegionData region, params FillerSceneryEntry[] fillerScenery) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.FillerSceneryEntry [] fillerScenery Returns Type Description DiskCardGame.RegionData AddLikelyCards(RegionData, String[]) Adds likely cards to this region. Likely cards require the ChoiceNode metacategory to appear. One of three normal card choices is guaranteed to contain a card from the region's likely cards. Declaration public static RegionData AddLikelyCards(this RegionData region, params string[] cards) Parameters Type Name Description DiskCardGame.RegionData region System.String [] cards The likely cards to add. Returns Type Description DiskCardGame.RegionData AddScarceScenery(RegionData, ScarceSceneryEntry[]) Declaration public static RegionData AddScarceScenery(this RegionData region, params ScarceSceneryEntry[] scarceScenery) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.ScarceSceneryEntry [] scarceScenery Returns Type Description DiskCardGame.RegionData AddTerrainCards(RegionData, String[]) Adds terrain cards to this region. Terrain cards require the Terrain trait to appear. Every region must have at least one valid terrain card. Declaration public static RegionData AddTerrainCards(this RegionData region, params string[] cards) Parameters Type Name Description DiskCardGame.RegionData region System.String [] cards The terrain cards to add. Returns Type Description DiskCardGame.RegionData Build(RegionData, Boolean, Boolean, Boolean, Boolean) Declaration public static RegionData Build(this RegionData region, bool ignoreTerrainWarning = false, bool ignoreTribesWarning = false, bool ignoreEncountersWarning = false, bool ignoreBossesWarning = false) Parameters Type Name Description DiskCardGame.RegionData region System.Boolean ignoreTerrainWarning System.Boolean ignoreTribesWarning System.Boolean ignoreEncountersWarning System.Boolean ignoreBossesWarning Returns Type Description DiskCardGame.RegionData CreateEncounter(RegionData, String) Creates a new encounter for this region and returns the builder. Every region with battles needs at least one encounter. Declaration public static EncounterBuilderBlueprintData CreateEncounter(this RegionData region, string name = null) Parameters Type Name Description DiskCardGame.RegionData region System.String name The name for the encounter. Returns Type Description EncounterBuilderBlueprintData RegionByName(IEnumerable<RegionData>, String) Declaration public static RegionData RegionByName(this IEnumerable<RegionData> regions, string name) Parameters Type Name Description IEnumerable < DiskCardGame.RegionData > regions System.String name Returns Type Description DiskCardGame.RegionData SetAmbientLoopId(RegionData, String) Sets the music loop ID for this region. Declaration public static RegionData SetAmbientLoopId(this RegionData region, string id) Parameters Type Name Description DiskCardGame.RegionData region System.String id The music ID to use. Returns Type Description DiskCardGame.RegionData SetBoardColor(RegionData, Color) Declaration public static RegionData SetBoardColor(this RegionData region, Color color) Parameters Type Name Description DiskCardGame.RegionData region Color color Returns Type Description DiskCardGame.RegionData SetBossPrepCondition(RegionData, StoryEventCondition) Sets the boss prep encounter condition for this region. If this condition is not met, the 'boss prep encounter' will not appear. Declaration public static RegionData SetBossPrepCondition(this RegionData region, StoryEventCondition condition) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.StoryEventCondition condition The condition that needs to be fulfilled. Returns Type Description DiskCardGame.RegionData SetBossPrepEncounter(RegionData, EncounterBlueprintData) Sets the boss prep encounter for this region. The boss prep encounter is the final battle node in the region, before the boss. Declaration public static RegionData SetBossPrepEncounter(this RegionData region, EncounterBlueprintData encounter) Parameters Type Name Description DiskCardGame.RegionData region DiskCardGame.EncounterBlueprintData encounter The encounter to set. Returns Type Description DiskCardGame.RegionData SetCardsColor(RegionData, Color) Declaration public static RegionData SetCardsColor(this RegionData region, Color color) Parameters Type Name Description DiskCardGame.RegionData region Color color Returns Type Description DiskCardGame.RegionData SetDustParticlesEnabled(RegionData, Boolean) Declaration public static RegionData SetDustParticlesEnabled(this RegionData region, bool enabled) Parameters Type Name Description DiskCardGame.RegionData region System.Boolean enabled Returns Type Description DiskCardGame.RegionData SetFogAlpha(RegionData, Single) Declaration public static RegionData SetFogAlpha(this RegionData region, float alpha) Parameters Type Name Description DiskCardGame.RegionData region System.Single alpha Returns Type Description DiskCardGame.RegionData SetFogEnabled(RegionData, Boolean) Declaration public static RegionData SetFogEnabled(this RegionData region, bool enabled) Parameters Type Name Description DiskCardGame.RegionData region System.Boolean enabled Returns Type Description DiskCardGame.RegionData SetFogProfile(RegionData, VolumetricFogProfile) Declaration public static RegionData SetFogProfile(this RegionData region, VolumetricFogProfile fogProfile) Parameters Type Name Description DiskCardGame.RegionData region VolumetricFogAndMist.VolumetricFogProfile fogProfile Returns Type Description DiskCardGame.RegionData SetMapAlbedo(RegionData, Texture) Declaration public static RegionData SetMapAlbedo(this RegionData region, Texture mapAlbedo) Parameters Type Name Description DiskCardGame.RegionData region Texture mapAlbedo Returns Type Description DiskCardGame.RegionData SetMapEmission(RegionData, Texture2D) Declaration public static RegionData SetMapEmission(this RegionData region, Texture2D texture) Parameters Type Name Description DiskCardGame.RegionData region Texture2D texture Returns Type Description DiskCardGame.RegionData SetMapEmissionColor(RegionData, Color) Declaration public static RegionData SetMapEmissionColor(this RegionData region, Color color) Parameters Type Name Description DiskCardGame.RegionData region Color color Returns Type Description DiskCardGame.RegionData SetMapParticlesPrefabs(RegionData, GameObject[]) Declaration public static RegionData SetMapParticlesPrefabs(this RegionData region, params GameObject[] particles) Parameters Type Name Description DiskCardGame.RegionData region GameObject [] particles Returns Type Description DiskCardGame.RegionData SetName(RegionData, String) Declaration public static RegionData SetName(this RegionData region, string name) Parameters Type Name Description DiskCardGame.RegionData region System.String name Returns Type Description DiskCardGame.RegionData SetSilenceCabinAmbience(RegionData, Boolean) Declaration public static RegionData SetSilenceCabinAmbience(this RegionData region, bool enabled) Parameters Type Name Description DiskCardGame.RegionData region System.Boolean enabled Returns Type Description DiskCardGame.RegionData"
  },
  "api/InscryptionAPI.Regions.RegionManager.html": {
    "href": "api/InscryptionAPI.Regions.RegionManager.html",
    "title": "Class RegionManager | InscryptionAPI",
    "keywords": "Class RegionManager Inheritance System.Object RegionManager Namespace : InscryptionAPI.Regions Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class RegionManager Fields BaseGameRegions Declaration public static readonly ReadOnlyCollection<RegionData> BaseGameRegions Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < DiskCardGame.RegionData > NewRegions Declaration public static readonly ObservableCollection<Part1RegionData> NewRegions Field Value Type Description System.Collections.ObjectModel.ObservableCollection < Part1RegionData > Properties AllRegionsCopy Declaration public static List<RegionData> AllRegionsCopy { get; } Property Value Type Description List < DiskCardGame.RegionData > Methods Add(RegionData, Int32) Declaration public static void Add(RegionData newRegion, int tier) Parameters Type Name Description DiskCardGame.RegionData newRegion System.Int32 tier FromTierBasic(String, Int32, Boolean) Removes all encounters, cards, tribes, consumables Declaration public static RegionData FromTierBasic(string name, int originalTier, bool addToPool = true) Parameters Type Name Description System.String name System.Int32 originalTier System.Boolean addToPool Returns Type Description DiskCardGame.RegionData FromTierBasic(String, Int32, Int32, Boolean) Removes all encounters, cards, tribes, consumables Declaration public static RegionData FromTierBasic(string name, int originalTier, int newTier, bool addToPool = true) Parameters Type Name Description System.String name System.Int32 originalTier System.Int32 newTier System.Boolean addToPool Returns Type Description DiskCardGame.RegionData FromTierFull(String, Int32, Boolean) Keeps encounters, cards, tribes, consumables Declaration public static RegionData FromTierFull(string name, int originalTier, bool addToPool = true) Parameters Type Name Description System.String name System.Int32 originalTier System.Boolean addToPool Returns Type Description DiskCardGame.RegionData FromTierFull(String, Int32, Int32, Boolean) Keeps encounters, cards, tribes, consumables Declaration public static RegionData FromTierFull(string name, int originalTier, int newTier, bool addToPool = true) Parameters Type Name Description System.String name System.Int32 originalTier System.Int32 newTier System.Boolean addToPool Returns Type Description DiskCardGame.RegionData New(String, Int32, Boolean) Declaration public static RegionData New(string name, int tier, bool addToPool = true) Parameters Type Name Description System.String name System.Int32 tier System.Boolean addToPool Returns Type Description DiskCardGame.RegionData Remove(RegionData) Declaration public static void Remove(RegionData region) Parameters Type Name Description DiskCardGame.RegionData region SyncRegionList() Declaration public static void SyncRegionList() Events ModifyRegionsList Declaration public static event Func<List<RegionData>, List<RegionData>> ModifyRegionsList Event Type Type Description Func < List < DiskCardGame.RegionData >, List < DiskCardGame.RegionData >>"
  },
  "api/InscryptionAPI.Regions.RegionManager.MapDataReader_SpawnMapObjects.html": {
    "href": "api/InscryptionAPI.Regions.RegionManager.MapDataReader_SpawnMapObjects.html",
    "title": "Class RegionManager.MapDataReader_SpawnMapObjects | InscryptionAPI",
    "keywords": "Class RegionManager.MapDataReader_SpawnMapObjects Inheritance System.Object RegionManager.MapDataReader_SpawnMapObjects Namespace : InscryptionAPI.Regions Assembly : InscryptionAPI.dll Syntax public class MapDataReader_SpawnMapObjects Methods Transpiler(IEnumerable<CodeInstruction>) Declaration public static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions) Parameters Type Name Description IEnumerable < HarmonyLib.CodeInstruction > instructions Returns Type Description IEnumerable < HarmonyLib.CodeInstruction > Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Resource.html": {
    "href": "api/InscryptionAPI.Resource.html",
    "title": "Namespace InscryptionAPI.Resource | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Resource This namespace is dedicated to managing classes and members affecting Inscryption's ResourceBank, which stores data such as sounds, prefabs, and textures. Classes ResourceBankManager ResourceBankManager.ResourceData"
  },
  "api/InscryptionAPI.Resource.ResourceBankManager.html": {
    "href": "api/InscryptionAPI.Resource.ResourceBankManager.html",
    "title": "Class ResourceBankManager | InscryptionAPI",
    "keywords": "Class ResourceBankManager Inheritance System.Object ResourceBankManager Namespace : InscryptionAPI.Resource Assembly : InscryptionAPI.dll Syntax public static class ResourceBankManager Methods Add(String, ResourceBank.Resource, Boolean) Declaration public static ResourceBankManager.ResourceData Add(string pluginGUID, ResourceBank.Resource resource, bool overrideExistingAsset = false) Parameters Type Name Description System.String pluginGUID ResourceBank.Resource resource System.Boolean overrideExistingAsset Returns Type Description ResourceBankManager.ResourceData Add(String, String, UnityObject, Boolean) Declaration public static ResourceBankManager.ResourceData Add(string pluginGUID, string path, UnityObject unityObject, bool overrideExistingAsset = false) Parameters Type Name Description System.String pluginGUID System.String path UnityObject unityObject System.Boolean overrideExistingAsset Returns Type Description ResourceBankManager.ResourceData AddDecal(String, String, Texture, Boolean) Declaration public static ResourceBankManager.ResourceData AddDecal(string pluginGUID, string resourceName, Texture decalTexture, bool overrideExistingAsset = false) Parameters Type Name Description System.String pluginGUID System.String resourceName Texture decalTexture System.Boolean overrideExistingAsset Returns Type Description ResourceBankManager.ResourceData"
  },
  "api/InscryptionAPI.Resource.ResourceBankManager.ResourceData.html": {
    "href": "api/InscryptionAPI.Resource.ResourceBankManager.ResourceData.html",
    "title": "Class ResourceBankManager.ResourceData | InscryptionAPI",
    "keywords": "Class ResourceBankManager.ResourceData Inheritance System.Object ResourceBankManager.ResourceData Namespace : InscryptionAPI.Resource Assembly : InscryptionAPI.dll Syntax public class ResourceData Fields OverrideExistingResource Declaration public bool OverrideExistingResource Field Value Type Description System.Boolean PluginGUID Declaration public string PluginGUID Field Value Type Description System.String Resource Declaration public ResourceBank.Resource Resource Field Value Type Description ResourceBank.Resource Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.RuleBook.html": {
    "href": "api/InscryptionAPI.RuleBook.html",
    "title": "Namespace InscryptionAPI.RuleBook | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.RuleBook Classes RuleBookManager RuleBookManager.FullRuleBookRangeInfo RuleBookManagerPatches"
  },
  "api/InscryptionAPI.RuleBook.RuleBookManager.FullRuleBookRangeInfo.html": {
    "href": "api/InscryptionAPI.RuleBook.RuleBookManager.FullRuleBookRangeInfo.html",
    "title": "Class RuleBookManager.FullRuleBookRangeInfo | InscryptionAPI",
    "keywords": "Class RuleBookManager.FullRuleBookRangeInfo Inheritance System.Object RuleBookManager.FullRuleBookRangeInfo Namespace : InscryptionAPI.RuleBook Assembly : InscryptionAPI.dll Syntax public class FullRuleBookRangeInfo Constructors FullRuleBookRangeInfo(String, PageRangeType, String, String, Func<List<RuleBookPageInfo>, Int32>, Func<PageRangeInfo, List<RuleBookPageInfo>, Int32>, Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>>, Action<RuleBookPage, String, Object[]>) Declaration public FullRuleBookRangeInfo(string modGuid, PageRangeType type, string headerPrefix, string subsectionName, Func<List<RuleBookPageInfo>, int> getStartingNumberFunc, Func<PageRangeInfo, List<RuleBookPageInfo>, int> getInsertPositionFunc, Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>> createPagesFunc, Action<RuleBookPage, string, object[]> fillPageAct) Parameters Type Name Description System.String modGuid DiskCardGame.PageRangeType type System.String headerPrefix System.String subsectionName Func < List < DiskCardGame.RuleBookPageInfo >, System.Int32 > getStartingNumberFunc Func < DiskCardGame.PageRangeInfo , List < DiskCardGame.RuleBookPageInfo >, System.Int32 > getInsertPositionFunc Func < DiskCardGame.RuleBookInfo , DiskCardGame.PageRangeInfo , DiskCardGame.AbilityMetaCategory , List < DiskCardGame.RuleBookPageInfo >> createPagesFunc Action < DiskCardGame.RuleBookPage , System.String , System.Object []> fillPageAct Fields CreatePagesFunc The function for filling out each RuleBookPageInfo. Declaration public Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>> CreatePagesFunc Field Value Type Description Func < DiskCardGame.RuleBookInfo , DiskCardGame.PageRangeInfo , DiskCardGame.AbilityMetaCategory , List < DiskCardGame.RuleBookPageInfo >> FillPageAction Declaration public Action<RuleBookPage, string, object[]> FillPageAction Field Value Type Description Action < DiskCardGame.RuleBookPage , System.String , System.Object []> GetInsertPositionFunc The function used to determine what index in the rulebook to begin inserting this rulebook range. Declaration public Func<PageRangeInfo, List<RuleBookPageInfo>, int> GetInsertPositionFunc Field Value Type Description Func < DiskCardGame.PageRangeInfo , List < DiskCardGame.RuleBookPageInfo >, System.Int32 > GetStartingNumberFunc The function used to determine what the starting page number is; this number is added to the header. Declaration public Func<List<RuleBookPageInfo>, int> GetStartingNumberFunc Field Value Type Description Func < List < DiskCardGame.RuleBookPageInfo >, System.Int32 > HeaderPrefix The beginning section of the header, typically containing an appendix number and subsection number. An example of what HeaderPrefix should be: \"APPENDIX XII, SUBSECTION X\". Declaration public string HeaderPrefix Field Value Type Description System.String Remarks Unless you plan on using a custom appendix number or some other unique header, you should use FillHeaderPrefix . ModGUID The GUID for the mod that added this rulebook section. Declaration public readonly string ModGUID Field Value Type Description System.String PageTypeTemplate What PageRangeType this rulebook section will inherit from and use as a template. Declaration public readonly PageRangeType PageTypeTemplate Field Value Type Description DiskCardGame.PageRangeType Remarks Ability pages have a small square icon on the left side of the page. Stat icon pages have a small square icon on the left side of the rulebook name. Boon pages have a large icon on both sides of the page. Item pages have a large icon on the left side of the page. Unique is unused by the game, so should be avoided here unless you plan on using a unique page template. SubSectionName The subsection name for this rulebook range. Examples include \"ABILITIES\" and \"VARIABLE STATS\". Declaration public string SubSectionName Field Value Type Description System.String Properties FullHeaderText The full text of the header, combining the prefix and subsection name. Declaration public string FullHeaderText { get; } Property Value Type Description System.String Methods Clone() Declaration public RuleBookManager.FullRuleBookRangeInfo Clone() Returns Type Description RuleBookManager.FullRuleBookRangeInfo CreatePages(RuleBookInfo, PageRangeInfo, AbilityMetaCategory) Declaration public List<RuleBookPageInfo> CreatePages(RuleBookInfo instance, PageRangeInfo currentPageRange, AbilityMetaCategory metaCategory) Parameters Type Name Description DiskCardGame.RuleBookInfo instance DiskCardGame.PageRangeInfo currentPageRange DiskCardGame.AbilityMetaCategory metaCategory Returns Type Description List < DiskCardGame.RuleBookPageInfo > FillRuleBookPage(RuleBookPage, String, Object[]) Declaration public void FillRuleBookPage(RuleBookPage instance, string pageId, params object[] otherArgs) Parameters Type Name Description DiskCardGame.RuleBookPage instance System.String pageId System.Object [] otherArgs GetInsertPosition(PageRangeInfo, List<RuleBookPageInfo>) Declaration public int GetInsertPosition(PageRangeInfo currentPageRange, List<RuleBookPageInfo> pages) Parameters Type Name Description DiskCardGame.PageRangeInfo currentPageRange List < DiskCardGame.RuleBookPageInfo > pages Returns Type Description System.Int32 GetStartingNumber(List<RuleBookPageInfo>) Declaration public int GetStartingNumber(List<RuleBookPageInfo> pages) Parameters Type Name Description List < DiskCardGame.RuleBookPageInfo > pages Returns Type Description System.Int32 Extension Methods RuleBookManager.SetFillPage(RuleBookManager.FullRuleBookRangeInfo, Action<RuleBookPage, String, Object[]>) RuleBookManager.SetHeaderPrefix(RuleBookManager.FullRuleBookRangeInfo, String) RuleBookManager.SetHeaderPrefixSimple(RuleBookManager.FullRuleBookRangeInfo, String) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.RuleBook.RuleBookManager.html": {
    "href": "api/InscryptionAPI.RuleBook.RuleBookManager.html",
    "title": "Class RuleBookManager | InscryptionAPI",
    "keywords": "Class RuleBookManager Inheritance System.Object RuleBookManager Namespace : InscryptionAPI.RuleBook Assembly : InscryptionAPI.dll Syntax public static class RuleBookManager Properties AllRuleBookInfos Declaration public static List<RuleBookManager.FullRuleBookRangeInfo> AllRuleBookInfos { get; } Property Value Type Description List < RuleBookManager.FullRuleBookRangeInfo > Methods HeaderPrefixSimple(String) Creates a header prefix with the provided string using DEFAULT_HEADER_PREFIX as a template. Declaration public static string HeaderPrefixSimple(string romanNumeral) Parameters Type Name Description System.String romanNumeral A ideally representing a roman numeral for the subsection number. Returns Type Description System.String A fully formatted header in the format of \"APPENDIX XII, SUBSECTION {0}\", where {0} is romanNumeral. New(String, PageRangeType, String, Func<PageRangeInfo, List<RuleBookPageInfo>, Int32>, Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>>, String, Func<List<RuleBookPageInfo>, Int32>, Action<RuleBookPage, String, Object[]>) Creates a custom rulebook range. Simplified version of the full New() method that only requires the minimumrequired parameters. Declaration public static RuleBookManager.FullRuleBookRangeInfo New(string modGuid, PageRangeType pageType, string subsectionName, Func<PageRangeInfo, List<RuleBookPageInfo>, int> getInsertPositionFunc, Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>> createPagesFunc, string headerPrefix = null, Func<List<RuleBookPageInfo>, int> getStartingNumberFunc = null, Action<RuleBookPage, string, object[]> fillPageAction = null) Parameters Type Name Description System.String modGuid The GUID of the mod adding this FullRuleBookRangeInfo DiskCardGame.PageRangeType pageType The PageRangeType we want to inherit from. This will determine the style of pages. System.String subsectionName The name of the rulebook subsection, eg. \"Abilities\" or \"Boons\". Func < DiskCardGame.PageRangeInfo , List < DiskCardGame.RuleBookPageInfo >, System.Int32 > getInsertPositionFunc The Func to determine what index in the rulebook to insert a new section. Func < DiskCardGame.RuleBookInfo , DiskCardGame.PageRangeInfo , DiskCardGame.AbilityMetaCategory , List < DiskCardGame.RuleBookPageInfo >> createPagesFunc The Func that is called to create the RuleBookPage objects that will be used to fill the rulebook. System.String headerPrefix The first half of the header that will appear on rulebook pages. Leave null to use the default prefix. Func < List < DiskCardGame.RuleBookPageInfo >, System.Int32 > getStartingNumberFunc The Func to determine the first page number in this range. Leave null to use the default starting number (1). Action < DiskCardGame.RuleBookPage , System.String , System.Object []> fillPageAction The Action to call when filling in the data for each rulebook page. Returns Type Description RuleBookManager.FullRuleBookRangeInfo A new FullRuleBookRangeInfo containing the information to create a custom rulebook range. New(String, PageRangeType, String, String, Func<List<RuleBookPageInfo>, Int32>, Func<PageRangeInfo, List<RuleBookPageInfo>, Int32>, Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>>) Creates a FullRuleBookRangeInfo representing a custom subsection of the rulebook. Declaration public static RuleBookManager.FullRuleBookRangeInfo New(string modGuid, PageRangeType pageType, string headerPrefix, string subsectionName, Func<List<RuleBookPageInfo>, int> getStartingNumberFunc, Func<PageRangeInfo, List<RuleBookPageInfo>, int> getInsertPositionFunc, Func<RuleBookInfo, PageRangeInfo, AbilityMetaCategory, List<RuleBookPageInfo>> createPagesFunc) Parameters Type Name Description System.String modGuid The GUID of the mod calling this method. DiskCardGame.PageRangeType pageType The PageRangeType we want to inherit from. This will determine what page style you'll have access to. System.String headerPrefix The first half of the header that will appear on rulebook pages. System.String subsectionName The name of the rulebook subsection, eg. \"Abilities\" or \"Boons\". Func < List < DiskCardGame.RuleBookPageInfo >, System.Int32 > getStartingNumberFunc The Func < DiskCardGame.PageRangeInfo , List < DiskCardGame.RuleBookPageInfo >, System.Int32 > getInsertPositionFunc Func < DiskCardGame.RuleBookInfo , DiskCardGame.PageRangeInfo , DiskCardGame.AbilityMetaCategory , List < DiskCardGame.RuleBookPageInfo >> createPagesFunc Returns Type Description RuleBookManager.FullRuleBookRangeInfo SetFillPage(RuleBookManager.FullRuleBookRangeInfo, Action<RuleBookPage, String, Object[]>) Sets the FillPage Action for the given FullRuleBookRangeInfo. Declaration public static RuleBookManager.FullRuleBookRangeInfo SetFillPage(this RuleBookManager.FullRuleBookRangeInfo info, Action<RuleBookPage, string, object[]> action) Parameters Type Name Description RuleBookManager.FullRuleBookRangeInfo info The FullRuleBookRangeInfo we want to modify. Action < DiskCardGame.RuleBookPage , System.String , System.Object []> action Returns Type Description RuleBookManager.FullRuleBookRangeInfo The same FullRuleBookRangeInfo so a chain can continue. SetHeaderPrefix(RuleBookManager.FullRuleBookRangeInfo, String) Sets the HeaderPrefix for the provided FullRuleBookRangeInfo. Declaration public static RuleBookManager.FullRuleBookRangeInfo SetHeaderPrefix(this RuleBookManager.FullRuleBookRangeInfo info, string headerPrefix) Parameters Type Name Description RuleBookManager.FullRuleBookRangeInfo info The FullRuleBookRangeInfo we want to modify. System.String headerPrefix The string we want our header prefix to become. Returns Type Description RuleBookManager.FullRuleBookRangeInfo The same FullRuleBookRangeInfo so a chain can continue. Remarks If you only want to modify the subsection numeral, use SetPrefixSimple instead. SetHeaderPrefixSimple(RuleBookManager.FullRuleBookRangeInfo, String) Sets the FullRuleBookRangeInfo's HeaderPrefix using the HeaderPrefixSimple method (see there more for information). Declaration public static RuleBookManager.FullRuleBookRangeInfo SetHeaderPrefixSimple(this RuleBookManager.FullRuleBookRangeInfo info, string romanNumeral) Parameters Type Name Description RuleBookManager.FullRuleBookRangeInfo info The FullRuleBookRangeInfo we want to modify. System.String romanNumeral A string ideally representing a roman numeral, used for the subsection number. Returns Type Description RuleBookManager.FullRuleBookRangeInfo The same FullRuleBookRangeInfo so a chain can continue. SyncRuleBookList() Declaration public static void SyncRuleBookList() Events ModifyRuleBookInfos Declaration public static event Func<List<RuleBookManager.FullRuleBookRangeInfo>, List<RuleBookManager.FullRuleBookRangeInfo>> ModifyRuleBookInfos Event Type Type Description Func < List < RuleBookManager.FullRuleBookRangeInfo >, List < RuleBookManager.FullRuleBookRangeInfo >>"
  },
  "api/InscryptionAPI.RuleBook.RuleBookManagerPatches.html": {
    "href": "api/InscryptionAPI.RuleBook.RuleBookManagerPatches.html",
    "title": "Class RuleBookManagerPatches | InscryptionAPI",
    "keywords": "Class RuleBookManagerPatches Inheritance System.Object RuleBookManagerPatches Namespace : InscryptionAPI.RuleBook Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public class RuleBookManagerPatches Methods FillPage(RuleBookPage, RuleBookPageInfo) Declaration public static void FillPage(RuleBookPage page, RuleBookPageInfo pageInfo) Parameters Type Name Description DiskCardGame.RuleBookPage page DiskCardGame.RuleBookPageInfo pageInfo Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Saves.html": {
    "href": "api/InscryptionAPI.Saves.html",
    "title": "Namespace InscryptionAPI.Saves | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Saves This namespace is dedicated to the management of save file data, especially modded save data. Classes ModdedSaveData ModdedSaveManager SaveFileExtensions"
  },
  "api/InscryptionAPI.Saves.ModdedSaveData.html": {
    "href": "api/InscryptionAPI.Saves.ModdedSaveData.html",
    "title": "Class ModdedSaveData | InscryptionAPI",
    "keywords": "Class ModdedSaveData Inheritance System.Object ModdedSaveData Namespace : InscryptionAPI.Saves Assembly : InscryptionAPI.dll Syntax public class ModdedSaveData Methods GetValue(String, String) Get the value of a key as a string in the save data. Declaration public string GetValue(string guid, string key) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to get the value of. Returns Type Description System.String The value of the key as a string. GetValueAsBoolean(String, String) Get the value of a key as a boolean in the save data. Declaration public bool GetValueAsBoolean(string guid, string key) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to get the value of. Returns Type Description System.Boolean The value of the key as a boolean. GetValueAsFloat(String, String) Get the value of a key as a float in the save data. Declaration public float GetValueAsFloat(string guid, string key) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to get the value of. Returns Type Description System.Single The value of the key as a float. GetValueAsInt(String, String) Get the value of a key as an integer in the save data. Declaration public int GetValueAsInt(string guid, string key) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to get the value of. Returns Type Description System.Int32 The value of the key as an integer. GetValueAsObject<T>(String, String) Get the value of a key as an object in the save data. Declaration public T GetValueAsObject<T>(string guid, string key) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to get the value of. Returns Type Description T The value of the key as an object. Type Parameters Name Description T The type of object you are getting. SetValue(String, String, Object) Set the value of a key in the save data. Declaration public void SetValue(string guid, string key, object value) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to set the value of. System.Object value The value to set. SetValueAsObject<T>(String, String, T) Set the value of a key as an object in the save data, It's recommended to not save an object that implements Unity's Object class as it can cause a infinite recursion and crash the game. Declaration public void SetValueAsObject<T>(string guid, string key, T value) Parameters Type Name Description System.String guid The GUID of the mod. System.String key The key to set the value of. T value The object value to set. Type Parameters Name Description T The type of object you are setting. TryGetGuidAndKey(String, String, out String, out String) Declaration public bool TryGetGuidAndKey(string prefix, string enumValue, out string guid, out string key) Parameters Type Name Description System.String prefix System.String enumValue System.String guid System.String key Returns Type Description System.Boolean Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Saves.ModdedSaveManager.html": {
    "href": "api/InscryptionAPI.Saves.ModdedSaveManager.html",
    "title": "Class ModdedSaveManager | InscryptionAPI",
    "keywords": "Class ModdedSaveManager Inheritance System.Object ModdedSaveManager Namespace : InscryptionAPI.Saves Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class ModdedSaveManager Properties RunState Current modded RunState. Declaration public static ModdedSaveData RunState { get; } Property Value Type Description ModdedSaveData SaveData Current modded SaveData. Declaration public static ModdedSaveData SaveData { get; } Property Value Type Description ModdedSaveData"
  },
  "api/InscryptionAPI.Saves.SaveFileExtensions.html": {
    "href": "api/InscryptionAPI.Saves.SaveFileExtensions.html",
    "title": "Class SaveFileExtensions | InscryptionAPI",
    "keywords": "Class SaveFileExtensions Inheritance System.Object SaveFileExtensions Namespace : InscryptionAPI.Saves Assembly : InscryptionAPI.dll Syntax public static class SaveFileExtensions Methods GetSceneAsCardTemple(SaveFile) Gets the player's current location as a CardTemple Declaration public static CardTemple? GetSceneAsCardTemple(this SaveFile save) Parameters Type Name Description SaveFile save Returns Type Description System.Nullable < CardTemple > The temple of the player's current location OR null if the player is in an ambiguous location"
  },
  "api/InscryptionAPI.Slots.html": {
    "href": "api/InscryptionAPI.Slots.html",
    "title": "Namespace InscryptionAPI.Slots | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Slots Classes SlotModificationBehaviour Base class for all slot modification behaviors SlotModificationExtensions SlotModificationGainAbilityBehaviour Base class for all slot modification behaviors SlotModificationInteractable Base class for all slot modification behaviors SlotModificationManager Manager for card slot modifications SlotModificationManager.Info Contains information about a slot modification. Enums SlotModificationManager.ModificationMetaCategory Used to determine what Acts a modification's rulebook entry should appear in. Values correspond to specific AbilityMetaCategory values. SlotModificationManager.ModificationType Unique identifiers for slot modifications."
  },
  "api/InscryptionAPI.Slots.SlotModificationBehaviour.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationBehaviour.html",
    "title": "Class SlotModificationBehaviour | InscryptionAPI",
    "keywords": "Class SlotModificationBehaviour Base class for all slot modification behaviors Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver SlotModificationBehaviour SlotModificationGainAbilityBehaviour Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax public abstract class SlotModificationBehaviour : TriggerReceiver Properties Slot The slot that the behaviour is applied to. Declaration public CardSlot Slot { get; } Property Value Type Description DiskCardGame.CardSlot Methods Cleanup(SlotModificationManager.ModificationType) Use to clean up any additional custom slot visualizations before being removed Declaration public virtual IEnumerator Cleanup(SlotModificationManager.ModificationType replacement) Parameters Type Name Description SlotModificationManager.ModificationType replacement Returns Type Description System.Collections.IEnumerator Setup() Use to setup any additional custom slot visualizations when created. Declaration public virtual IEnumerator Setup() Returns Type Description System.Collections.IEnumerator Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Slots.SlotModificationExtensions.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationExtensions.html",
    "title": "Class SlotModificationExtensions | InscryptionAPI",
    "keywords": "Class SlotModificationExtensions Inheritance System.Object SlotModificationExtensions Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class SlotModificationExtensions Methods GetSlotModification(CardSlot) Gets the current modification of a slot Declaration public static SlotModificationManager.ModificationType GetSlotModification(this CardSlot slot) Parameters Type Name Description DiskCardGame.CardSlot slot Returns Type Description SlotModificationManager.ModificationType InfoByID(IEnumerable<SlotModificationManager.Info>, SlotModificationManager.ModificationType) Declaration public static SlotModificationManager.Info InfoByID(this IEnumerable<SlotModificationManager.Info> modInfos, SlotModificationManager.ModificationType mod) Parameters Type Name Description System.Collections.IEnumerable < SlotModificationManager.Info > modInfos SlotModificationManager.ModificationType mod Returns Type Description SlotModificationManager.Info ResetSlotTexture(CardSlot) Resets a slot's texture back to the default texture for that slot based on the current act. Declaration public static void ResetSlotTexture(this CardSlot slot) Parameters Type Name Description DiskCardGame.CardSlot slot SetRulebook(SlotModificationManager.ModificationType, String, String, Texture2D, SlotModificationManager.ModificationMetaCategory[]) Sets the rulebook description for a slot modification. Declaration public static SlotModificationManager.ModificationType SetRulebook(this SlotModificationManager.ModificationType mod, string rulebookName, string rulebookDescription, Texture2D rulebookSprite, params SlotModificationManager.ModificationMetaCategory[] categories) Parameters Type Name Description SlotModificationManager.ModificationType mod The ModificationType to add a rulebook description for. System.String rulebookName System.String rulebookDescription The rulebook description for the ModificationType. Texture2D rulebookSprite SlotModificationManager.ModificationMetaCategory [] categories What Acts the rulebook entry should appear in. Returns Type Description SlotModificationManager.ModificationType The same ModificationType. SetSlotModification(CardSlot, SlotModificationManager.ModificationType) Assigns a new slot modification to a slot. Declaration public static IEnumerator SetSlotModification(this CardSlot slot, SlotModificationManager.ModificationType modType) Parameters Type Name Description DiskCardGame.CardSlot slot The slot to assign the modification to SlotModificationManager.ModificationType modType The modification type to assign Returns Type Description System.Collections.IEnumerator"
  },
  "api/InscryptionAPI.Slots.SlotModificationGainAbilityBehaviour.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationGainAbilityBehaviour.html",
    "title": "Class SlotModificationGainAbilityBehaviour | InscryptionAPI",
    "keywords": "Class SlotModificationGainAbilityBehaviour Base class for all slot modification behaviors Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver SlotModificationBehaviour SlotModificationGainAbilityBehaviour Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax public abstract class SlotModificationGainAbilityBehaviour : SlotModificationBehaviour Properties AbilityToGain Declaration protected abstract Ability AbilityToGain { get; } Property Value Type Description DiskCardGame.Ability Methods Cleanup(SlotModificationManager.ModificationType) Declaration public override IEnumerator Cleanup(SlotModificationManager.ModificationType replacement) Parameters Type Name Description SlotModificationManager.ModificationType replacement Returns Type Description System.Collections.IEnumerator Overrides SlotModificationBehaviour.Cleanup(SlotModificationManager.ModificationType) OnOtherCardAssignedToSlot(PlayableCard) Declaration public override IEnumerator OnOtherCardAssignedToSlot(PlayableCard otherCard) Parameters Type Name Description DiskCardGame.PlayableCard otherCard Returns Type Description System.Collections.IEnumerator Overrides DiskCardGame.TriggerReceiver.OnOtherCardAssignedToSlot(DiskCardGame.PlayableCard) RespondsToOtherCardAssignedToSlot(PlayableCard) Declaration public override bool RespondsToOtherCardAssignedToSlot(PlayableCard otherCard) Parameters Type Name Description DiskCardGame.PlayableCard otherCard Returns Type Description System.Boolean Overrides DiskCardGame.TriggerReceiver.RespondsToOtherCardAssignedToSlot(DiskCardGame.PlayableCard) Setup() Declaration public override IEnumerator Setup() Returns Type Description System.Collections.IEnumerator Overrides SlotModificationBehaviour.Setup() Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Slots.SlotModificationInteractable.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationInteractable.html",
    "title": "Class SlotModificationInteractable | InscryptionAPI",
    "keywords": "Class SlotModificationInteractable Base class for all slot modification behaviors Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.InteractableBase DiskCardGame.AlternateInputInteractable SlotModificationInteractable Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax public class SlotModificationInteractable : AlternateInputInteractable Properties CursorType Declaration public override CursorType CursorType { get; } Property Value Type Description DiskCardGame.CursorType Overrides DiskCardGame.InteractableBase.CursorType ModType Declaration public SlotModificationManager.ModificationType ModType { get; set; } Property Value Type Description SlotModificationManager.ModificationType Methods AssignSlotModification(SlotModificationManager.ModificationType, CardSlot) Declaration public void AssignSlotModification(SlotModificationManager.ModificationType modType, CardSlot cardSlot) Parameters Type Name Description SlotModificationManager.ModificationType modType DiskCardGame.CardSlot cardSlot OnAlternateSelectStarted() Declaration public override void OnAlternateSelectStarted() Overrides DiskCardGame.AlternateInputInteractable.OnAlternateSelectStarted() Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Slots.SlotModificationManager.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationManager.html",
    "title": "Class SlotModificationManager | InscryptionAPI",
    "keywords": "Class SlotModificationManager Manager for card slot modifications Inheritance System.Object Object Component Behaviour MonoBehaviour SlotModificationManager Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public class SlotModificationManager : MonoBehaviour Fields SLOT_PAGEID Declaration public const string SLOT_PAGEID = \"SlotModification_\" Field Value Type Description System.String Properties AllModificationInfos Declaration public static List<SlotModificationManager.Info> AllModificationInfos { get; } Property Value Type Description System.Collections.Generic.List < SlotModificationManager.Info > AllModificationTypes Declaration public static List<SlotModificationManager.ModificationType> AllModificationTypes { get; } Property Value Type Description System.Collections.Generic.List < SlotModificationManager.ModificationType > Instance Singleton instance for the SlotModificationManager. Declaration public static SlotModificationManager Instance { get; set; } Property Value Type Description SlotModificationManager Methods BuildAct2SpriteSetFromSpriteSheetTexture(Texture2D) Declaration public static Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet> BuildAct2SpriteSetFromSpriteSheetTexture(Texture2D texture) Parameters Type Name Description Texture2D texture Returns Type Description System.Collections.Generic.Dictionary < GBC.PixelBoardSpriteSetter.BoardTheme , GBC.PixelBoardSpriteSetter.BoardThemeSpriteSet > BuildAct2SpriteSetFromTexture(Texture2D) Converts a single act 2 slot texture into a full collection of sprite sets by repeatedly recoloring the texture Declaration public static Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet> BuildAct2SpriteSetFromTexture(Texture2D texture) Parameters Type Name Description Texture2D texture Returns Type Description System.Collections.Generic.Dictionary < GBC.PixelBoardSpriteSetter.BoardTheme , GBC.PixelBoardSpriteSetter.BoardThemeSpriteSet > New(String, String, Type) Creates a new card slot modification Declaration public static SlotModificationManager.ModificationType New(string modGuid, string modificationName, Type behaviour) Parameters Type Name Description System.String modGuid Unique ID for the mod creating the slot modification System.String modificationName Reference name for the slot modification System.Type behaviour The class that controls the behavior for the new slot Returns Type Description SlotModificationManager.ModificationType Unique identifier for the modification type; used to set the slot modification in the future New(String, String, Type, Dictionary<CardTemple, Texture2D>, Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet>) Creates a new card slot modification. Declaration public static SlotModificationManager.ModificationType New(string modGuid, string modificationName, Type behaviour, Dictionary<CardTemple, Texture2D> slotTexture, Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet> pixelBoardSlotSprites) Parameters Type Name Description System.String modGuid Unique ID for the mod creating the slot modification System.String modificationName Reference name for the slot modification System.Type behaviour The class that controls the behavior for the new slot System.Collections.Generic.Dictionary < CardTemple , Texture2D > slotTexture The 3D scene slot texture (154x226) System.Collections.Generic.Dictionary < GBC.PixelBoardSpriteSetter.BoardTheme , GBC.PixelBoardSpriteSetter.BoardThemeSpriteSet > pixelBoardSlotSprites Returns Type Description SlotModificationManager.ModificationType Unique identifier for the modification type; used to set the slot modification in the future New(String, String, Type, Texture2D) Creates a new card slot modification Declaration public static SlotModificationManager.ModificationType New(string modGuid, string modificationName, Type behaviour, Texture2D slotTexture) Parameters Type Name Description System.String modGuid Unique ID for the mod creating the slot modification System.String modificationName Reference name for the slot modification System.Type behaviour The class that controls the behavior for the new slot Texture2D slotTexture The 3D scene slot texture (154x226) Returns Type Description SlotModificationManager.ModificationType Unique identifier for the modification type; used to set the slot modification in the future New(String, String, Type, Texture2D, Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet>) Creates a new card slot modification. Declaration public static SlotModificationManager.ModificationType New(string modGuid, string modificationName, Type behaviour, Texture2D slotTexture, Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet> pixelBoardSlotSprites) Parameters Type Name Description System.String modGuid Unique ID for the mod creating the slot modification System.String modificationName Reference name for the slot modification System.Type behaviour The class that controls the behavior for the new slot Texture2D slotTexture The 3D scene slot texture (154x226) System.Collections.Generic.Dictionary < GBC.PixelBoardSpriteSetter.BoardTheme , GBC.PixelBoardSpriteSetter.BoardThemeSpriteSet > pixelBoardSlotSprites Returns Type Description SlotModificationManager.ModificationType Unique identifier for the modification type; used to set the slot modification in the future New(String, String, Type, Texture2D, Texture2D) Creates a new card slot modification. Declaration public static SlotModificationManager.ModificationType New(string modGuid, string modificationName, Type behaviour, Texture2D slotTexture, Texture2D pixelSlotTexture) Parameters Type Name Description System.String modGuid Unique ID for the mod creating the slot modification System.String modificationName Reference name for the slot modification System.Type behaviour The class that controls the behavior for the new slot Texture2D slotTexture The 3D scene slot texture (154x226). Texture2D pixelSlotTexture The 2D scene slot texture. If it is the size of a single slot (44x58) it will be color converted to match each theme. If it is the size of a slot sprite sheet (220x116) it will be sliced into individual sprites. Returns Type Description SlotModificationManager.ModificationType Unique identifier for the modification type; used to set the slot modification in the future OverrideDefaultSlotTexture(CardTemple, List<Texture>, List<Texture>) Allows you to change the default slot texture for a given 3D scene Declaration public static void OverrideDefaultSlotTexture(CardTemple temple, List<Texture> playerSlots, List<Texture> opponentSlots) Parameters Type Name Description CardTemple temple Indicator for which scene/scrybe this should apply to System.Collections.Generic.List < Texture > playerSlots Textures for each player slot. Null textures will be replaced with the game's default. System.Collections.Generic.List < Texture > opponentSlots Textures for each opponent slot. Null textures will be replaced with the game's default. Remarks This does not work for Act 2. The base game uses the CardBattleNPC to set default textures. It's possible that a future API update would allow for custom Act 2 NPCs, so this will deliberately not touch Act 2 OverrideDefaultSlotTexture(CardTemple, Texture, Texture) Allows you to change the default slot texture for a given 3D scene Declaration public static void OverrideDefaultSlotTexture(CardTemple temple, Texture playerSlot, Texture opponentSlot) Parameters Type Name Description CardTemple temple Indicator for which scene/scrybe this should apply to Texture playerSlot Texture for each player slot. Null textures will be replaced with the game's default. Texture opponentSlot Texture for each opponent slot. Null textures will be replaced with the game's default. Remarks This does not work for Act 2. The base game uses the CardBattleNPC to set default textures. It's possible that a future API update would allow for custom Act 2 NPCs, so this will deliberately not touch Act 2 ResetDefaultSlotTexture(CardTemple) Resets the default slot texture back to the base game's default texture. Declaration public static void ResetDefaultSlotTexture(CardTemple temple) Parameters Type Name Description CardTemple temple The scene/scrybe to reset SlotModShouldBeAdded(SlotModificationManager.Info, SlotModificationManager.ModificationMetaCategory) Declaration public static bool SlotModShouldBeAdded(SlotModificationManager.Info info, SlotModificationManager.ModificationMetaCategory category) Parameters Type Name Description SlotModificationManager.Info info SlotModificationManager.ModificationMetaCategory category Returns Type Description System.Boolean SyncSlotModificationList() Declaration public static void SyncSlotModificationList() Events ModifySlotModificationList Declaration public static event Func<List<SlotModificationManager.Info>, List<SlotModificationManager.Info>> ModifySlotModificationList Event Type Type Description System.Func < System.Collections.Generic.List < SlotModificationManager.Info >, System.Collections.Generic.List < SlotModificationManager.Info >> Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Slots.SlotModificationManager.Info.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationManager.Info.html",
    "title": "Class SlotModificationManager.Info | InscryptionAPI",
    "keywords": "Class SlotModificationManager.Info Contains information about a slot modification. Inheritance System.Object SlotModificationManager.Info Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax public class Info Constructors Info(String, String, Dictionary<CardTemple, Texture2D>, Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet>, SlotModificationManager.ModificationType, Type, String, String, Sprite, List<SlotModificationManager.ModificationMetaCategory>) Declaration public Info(string name, string modGuid, Dictionary<CardTemple, Texture2D> texture, Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet> pixelSprites, SlotModificationManager.ModificationType modType, Type behaviour, string rulebookName, string rulebookDescription, Sprite rulebookSprite, List<SlotModificationManager.ModificationMetaCategory> categories) Parameters Type Name Description System.String name System.String modGuid System.Collections.Generic.Dictionary < CardTemple , Texture2D > texture System.Collections.Generic.Dictionary < GBC.PixelBoardSpriteSetter.BoardTheme , GBC.PixelBoardSpriteSetter.BoardThemeSpriteSet > pixelSprites SlotModificationManager.ModificationType modType System.Type behaviour System.String rulebookName System.String rulebookDescription Sprite rulebookSprite System.Collections.Generic.List < SlotModificationManager.ModificationMetaCategory > categories Fields MetaCategories Declaration public List<SlotModificationManager.ModificationMetaCategory> MetaCategories Field Value Type Description System.Collections.Generic.List < SlotModificationManager.ModificationMetaCategory > Properties ModGUID The GUID of the mod that added this slot modification. Declaration public string ModGUID { get; } Property Value Type Description System.String ModificationType Unique identifier for the slot modification. This will be assigned by the API. Declaration public SlotModificationManager.ModificationType ModificationType { get; } Property Value Type Description SlotModificationManager.ModificationType Name The internal name for the slot modification. Declaration public string Name { get; } Property Value Type Description System.String PixelBoardSlotSprites The slots modified textures in 2D scenes (Act 2) (44x58) Declaration public Dictionary<PixelBoardSpriteSetter.BoardTheme, PixelBoardSpriteSetter.BoardThemeSpriteSet> PixelBoardSlotSprites { get; } Property Value Type Description System.Collections.Generic.Dictionary < GBC.PixelBoardSpriteSetter.BoardTheme , GBC.PixelBoardSpriteSetter.BoardThemeSpriteSet > Remarks Each NPC has a slightly different theme, so custom slot textures need to accomodate these themes. RulebookDescription The slot's description as it will appear in the rulebook. Declaration public string RulebookDescription { get; set; } Property Value Type Description System.String RulebookName If this slot modification can appear in the rulebook, this will be the name displayed. Leave null if you don't want your slot modification to appear in the rulebook. Declaration public string RulebookName { get; set; } Property Value Type Description System.String RulebookSprite If this slot modification can appear in the rulebook, this will be the sprite displayed. Texture should have the dimensions 154 x 226; if the sprite is null then the rulebook entry will use the first entry in Texture as a sprite. Declaration public Sprite RulebookSprite { get; set; } Property Value Type Description Sprite SlotBehaviour Class that contains the behavior for the slot. This must be a subclass of SlotModificationBehaviour Declaration public Type SlotBehaviour { get; } Property Value Type Description System.Type Texture The slot's modified texture in 3D scenes (Leshy, P03, etc) (154x226) Declaration public Dictionary<CardTemple, Texture2D> Texture { get; } Property Value Type Description System.Collections.Generic.Dictionary < CardTemple , Texture2D > Methods Clone() Declaration public SlotModificationManager.Info Clone() Returns Type Description SlotModificationManager.Info Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Slots.SlotModificationManager.ModificationMetaCategory.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationManager.ModificationMetaCategory.html",
    "title": "Enum SlotModificationManager.ModificationMetaCategory | InscryptionAPI",
    "keywords": "Enum SlotModificationManager.ModificationMetaCategory Used to determine what Acts a modification's rulebook entry should appear in. Values correspond to specific AbilityMetaCategory values. Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax public enum ModificationMetaCategory Fields Name Description GrimoraRulebook MagnificusRulebook Part1Rulebook Part3Rulebook Extension Methods ListExtensions.Repeat<SlotModificationManager.ModificationMetaCategory>(Int32)"
  },
  "api/InscryptionAPI.Slots.SlotModificationManager.ModificationType.html": {
    "href": "api/InscryptionAPI.Slots.SlotModificationManager.ModificationType.html",
    "title": "Enum SlotModificationManager.ModificationType | InscryptionAPI",
    "keywords": "Enum SlotModificationManager.ModificationType Unique identifiers for slot modifications. Namespace : InscryptionAPI.Slots Assembly : InscryptionAPI.dll Syntax public enum ModificationType Fields Name Description NoModification Extension Methods SlotModificationExtensions.SetRulebook(String, String, Texture2D, SlotModificationManager.ModificationMetaCategory[]) ListExtensions.Repeat<SlotModificationManager.ModificationType>(Int32)"
  },
  "api/InscryptionAPI.Sound.GramophoneManager.html": {
    "href": "api/InscryptionAPI.Sound.GramophoneManager.html",
    "title": "Class GramophoneManager | InscryptionAPI",
    "keywords": "Class GramophoneManager A static class that contains helper methods for adding tracks to the Gramophone in Leshy's cabin. Inheritance System.Object GramophoneManager Namespace : InscryptionAPI.Sound Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class GramophoneManager Methods AddTrack(String, String, Single) A helper for adding a music track to the Gramophone in Leshy's cabin. Declaration public static void AddTrack(string guid, string path, float volume = 1F) Parameters Type Name Description System.String guid Your plugin's GUID. System.String path The name of the audio file. System.Single volume The volume of your track, from 0 to 1. AddTrack(String, AudioClip, Single) A helper for adding a music track to the Gramophone in Leshy's cabin. Declaration public static void AddTrack(string guid, AudioClip clip, float volume = 1F) Parameters Type Name Description System.String guid Your plugin's GUID. AudioClip clip The AudioClip of your track. System.Single volume The volume of your track, from 0 to 1."
  },
  "api/InscryptionAPI.Sound.html": {
    "href": "api/InscryptionAPI.Sound.html",
    "title": "Namespace InscryptionAPI.Sound | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Sound This namespace is dedicated to managing custom sound files, as well as custom tracks for the Gramophone in Act 1. Classes GramophoneManager A static class that contains helper methods for adding tracks to the Gramophone in Leshy's cabin. SoundManager A static class that contains helper methods for working with audio."
  },
  "api/InscryptionAPI.Sound.SoundManager.html": {
    "href": "api/InscryptionAPI.Sound.SoundManager.html",
    "title": "Class SoundManager | InscryptionAPI",
    "keywords": "Class SoundManager A static class that contains helper methods for working with audio. Inheritance System.Object SoundManager Namespace : InscryptionAPI.Sound Assembly : InscryptionAPI.dll Syntax public static class SoundManager Fields AudioTypes Declaration public static Dictionary<string, AudioType> AudioTypes Field Value Type Description Dictionary < System.String , AudioType > Methods LoadAudioClip(String) A helper method for converting an audio file into an Unity AudioClip . Declaration public static AudioClip LoadAudioClip(string path) Parameters Type Name Description System.String path The path to your audio file. Returns Type Description AudioClip The audio file converted into an AudioClip object. LoadAudioClip(String, String) A helper method for converting an audio file into an Unity AudioClip . Declaration public static AudioClip LoadAudioClip(string guid, string path) Parameters Type Name Description System.String guid Your plugin's GUID. System.String path The path to your audio file. Returns Type Description AudioClip The audio file converted into an AudioClip object."
  },
  "api/InscryptionAPI.TalkingCards.Animation.GeneratePortrait.html": {
    "href": "api/InscryptionAPI.TalkingCards.Animation.GeneratePortrait.html",
    "title": "Class GeneratePortrait | InscryptionAPI",
    "keywords": "Class GeneratePortrait Inheritance System.Object GeneratePortrait Namespace : InscryptionAPI.TalkingCards.Animation Assembly : InscryptionAPI.dll Syntax public static class GeneratePortrait Fields BlinkRate Declaration public const float BlinkRate = 1.5F Field Value Type Description System.Single DialogueDummy Declaration public static SpecialTriggeredAbility DialogueDummy Field Value Type Description DiskCardGame.SpecialTriggeredAbility EmptyPortrait Declaration public static readonly Sprite EmptyPortrait Field Value Type Description Sprite EmptyPortraitTuple Declaration public static readonly (Sprite, Sprite) EmptyPortraitTuple Field Value Type Description System.ValueTuple < Sprite , Sprite > VoiceId Declaration public const string VoiceId = \"female1_voice\" Field Value Type Description System.String VoicePitch Declaration public const float VoicePitch = 1F Field Value Type Description System.Single"
  },
  "api/InscryptionAPI.TalkingCards.Animation.html": {
    "href": "api/InscryptionAPI.TalkingCards.Animation.html",
    "title": "Namespace InscryptionAPI.TalkingCards.Animation | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.TalkingCards.Animation Classes GeneratePortrait"
  },
  "api/InscryptionAPI.TalkingCards.Create.DialogueEventStrings.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.DialogueEventStrings.html",
    "title": "Class DialogueEventStrings | InscryptionAPI",
    "keywords": "Class DialogueEventStrings Inheritance System.Object DialogueEventStrings Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public class DialogueEventStrings Constructors DialogueEventStrings(String, String[], String[][]) Declaration public DialogueEventStrings(string eventName, string[] mainLines, string[][] repeatLines) Parameters Type Name Description System.String eventName System.String [] mainLines System.String [][] repeatLines Properties eventName Declaration public string eventName { get; set; } Property Value Type Description System.String mainLines Declaration public string[] mainLines { get; set; } Property Value Type Description System.String [] repeatLines Declaration public string[][] repeatLines { get; set; } Property Value Type Description System.String [][] Methods CreateEvent(String) Declaration public DialogueEvent CreateEvent(string cardName) Parameters Type Name Description System.String cardName Returns Type Description DialogueEvent Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Create.EmotionData.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.EmotionData.html",
    "title": "Class EmotionData | InscryptionAPI",
    "keywords": "Class EmotionData A talking card's emotion (a facial expression, basically). A container for sprites. Inheritance System.Object EmotionData Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public class EmotionData Constructors EmotionData(Emotion, String, Nullable<(String open, String closed)>, Nullable<(String open, String closed)>, Nullable<(String open, String closed)>) Declaration public EmotionData(Emotion emotion, string face, (string open, string closed)? eyes, (string open, string closed)? mouth, (string open, string closed)? emission) Parameters Type Name Description DiskCardGame.Emotion emotion System.String face System.Nullable < System.ValueTuple < System.String , System.String >> eyes System.Nullable < System.ValueTuple < System.String , System.String >> mouth System.Nullable < System.ValueTuple < System.String , System.String >> emission EmotionData(Emotion, Sprite, FaceAnim, FaceAnim, FaceAnim) Declaration public EmotionData(Emotion emotion, Sprite face, FaceAnim eyes, FaceAnim mouth, FaceAnim emission) Parameters Type Name Description DiskCardGame.Emotion emotion Sprite face FaceAnim eyes FaceAnim mouth FaceAnim emission EmotionData(String, String, Nullable<(String open, String closed)>, Nullable<(String open, String closed)>, Nullable<(String open, String closed)>) Declaration public EmotionData(string emotion, string face, (string open, string closed)? eyes, (string open, string closed)? mouth, (string open, string closed)? emission) Parameters Type Name Description System.String emotion System.String face System.Nullable < System.ValueTuple < System.String , System.String >> eyes System.Nullable < System.ValueTuple < System.String , System.String >> mouth System.Nullable < System.ValueTuple < System.String , System.String >> emission Properties Emission A pair of sprites for your talking card's emission: open and closed, respectively. Declaration public FaceAnim Emission { get; } Property Value Type Description FaceAnim Emotion The chosen emotion. Declaration public Emotion Emotion { get; } Property Value Type Description DiskCardGame.Emotion Eyes A pair of sprites for your talking card's eyes: open and closed, respectively. Declaration public FaceAnim Eyes { get; } Property Value Type Description FaceAnim Face A sprite for your talking card's face. Declaration public Sprite Face { get; } Property Value Type Description Sprite Mouth A pair of sprites for your talking card's mouth: open and closed, respectively. Declaration public FaceAnim Mouth { get; } Property Value Type Description FaceAnim Operators Implicit((Emotion emotion, Sprite sprite) to EmotionData) Declaration public static implicit operator EmotionData((Emotion emotion, Sprite sprite) x) Parameters Type Name Description System.ValueTuple < DiskCardGame.Emotion , Sprite > x Returns Type Description EmotionData Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Create.FaceAnim.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.FaceAnim.html",
    "title": "Class FaceAnim | InscryptionAPI",
    "keywords": "Class FaceAnim A container for sprites for a part of a talking card's face. Inheritance System.Object FaceAnim Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public class FaceAnim Constructors FaceAnim(String, String) Declaration public FaceAnim(string open, string closed) Parameters Type Name Description System.String open System.String closed FaceAnim(Sprite, Sprite) Declaration public FaceAnim(Sprite open, Sprite closed) Parameters Type Name Description Sprite open Sprite closed Properties Closed Declaration public Sprite Closed { get; } Property Value Type Description Sprite Open Declaration public Sprite Open { get; } Property Value Type Description Sprite Operators Implicit(FaceAnim to Sprite) Declaration public static implicit operator Sprite(FaceAnim x) Parameters Type Name Description FaceAnim x Returns Type Description Sprite Implicit((Sprite open, Sprite closed) to FaceAnim) Declaration public static implicit operator FaceAnim((Sprite open, Sprite closed) x) Parameters Type Name Description System.ValueTuple < Sprite , Sprite > x Returns Type Description FaceAnim Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Create.FaceData.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.FaceData.html",
    "title": "Class FaceData | InscryptionAPI",
    "keywords": "Class FaceData Data for the creation of a talking card through this API. Inheritance System.Object FaceData Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public class FaceData Constructors FaceData(String, List<EmotionData>, FaceInfo) Declaration public FaceData(string cardName, List<EmotionData> emotions, FaceInfo faceInfo) Parameters Type Name Description System.String cardName List < EmotionData > emotions FaceInfo faceInfo Properties CardName The name of an existing card. Declaration public string CardName { get; } Property Value Type Description System.String Emotions Your talking card's emotions. Declaration public List<EmotionData> Emotions { get; } Property Value Type Description List < EmotionData > FaceInfo A bit of info about your talking card: blink rate and voice. Declaration public FaceInfo FaceInfo { get; set; } Property Value Type Description FaceInfo Neutral Declaration public EmotionData Neutral { get; } Property Value Type Description EmotionData Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Create.FaceInfo.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.FaceInfo.html",
    "title": "Class FaceInfo | InscryptionAPI",
    "keywords": "Class FaceInfo A bit of information about a talking card: blink rate and voice. Inheritance System.Object FaceInfo Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public class FaceInfo Constructors FaceInfo(Nullable<Single>, String, Nullable<Single>, String) Declaration public FaceInfo(float? blinkRate = null, string voiceId = null, float? voiceSoundPitch = null, string customVoice = null) Parameters Type Name Description System.Nullable < System.Single > blinkRate System.String voiceId System.Nullable < System.Single > voiceSoundPitch System.String customVoice Properties blinkRate How often your character should blink. Declaration public float? blinkRate { get; set; } Property Value Type Description System.Nullable < System.Single > customVoice The path to a short audio file to be used as your character's voice. Declaration public string customVoice { get; set; } Property Value Type Description System.String voiceId Your character's voice ID. Declaration public string voiceId { get; set; } Property Value Type Description System.String voiceSoundPitch Your character's voice's pitch. Declaration public float? voiceSoundPitch { get; set; } Property Value Type Description System.Nullable < System.Single > Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Create.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.html",
    "title": "Namespace InscryptionAPI.TalkingCards.Create | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.TalkingCards.Create Classes DialogueEventStrings EmotionData A talking card's emotion (a facial expression, basically). A container for sprites. FaceAnim A container for sprites for a part of a talking card's face. FaceData Data for the creation of a talking card through this API. FaceInfo A bit of information about a talking card: blink rate and voice. TalkingCardCreator Interfaces ITalkingCard An interface for the creation of a talking card through this API."
  },
  "api/InscryptionAPI.TalkingCards.Create.ITalkingCard.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.ITalkingCard.html",
    "title": "Interface ITalkingCard | InscryptionAPI",
    "keywords": "Interface ITalkingCard An interface for the creation of a talking card through this API. Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public interface ITalkingCard Properties CardName The name of an existing card. Declaration string CardName { get; } Property Value Type Description System.String DialogueAbility The special ability that controls your talking card's dialogue. Declaration SpecialTriggeredAbility DialogueAbility { get; } Property Value Type Description DiskCardGame.SpecialTriggeredAbility Emotions Your talking card's emotions. Declaration List<EmotionData> Emotions { get; } Property Value Type Description List < EmotionData > FaceInfo A bit of info about your talking card: blink rate and voice. Declaration FaceInfo FaceInfo { get; } Property Value Type Description FaceInfo Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Create.TalkingCardCreator.html": {
    "href": "api/InscryptionAPI.TalkingCards.Create.TalkingCardCreator.html",
    "title": "Class TalkingCardCreator | InscryptionAPI",
    "keywords": "Class TalkingCardCreator Inheritance System.Object TalkingCardCreator Namespace : InscryptionAPI.TalkingCards.Create Assembly : InscryptionAPI.dll Syntax public static class TalkingCardCreator Methods AddToDialogueCache(String) Declaration public static void AddToDialogueCache(string id) Parameters Type Name Description System.String id"
  },
  "api/InscryptionAPI.TalkingCards.CustomPaperTalkingCard.html": {
    "href": "api/InscryptionAPI.TalkingCards.CustomPaperTalkingCard.html",
    "title": "Class CustomPaperTalkingCard | InscryptionAPI",
    "keywords": "Class CustomPaperTalkingCard An abstract class for the creation of talking cards through the API. It inherits from PaperTalkingCard and implements ITalkingCard. Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.TriggerReceiver DiskCardGame.SpecialCardBehaviour DiskCardGame.TalkingCard DiskCardGame.PaperTalkingCard CustomPaperTalkingCard Implements ITalkingCard Namespace : InscryptionAPI.TalkingCards Assembly : InscryptionAPI.dll Syntax public abstract class CustomPaperTalkingCard : PaperTalkingCard, ITalkingCard Properties CardName Declaration public abstract string CardName { get; } Property Value Type Description System.String DialogueAbility Declaration public abstract SpecialTriggeredAbility DialogueAbility { get; } Property Value Type Description DiskCardGame.SpecialTriggeredAbility Emotions Declaration public abstract List<EmotionData> Emotions { get; } Property Value Type Description List < EmotionData > FaceInfo Declaration public abstract FaceInfo FaceInfo { get; } Property Value Type Description FaceInfo OnDrawnFallbackDialogueId Declaration public override string OnDrawnFallbackDialogueId { get; } Property Value Type Description System.String Overrides DiskCardGame.TalkingCard.OnDrawnFallbackDialogueId SpeakerType Declaration public override DialogueEvent.Speaker SpeakerType { get; } Property Value Type Description DialogueEvent.Speaker Overrides DiskCardGame.TalkingCard.SpeakerType Methods OnShownForCardSelect(Boolean) Declaration public override IEnumerator OnShownForCardSelect(bool forPositiveEffect) Parameters Type Name Description System.Boolean forPositiveEffect Returns Type Description System.Collections.IEnumerator Overrides DiskCardGame.TalkingCard.OnShownForCardSelect(System.Boolean) Implements ITalkingCard Extension Methods CustomTriggerFinder.CustomTriggerSequence(TriggerReceiver, IEnumerator) ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.TalkingCards.Helpers.AssetHelpers.html": {
    "href": "api/InscryptionAPI.TalkingCards.Helpers.AssetHelpers.html",
    "title": "Class AssetHelpers | InscryptionAPI",
    "keywords": "Class AssetHelpers Inheritance System.Object AssetHelpers Namespace : InscryptionAPI.TalkingCards.Helpers Assembly : InscryptionAPI.dll Syntax public static class AssetHelpers Fields PIVOT_BOTTOM Declaration public static readonly Vector2 PIVOT_BOTTOM Field Value Type Description Vector2 PIVOT_CENTER Declaration public static readonly Vector2 PIVOT_CENTER Field Value Type Description Vector2 Methods GetFile(String) Declaration public static string GetFile(string file) Parameters Type Name Description System.String file Returns Type Description System.String HexToColor(String) Declaration public static Color32 HexToColor(string hex) Parameters Type Name Description System.String hex Returns Type Description Color32 MakeSprite(Byte[]) Declaration public static Sprite MakeSprite(byte[] data) Parameters Type Name Description System.Byte [] data Returns Type Description Sprite MakeSprite(String) Declaration public static Sprite MakeSprite(string path) Parameters Type Name Description System.String path Returns Type Description Sprite MakeSprite(Texture2D) Declaration public static Sprite MakeSprite(Texture2D tex) Parameters Type Name Description Texture2D tex Returns Type Description Sprite MakeSpriteTuple(Nullable<(String a, String b)>) Declaration public static (Sprite, Sprite) MakeSpriteTuple((string a, string b)? tuple) Parameters Type Name Description System.Nullable < System.ValueTuple < System.String , System.String >> tuple Returns Type Description System.ValueTuple < Sprite , Sprite > MakeTexture(Byte[]) Declaration public static Texture2D MakeTexture(byte[] data) Parameters Type Name Description System.Byte [] data Returns Type Description Texture2D MakeTexture(String) Declaration public static Texture2D MakeTexture(string path) Parameters Type Name Description System.String path Returns Type Description Texture2D ParseAsEnumValue<T>(String) Declaration public static T ParseAsEnumValue<T>(string str) where T : Enum Parameters Type Name Description System.String str Returns Type Description T Type Parameters Name Description T"
  },
  "api/InscryptionAPI.TalkingCards.Helpers.html": {
    "href": "api/InscryptionAPI.TalkingCards.Helpers.html",
    "title": "Namespace InscryptionAPI.TalkingCards.Helpers | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.TalkingCards.Helpers Classes AssetHelpers StringExtensions"
  },
  "api/InscryptionAPI.TalkingCards.Helpers.StringExtensions.html": {
    "href": "api/InscryptionAPI.TalkingCards.Helpers.StringExtensions.html",
    "title": "Class StringExtensions | InscryptionAPI",
    "keywords": "Class StringExtensions Inheritance System.Object StringExtensions Namespace : InscryptionAPI.TalkingCards.Helpers Assembly : InscryptionAPI.dll Syntax public static class StringExtensions Methods IsWhiteSpace(String) Declaration public static bool IsWhiteSpace(this string str) Parameters Type Name Description System.String str Returns Type Description System.Boolean SentenceCase(String) Declaration public static string SentenceCase(this string key) Parameters Type Name Description System.String key Returns Type Description System.String"
  },
  "api/InscryptionAPI.TalkingCards.html": {
    "href": "api/InscryptionAPI.TalkingCards.html",
    "title": "Namespace InscryptionAPI.TalkingCards | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.TalkingCards Classes CustomPaperTalkingCard An abstract class for the creation of talking cards through the API. It inherits from PaperTalkingCard and implements ITalkingCard. TalkingCardManager"
  },
  "api/InscryptionAPI.TalkingCards.TalkingCardManager.html": {
    "href": "api/InscryptionAPI.TalkingCards.TalkingCardManager.html",
    "title": "Class TalkingCardManager | InscryptionAPI",
    "keywords": "Class TalkingCardManager Inheritance System.Object TalkingCardManager Namespace : InscryptionAPI.TalkingCards Assembly : InscryptionAPI.dll Syntax public static class TalkingCardManager Properties EmptyPortrait Declaration public static Sprite EmptyPortrait { get; } Property Value Type Description Sprite Methods Create(FaceData, SpecialTriggeredAbility) Create a talking card from a FaceData instance through this API. Declaration public static void Create(FaceData faceData, SpecialTriggeredAbility ability) Parameters Type Name Description FaceData faceData Your character's face data. DiskCardGame.SpecialTriggeredAbility ability The ability containing your character's dialogue events. New<T>() Creates a talking card through this API. Declaration public static void New<T>() where T : ITalkingCard, new() Type Parameters Name Description T A type that implements the ITalkingCard interface. Remove(FaceData) Remove a talking card from a FaceData instance through this API. Declaration public static void Remove(FaceData faceData) Parameters Type Name Description FaceData faceData Your character's face data."
  },
  "api/InscryptionAPI.Totems.CustomIconTotemTopPiece.html": {
    "href": "api/InscryptionAPI.Totems.CustomIconTotemTopPiece.html",
    "title": "Class CustomIconTotemTopPiece | InscryptionAPI",
    "keywords": "Class CustomIconTotemTopPiece Inheritance System.Object Object Component Behaviour MonoBehaviour ManagedBehaviourBase ManagedBehaviour DiskCardGame.Item DiskCardGame.CompositeTotemPiece CustomIconTotemTopPiece Namespace : InscryptionAPI.Totems Assembly : InscryptionAPI.dll Syntax public class CustomIconTotemTopPiece : CompositeTotemPiece Properties IconGameObjectName Declaration protected virtual string IconGameObjectName { get; } Property Value Type Description System.String Methods SetData(ItemData) Declaration public override void SetData(ItemData data) Parameters Type Name Description DiskCardGame.ItemData data Overrides DiskCardGame.CompositeTotemPiece.SetData(DiskCardGame.ItemData) Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Totems.html": {
    "href": "api/InscryptionAPI.Totems.html",
    "title": "Namespace InscryptionAPI.Totems | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Totems This namespace is dedicated to managing custom totems. Totems provide a passive effect to all cards with the Tribe corresponding to the Totem's top piece. Classes CustomIconTotemTopPiece TotemManager TotemManager.CustomTotemTop"
  },
  "api/InscryptionAPI.Totems.TotemManager.CustomTotemTop.html": {
    "href": "api/InscryptionAPI.Totems.TotemManager.CustomTotemTop.html",
    "title": "Class TotemManager.CustomTotemTop | InscryptionAPI",
    "keywords": "Class TotemManager.CustomTotemTop Inheritance System.Object TotemManager.CustomTotemTop Namespace : InscryptionAPI.Totems Assembly : InscryptionAPI.dll Syntax public class CustomTotemTop Fields GUID Declaration public string GUID Field Value Type Description System.String Name Declaration public string Name Field Value Type Description System.String Prefab Declaration public GameObject Prefab Field Value Type Description GameObject Tribe Declaration public Tribe Tribe Field Value Type Description DiskCardGame.Tribe Type Declaration public Type Type Field Value Type Description Type Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Totems.TotemManager.html": {
    "href": "api/InscryptionAPI.Totems.TotemManager.html",
    "title": "Class TotemManager | InscryptionAPI",
    "keywords": "Class TotemManager Inheritance System.Object TotemManager Namespace : InscryptionAPI.Totems Assembly : InscryptionAPI.dll Syntax public static class TotemManager Fields NewTotemTops A collection of all new totem tops added using the API. Declaration public static readonly ReadOnlyCollection<TotemManager.CustomTotemTop> NewTotemTops Field Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < TotemManager.CustomTotemTop > Properties DefaultTotemTop Totem top that is used for custom tribes if no custom model is provided Declaration public static TotemManager.CustomTotemTop DefaultTotemTop { get; } Property Value Type Description TotemManager.CustomTotemTop Methods NewTopPiece(String, String, Tribe, GameObject) Declaration public static TotemManager.CustomTotemTop NewTopPiece(string name, string guid, Tribe tribe, GameObject prefab = null) Parameters Type Name Description System.String name System.String guid DiskCardGame.Tribe tribe GameObject prefab Returns Type Description TotemManager.CustomTotemTop NewTopPiece<T>(String, String, Tribe, GameObject) Declaration public static TotemManager.CustomTotemTop NewTopPiece<T>(string name, string guid, Tribe tribe, GameObject prefab) where T : CompositeTotemPiece Parameters Type Name Description System.String name System.String guid DiskCardGame.Tribe tribe GameObject prefab Returns Type Description TotemManager.CustomTotemTop Type Parameters Name Description T SetDefaultTotemTop(GameObject) Declaration public static void SetDefaultTotemTop(GameObject gameObject) Parameters Type Name Description GameObject gameObject SetDefaultTotemTop<T>(GameObject) Declaration public static void SetDefaultTotemTop<T>(GameObject gameObject) where T : CompositeTotemPiece Parameters Type Name Description GameObject gameObject Type Parameters Name Description T"
  },
  "api/InscryptionAPI.Triggers.CustomTriggerFinder.html": {
    "href": "api/InscryptionAPI.Triggers.CustomTriggerFinder.html",
    "title": "Class CustomTriggerFinder | InscryptionAPI",
    "keywords": "Class CustomTriggerFinder Finds custom trigger recievers that exists on the board/in the hand Always excludes facedowns by default, use IActivateWhenFacedown to alter this default Inheritance System.Object CustomTriggerFinder Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public static class CustomTriggerFinder Methods Call<T>(CardTriggerHandler, Func<T, Boolean>, Action<T>) Calls all triggers on a card trigger handler. Declaration public static List<TriggerReceiver> Call<T>(this CardTriggerHandler self, Func<T, bool> respond, Action<T> call) Parameters Type Name Description DiskCardGame.CardTriggerHandler self The card trigger handler to call. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Action <T> call Call function that triggers the event you want to trigger. Returns Type Description List < DiskCardGame.TriggerReceiver > The list of all called triggers. Type Parameters Name Description T The trigger type to search for. Call<T>(PlayableCard, Func<T, Boolean>, Action<T>) Calls all triggers on a card. Declaration public static List<TriggerReceiver> Call<T>(this PlayableCard self, Func<T, bool> respond, Action<T> call) Parameters Type Name Description DiskCardGame.PlayableCard self The card to call. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Action <T> call Call function that triggers the event you want to trigger. Returns Type Description List < DiskCardGame.TriggerReceiver > The list of all called triggers. Type Parameters Name Description T The trigger type to search for. CallAll<T>(Boolean, Func<T, Boolean>, Action<T>) Calls triggers from all cards, both on board and in hand. Declaration public static List<TriggerReceiver> CallAll<T>(bool triggerFacedown, Func<T, bool> respond, Action<T> call) Parameters Type Name Description System.Boolean triggerFacedown True if this should also call cards that are facedown, false otherwise. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Action <T> call Call function that triggers the event you want to trigger. Returns Type Description List < DiskCardGame.TriggerReceiver > The list of all called triggers. Type Parameters Name Description T The trigger type to search for. CallInHand<T>(Func<T, Boolean>, Action<T>) Calls triggers from all cards in hand. Declaration public static List<TriggerReceiver> CallInHand<T>(Func<T, bool> respond, Action<T> call) Parameters Type Name Description Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Action <T> call Call function that triggers the event you want to trigger. Returns Type Description List < DiskCardGame.TriggerReceiver > The list of all called triggers. Type Parameters Name Description T The trigger type to search for. CallOnBoard<T>(Boolean, Func<T, Boolean>, Action<T>) Calls triggers from all cards on board. Declaration public static List<TriggerReceiver> CallOnBoard<T>(bool triggerFacedown, Func<T, bool> respond, Action<T> call) Parameters Type Name Description System.Boolean triggerFacedown True if this should also call cards that are facedown, false otherwise. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Action <T> call Call function that triggers the event you want to trigger. Returns Type Description List < DiskCardGame.TriggerReceiver > The list of all called triggers. Type Parameters Name Description T The trigger type to search for. CollectData<T, T2>(CardTriggerHandler, Func<T, Boolean>, Func<T, T2>) Collects data from all triggers on a card trigger handler. Declaration public static List<(TriggerReceiver, T2)> CollectData<T, T2>(this CardTriggerHandler self, Func<T, bool> respond, Func<T, T2> collect) Parameters Type Name Description DiskCardGame.CardTriggerHandler self The trigger handler to collect from. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, T2> collect Collect function that returns the information that will be collected. Returns Type Description List < System.ValueTuple < DiskCardGame.TriggerReceiver , T2>> The list of all collected information. Type Parameters Name Description T The trigger type to search for. T2 The object type to collect. CollectData<T, T2>(PlayableCard, Func<T, Boolean>, Func<T, T2>) Collects data from all triggers on a card. Declaration public static List<(TriggerReceiver, T2)> CollectData<T, T2>(this PlayableCard self, Func<T, bool> respond, Func<T, T2> collect) Parameters Type Name Description DiskCardGame.PlayableCard self The card to collect from. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, T2> collect Collect function that returns the information that will be collected. Returns Type Description List < System.ValueTuple < DiskCardGame.TriggerReceiver , T2>> The list of all collected information. Type Parameters Name Description T The trigger type to search for. T2 The object type to collect. CollectDataAll<T, T2>(Boolean, Func<T, Boolean>, Func<T, T2>) Collects data from all cards, both in hand and on board. Declaration public static List<(TriggerReceiver, T2)> CollectDataAll<T, T2>(bool collectFromFacedown, Func<T, bool> respond, Func<T, T2> collect) Parameters Type Name Description System.Boolean collectFromFacedown True if this should also collect from cards that are facedown, false otherwise. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, T2> collect Collect function that returns the information that will be collected. Returns Type Description List < System.ValueTuple < DiskCardGame.TriggerReceiver , T2>> The list of all collected information. Type Parameters Name Description T The trigger type to search for. T2 The object type to collect. CollectDataInHand<T, T2>(Func<T, Boolean>, Func<T, T2>) Collects data from all cards in hand. Declaration public static List<(TriggerReceiver, T2)> CollectDataInHand<T, T2>(Func<T, bool> respond, Func<T, T2> collect) Parameters Type Name Description Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, T2> collect Collect function that returns the information that will be collected. Returns Type Description List < System.ValueTuple < DiskCardGame.TriggerReceiver , T2>> The list of all collected information. Type Parameters Name Description T The trigger type to search for. T2 The object type to collect. CollectDataOnBoard<T, T2>(Boolean, Func<T, Boolean>, Func<T, T2>) Collects data from all cards on board. Declaration public static List<(TriggerReceiver, T2)> CollectDataOnBoard<T, T2>(bool collectFromFacedown, Func<T, bool> respond, Func<T, T2> collect) Parameters Type Name Description System.Boolean collectFromFacedown True if this should also collect from cards that are facedown, false otherwise. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, T2> collect Collect function that returns the information that will be collected. Returns Type Description List < System.ValueTuple < DiskCardGame.TriggerReceiver , T2>> The list of all collected information. Type Parameters Name Description T The trigger type to search for. T2 The object type to collect. CustomTriggerSequence(TriggerReceiver, IEnumerator) Same as normal coroutine, but also handles stack size, number of triggers this battle and destruction of a receiver after activation. Declaration public static IEnumerator CustomTriggerSequence(this TriggerReceiver receiver, IEnumerator triggerCoroutine) Parameters Type Name Description DiskCardGame.TriggerReceiver receiver The receiver that is triggering. System.Collections.IEnumerator triggerCoroutine The trigger coroutine called by that receiver. Returns Type Description System.Collections.IEnumerator . FindGlobalTriggers<T>(PlayableCard) Finds all trigger recievers, on the board and in the hand Declaration public static IEnumerable<T> FindGlobalTriggers<T>(PlayableCard excluding = null) Parameters Type Name Description DiskCardGame.PlayableCard excluding Card to exclude from the hand search. Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T. Type Parameters Name Description T The trigger type to search for FindGlobalTriggers<T>(Boolean, PlayableCard) Finds all trigger recievers, on the board and in the hand Declaration public static IEnumerable<T> FindGlobalTriggers<T>(bool findFacedown, PlayableCard excluding = null) Parameters Type Name Description System.Boolean findFacedown DiskCardGame.PlayableCard excluding Card to exclude from the hand search. Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T. Type Parameters Name Description T The trigger type to search for FindTriggersInHand<T>() Find all trigger recievers in the hand Declaration public static IEnumerable<T> FindTriggersInHand<T>() Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T in the hand. Type Parameters Name Description T The trigger type to search for FindTriggersInHandExcluding<T>(PlayableCard) Find all trigger recievers in the hand Declaration public static IEnumerable<T> FindTriggersInHandExcluding<T>(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card Card to exclude from the search. Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T in the hand. Type Parameters Name Description T The trigger type to search for FindTriggersInQueue<T>() Finds all trigger recievers on a cards in the opponent's queue Declaration public static IEnumerable<T> FindTriggersInQueue<T>() Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T in the opponent's queue. Type Parameters Name Description T The type of reciever to search for FindTriggersOnBoard<T>() Find all trigger recievers in the hand Declaration public static IEnumerable<T> FindTriggersOnBoard<T>() Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T in the hand. Type Parameters Name Description T The trigger type to search for FindTriggersOnBoard<T>(Boolean) Find all trigger recievers in the hand Declaration public static IEnumerable<T> FindTriggersOnBoard<T>(bool findFacedown) Parameters Type Name Description System.Boolean findFacedown Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T in the hand. Type Parameters Name Description T The trigger type to search for FindTriggersOnCard<T>(CardTriggerHandler) Finds all trigger recievers on a card Declaration public static IEnumerable<T> FindTriggersOnCard<T>(this CardTriggerHandler card) Parameters Type Name Description DiskCardGame.CardTriggerHandler card The card to search. Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T on the card. Type Parameters Name Description T The type of reciever to search for FindTriggersOnCard<T>(PlayableCard) Finds all trigger recievers on a card Declaration public static IEnumerable<T> FindTriggersOnCard<T>(this PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card to search. Returns Type Description System.Collections.IEnumerable <T> All trigger recievers of type T on the card. Type Parameters Name Description T The type of reciever to search for Trigger<T>(CardTriggerHandler, Func<T, Boolean>, Func<T, IEnumerator>) Triggers the triggers of type T on a card trigger handler. Declaration public static IEnumerator Trigger<T>(this CardTriggerHandler handler, Func<T, bool> respond, Func<T, IEnumerator> trigger) Parameters Type Name Description DiskCardGame.CardTriggerHandler handler The card trigger handler to search for triggers. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, System.Collections.IEnumerator > trigger Trigger function that triggers the coroutine for the trigger. Returns Type Description System.Collections.IEnumerator . Type Parameters Name Description T The trigger type to search for. Trigger<T>(PlayableCard, Func<T, Boolean>, Func<T, IEnumerator>) Triggers the triggers of type T on a card. Declaration public static IEnumerator Trigger<T>(this PlayableCard card, Func<T, bool> respond, Func<T, IEnumerator> trigger) Parameters Type Name Description DiskCardGame.PlayableCard card The card trigger handler to search for triggers. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, System.Collections.IEnumerator > trigger Trigger function that triggers the coroutine for the trigger. Returns Type Description System.Collections.IEnumerator . Type Parameters Name Description T The trigger type to search for. TriggerAll<T>(Boolean, Func<T, Boolean>, Func<T, IEnumerator>) Triggers the triggers of type T on all cards, both in hand and on board. Declaration public static IEnumerator TriggerAll<T>(bool triggerFacedown, Func<T, bool> respond, Func<T, IEnumerator> trigger) Parameters Type Name Description System.Boolean triggerFacedown True if this should also trigger cards that are facedown, false otherwise. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, System.Collections.IEnumerator > trigger Trigger function that triggers the coroutine for the trigger. Returns Type Description System.Collections.IEnumerator . Type Parameters Name Description T The trigger type to search for. TriggerInHand<T>(Func<T, Boolean>, Func<T, IEnumerator>) Triggers the triggers of type T on all cards in hand. Declaration public static IEnumerator TriggerInHand<T>(Func<T, bool> respond, Func<T, IEnumerator> trigger) Parameters Type Name Description Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, System.Collections.IEnumerator > trigger Trigger function that triggers the coroutine for the trigger. Returns Type Description System.Collections.IEnumerator . Type Parameters Name Description T The trigger type to search for. TriggerOnBoard<T>(Boolean, Func<T, Boolean>, Func<T, IEnumerator>) Triggers the triggers of type T on all cards on board. Declaration public static IEnumerator TriggerOnBoard<T>(bool triggerFacedown, Func<T, bool> respond, Func<T, IEnumerator> trigger) Parameters Type Name Description System.Boolean triggerFacedown True if this should also trigger cards that are facedown, false otherwise. Func <T, System.Boolean > respond Check function that needs to return true for a trigger to get triggered. Func <T, System.Collections.IEnumerator > trigger Trigger function that triggers the coroutine for the trigger. Returns Type Description System.Collections.IEnumerator . Type Parameters Name Description T The trigger type to search for."
  },
  "api/InscryptionAPI.Triggers.DoCombatPhasePatches.html": {
    "href": "api/InscryptionAPI.Triggers.DoCombatPhasePatches.html",
    "title": "Class DoCombatPhasePatches | InscryptionAPI",
    "keywords": "Class DoCombatPhasePatches Inheritance System.Object DoCombatPhasePatches Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class DoCombatPhasePatches Methods ModifyAttackingSlots(Boolean) Declaration public static List<CardSlot> ModifyAttackingSlots(bool playerIsAttacker) Parameters Type Name Description System.Boolean playerIsAttacker Returns Type Description List < DiskCardGame.CardSlot > NegativeDamageSupport(CombatPhaseManager, Boolean, SpecialBattleSequencer, Boolean) Declaration public static IEnumerator NegativeDamageSupport(CombatPhaseManager __instance, bool playerIsAttacker, SpecialBattleSequencer specialSequencer, bool attackedWithSquirrel) Parameters Type Name Description DiskCardGame.CombatPhaseManager __instance System.Boolean playerIsAttacker DiskCardGame.SpecialBattleSequencer specialSequencer System.Boolean attackedWithSquirrel Returns Type Description System.Collections.IEnumerator"
  },
  "api/InscryptionAPI.Triggers.html": {
    "href": "api/InscryptionAPI.Triggers.html",
    "title": "Namespace InscryptionAPI.Triggers | InscryptionAPI",
    "keywords": "Namespace InscryptionAPI.Triggers Maintains the various custom interface and ability triggers added by the API. Classes CustomTriggerFinder Finds custom trigger recievers that exists on the board/in the hand Always excludes facedowns by default, use IActivateWhenFacedown to alter this default DoCombatPhasePatches SlotAttackSlotPatches TakeDamagePatches Interfaces ICardTakenDamageModifier Data collection trigger that modifies the damage taken by any card. IGetAttackingSlots Used when changing what CardSlots are queued for attacking. Triggers before null and Powerless cards are removed, so no making empty slots attack and no making Attack-less cards attack. IGetOpposingSlots Run whenever a card is asked what its opposing slots are as part of the attack sequence IItemCanBeUsed Data collection trigger that collects data about the usability of an item. IModifyDamageTaken Data collection trigger that modifies the damage taken by any card. Should be used instead of ICardTakenDamageModifier. IModifyDirectDamage Data collection trigger that modifies the damage taken when directly attacked. IOnAddedToHand Trigger that is triggered when the card is drawn, but after it has been added to the list of cards in hand. IOnBellRung Trigger that is triggered after the combat phase starts. IOnCardAssignedToSlotContext Trigger that is triggered after any card is assigned to a slot. The difference between this and normal OnOtherCardAssignedToSlot is that this trigger also provides information about the new and old slot. IOnCardAssignedToSlotNoResolve Trigger that is triggered after any card is assigned to a slot, but only if it was assigned to a slot before. IOnCardDealtDamageDirectly Trigger that is triggered when a card deals direct damage. This is a replacement for the vanilla DealDamageDirectly trigger, which unlike the base-game trigger, triggers for all cards on the board and supplies more information. IOnCardPassiveAttackBuffs Data collection trigger that modifies the passive attack buffs of any card. IOnCardPassiveHealthBuffs Data collection trigger that modifies the passive health buffs of any card. IOnItemPreventedFromUse Trigger that is triggered when an item is prevented from use using IItemCanBeUsed. IOnOtherCardAddedToHand Trigger that is triggered when any card is drawn, but after it has been added to the list of cards in hand. IOnOtherCardAssignedToSlotInHand Trigger that is triggered when any card is assigned to a slot, but unlike normal OnOtherCardAssignedToSlotInHand this one only works in hand. IOnOtherCardDealtDamageInHand Trigger that is triggered when any card deals damage to another card, but unlike normal OnOtherCardDealtDamage this one only works in hand. IOnOtherCardDieInHand Trigger that is triggered after any card dies, but unlike normal OnOtherCardDie this one only works in hand. IOnOtherCardPreDeathInHand Trigger that is triggered before any card dies, but unlike normal OnOtherCardPreDeath this one only works in hand. IOnOtherCardResolveInHand Trigger that is triggered when any card gets played, but unlike normal OnOtherCardResolveOnBoard this one only works in hand. IOnPostItemUsed Trigger that is triggered after any item is used. IOnPostScalesChanged Trigger that is triggered after the scales are changed. Also includes information about the original damage and side that the damage is added at, before those values potentially get changed by IOnPreScalesChangedRef. IOnPostSingularSlotAttackSlot Trigger that is triggered after a slot does an individual attack. IOnPostSlotAttackSequence Trigger that is triggered after a slot does its attacks. IOnPreItemUsed Trigger that is triggered before any item is used. IOnPreScalesChanged Trigger that is triggered before the scales are changed, after IOnPreScalesChangedRef. Also includes information about the original damage and side that the damage is added at, before those values potentially get changed by IOnPreScalesChangedRef. IOnPreScalesChangedRef Data collection trigger that is triggered before the scales are changed, can be used to change the amount of damage added and to which side it's added. IOnPreSlotAttackSequence Trigger that is triggered before a slot does its attacks. IOnTurnEndInHand Trigger that is triggered when the turn ends, but unlike normal OnTurnEnd this one only works in hand. IOnTurnEndInQueue Trigger that is triggered when the turn ends, but unlike normal OnTurnEnd this one only works on cards in the opponent's queue. IOnUpkeepInHand Trigger that is triggered each turn, but unlike normal OnUpkeep this one only works in hand. IPassiveAttackBuff Used when a card wants to provide a passive buff to other cards on the board IPassiveHealthBuff Used when a card wants to provide a passive buff to other cards on the board IPreTakeDamage Trigger that is triggered right before a card takes damage. ISetupAttackSequence Data collection trigger that collects data related to attacked slots. Enums OpposingSlotTriggerPriority Flag that tells IGetOpposingSlots when to trigger."
  },
  "api/InscryptionAPI.Triggers.ICardTakenDamageModifier.html": {
    "href": "api/InscryptionAPI.Triggers.ICardTakenDamageModifier.html",
    "title": "Interface ICardTakenDamageModifier | InscryptionAPI",
    "keywords": "Interface ICardTakenDamageModifier Data collection trigger that modifies the damage taken by any card. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface ICardTakenDamageModifier Methods CollectCardTakenDamageModifier(PlayableCard, Int32) Returns the new amount of damage that will be taken by a card. Declaration int CollectCardTakenDamageModifier(PlayableCard card, int currentValue) Parameters Type Name Description DiskCardGame.PlayableCard card Card that took damage. System.Int32 currentValue The current amount of damage dealt. Returns Type Description System.Int32 The new amount of damage that will be taken by a card. RespondsToCardTakenDamageModifier(PlayableCard, Int32) Returns true if this should modify the amount of damage taken by a card. Declaration bool RespondsToCardTakenDamageModifier(PlayableCard card, int currentValue) Parameters Type Name Description DiskCardGame.PlayableCard card Card that took damage. System.Int32 currentValue The current amount of damage dealt. Returns Type Description System.Boolean True if this should modify the amount of damage taken by a card. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IGetAttackingSlots.html": {
    "href": "api/InscryptionAPI.Triggers.IGetAttackingSlots.html",
    "title": "Interface IGetAttackingSlots | InscryptionAPI",
    "keywords": "Interface IGetAttackingSlots Used when changing what CardSlots are queued for attacking. Triggers before null and Powerless cards are removed, so no making empty slots attack and no making Attack-less cards attack. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IGetAttackingSlots Methods GetAttackingSlots(Boolean, List<CardSlot>, List<CardSlot>) Returns the new list of attacking CardSlots. Declaration List<CardSlot> GetAttackingSlots(bool playerIsAttacker, List<CardSlot> originalSlots, List<CardSlot> currentSlots) Parameters Type Name Description System.Boolean playerIsAttacker Whether the player is current attacking. List < DiskCardGame.CardSlot > originalSlots The vanilla list of attacking CardSlots. List < DiskCardGame.CardSlot > currentSlots The current list of attacking CardSlots. Returns Type Description List < DiskCardGame.CardSlot > The new list of attacking CardSlots. RespondsToGetAttackingSlots(Boolean, List<CardSlot>, List<CardSlot>) Returns true if this should modify the list of attacking CardSlots. Declaration bool RespondsToGetAttackingSlots(bool playerIsAttacker, List<CardSlot> originalSlots, List<CardSlot> currentSlots) Parameters Type Name Description System.Boolean playerIsAttacker Whether the player is current attacking. List < DiskCardGame.CardSlot > originalSlots The vanilla list of attacking CardSlots; a copy of the current attacker's side of the board. List < DiskCardGame.CardSlot > currentSlots The current list of attacking CardSlots, after modifications and the like. Returns Type Description System.Boolean True if this should modify the amount of damage taken by a card. TriggerPriority(Boolean, List<CardSlot>) Trigger priority. Higher numbers trigger first. Declaration int TriggerPriority(bool playerIsAttacker, List<CardSlot> originalSlots) Parameters Type Name Description System.Boolean playerIsAttacker Whether the player is current attacking. List < DiskCardGame.CardSlot > originalSlots The vanilla list of attacking CardSlots. Returns Type Description System.Int32 The trigger priority int. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IGetOpposingSlots.html": {
    "href": "api/InscryptionAPI.Triggers.IGetOpposingSlots.html",
    "title": "Interface IGetOpposingSlots | InscryptionAPI",
    "keywords": "Interface IGetOpposingSlots Run whenever a card is asked what its opposing slots are as part of the attack sequence Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IGetOpposingSlots Methods GetOpposingSlots(List<CardSlot>, List<CardSlot>) Gets the card slots that the card wants to attack Declaration List<CardSlot> GetOpposingSlots(List<CardSlot> originalSlots, List<CardSlot> otherAddedSlots) Parameters Type Name Description List < DiskCardGame.CardSlot > originalSlots The set of original card slots that the card would attack (as set by abilities in the base game). List < DiskCardGame.CardSlot > otherAddedSlots Slots that have been added by other custom abilities. Returns Type Description List < DiskCardGame.CardSlot > The list of card slots you want to attack. Remarks If your card is replacing the default attack slot (the opposing slot) see 'RemoveDefaultAttackSlot' If you are not replacing the default attack slot, do not include that here. Simple ensure 'RemoveDefaultAttackSlot' returns false. Only return the default attack slot if you want to attack it an additional time. RemoveDefaultAttackSlot() If true, this means that the attack slots provided by GetOpposingSlots should override the default attack slot. If false, it means they should be in addition to the default opposing slot. Declaration bool RemoveDefaultAttackSlot() Returns Type Description System.Boolean RespondsToGetOpposingSlots() Indicates if this card wants to respond to getting the opposing slots Declaration bool RespondsToGetOpposingSlots() Returns Type Description System.Boolean True to provide opposing slots, False to leave the slots as default. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IItemCanBeUsed.html": {
    "href": "api/InscryptionAPI.Triggers.IItemCanBeUsed.html",
    "title": "Interface IItemCanBeUsed | InscryptionAPI",
    "keywords": "Interface IItemCanBeUsed Data collection trigger that collects data about the usability of an item. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IItemCanBeUsed Methods CollectItemCanBeUsed(String, Boolean) Returns true if an item can be used. Declaration bool CollectItemCanBeUsed(string itemname, bool currentValue) Parameters Type Name Description System.String itemname The name of the item that is about to get used. System.Boolean currentValue True if it can be used currently. Returns Type Description System.Boolean True if the item can be used, false otherwise. RespondsToItemCanBeUsed(String, Boolean) Returns true if this should modify if an item can be used. Declaration bool RespondsToItemCanBeUsed(string itemname, bool currentValue) Parameters Type Name Description System.String itemname The name of the item that is about to get used. System.Boolean currentValue True if it can be used currently. Returns Type Description System.Boolean True if this should modify if an item can be used. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IModifyDamageTaken.html": {
    "href": "api/InscryptionAPI.Triggers.IModifyDamageTaken.html",
    "title": "Interface IModifyDamageTaken | InscryptionAPI",
    "keywords": "Interface IModifyDamageTaken Data collection trigger that modifies the damage taken by any card. Should be used instead of ICardTakenDamageModifier. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IModifyDamageTaken Methods OnModifyDamageTaken(PlayableCard, Int32, PlayableCard, Int32) Returns the new amount of damage taken by a card. Declaration int OnModifyDamageTaken(PlayableCard target, int damage, PlayableCard attacker, int originalDamage) Parameters Type Name Description DiskCardGame.PlayableCard target The card that took damage. System.Int32 damage The current amount of damage to be delt. DiskCardGame.PlayableCard attacker The attacking card. System.Int32 originalDamage The original amount of damage to be delt. Returns Type Description System.Int32 The new amount of damage taken by a card. RespondsToModifyDamageTaken(PlayableCard, Int32, PlayableCard, Int32) Returns true if this should modify the amount of damage taken by a card. Declaration bool RespondsToModifyDamageTaken(PlayableCard target, int damage, PlayableCard attacker, int originalDamage) Parameters Type Name Description DiskCardGame.PlayableCard target The card that took damage. System.Int32 damage The current amount of damage to be delt. DiskCardGame.PlayableCard attacker The attacking card. System.Int32 originalDamage The original amount of damage to be delt. Returns Type Description System.Boolean True if this should modify the amount of damage taken by a card. TriggerPriority(PlayableCard, Int32, PlayableCard) Trigger priority. Higher numbers trigger first. Declaration int TriggerPriority(PlayableCard target, int damage, PlayableCard attacker) Parameters Type Name Description DiskCardGame.PlayableCard target The card that took damage. System.Int32 damage The amount of damage to be delt. NOTE: THIS VALUE IS NOT UP TO DATE, GETTING PRIORITIES HAPPENS BEFORE THE MODIFICATION ITSELF. DiskCardGame.PlayableCard attacker The attacking card. Returns Type Description System.Int32 The trigger priority int. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IModifyDirectDamage.html": {
    "href": "api/InscryptionAPI.Triggers.IModifyDirectDamage.html",
    "title": "Interface IModifyDirectDamage | InscryptionAPI",
    "keywords": "Interface IModifyDirectDamage Data collection trigger that modifies the damage taken when directly attacked. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IModifyDirectDamage Methods OnModifyDirectDamage(CardSlot, Int32, PlayableCard, Int32) Declaration int OnModifyDirectDamage(CardSlot target, int damage, PlayableCard attacker, int originalDamage) Parameters Type Name Description DiskCardGame.CardSlot target System.Int32 damage DiskCardGame.PlayableCard attacker System.Int32 originalDamage Returns Type Description System.Int32 RespondsToModifyDirectDamage(CardSlot, Int32, PlayableCard, Int32) Returns true if this should modify the amount of damage taken when directly attacked. Declaration bool RespondsToModifyDirectDamage(CardSlot target, int damage, PlayableCard attacker, int originalDamage) Parameters Type Name Description DiskCardGame.CardSlot target The card slot targeted for the attack. System.Int32 damage The current amount of damage to be delt. DiskCardGame.PlayableCard attacker The attacking card. System.Int32 originalDamage The original amount of damage to be delt. Returns Type Description System.Boolean True if this should modify the amount of damage taken when directly attacked. TriggerPriority(CardSlot, Int32, PlayableCard) Declaration int TriggerPriority(CardSlot target, int damage, PlayableCard attacker) Parameters Type Name Description DiskCardGame.CardSlot target System.Int32 damage DiskCardGame.PlayableCard attacker Returns Type Description System.Int32 Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnAddedToHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnAddedToHand.html",
    "title": "Interface IOnAddedToHand | InscryptionAPI",
    "keywords": "Interface IOnAddedToHand Trigger that is triggered when the card is drawn, but after it has been added to the list of cards in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnAddedToHand Methods OnAddedToHand() Trigger whatever events you want to run when the card is drawn, after being added to the list of cards in hand. Declaration IEnumerator OnAddedToHand() Returns Type Description System.Collections.IEnumerator . RespondsToAddedToHand() Returns true if this should trigger when drawn, after being added to the list of cards in hand. Declaration bool RespondsToAddedToHand() Returns Type Description System.Boolean True if this should trigger when drawn, after being added to the list of cards in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnBellRung.html": {
    "href": "api/InscryptionAPI.Triggers.IOnBellRung.html",
    "title": "Interface IOnBellRung | InscryptionAPI",
    "keywords": "Interface IOnBellRung Trigger that is triggered after the combat phase starts. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnBellRung Methods OnBellRung(Boolean) Trigger whatever events you want to run after the combat phase starts. Declaration IEnumerator OnBellRung(bool playerCombatPhase) Parameters Type Name Description System.Boolean playerCombatPhase True if the player is the attacker in the attack phase. Returns Type Description System.Collections.IEnumerator . RespondsToBellRung(Boolean) Returns true if this should trigger after the combat phase starts. Declaration bool RespondsToBellRung(bool playerCombatPhase) Parameters Type Name Description System.Boolean playerCombatPhase True if the player is the attacker in the attack phase. Returns Type Description System.Boolean True if this should trigger after the combat phase starts. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnCardAssignedToSlotContext.html": {
    "href": "api/InscryptionAPI.Triggers.IOnCardAssignedToSlotContext.html",
    "title": "Interface IOnCardAssignedToSlotContext | InscryptionAPI",
    "keywords": "Interface IOnCardAssignedToSlotContext Trigger that is triggered after any card is assigned to a slot. The difference between this and normal OnOtherCardAssignedToSlot is that this trigger also provides information about the new and old slot. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnCardAssignedToSlotContext Methods OnCardAssignedToSlotContext(PlayableCard, CardSlot, CardSlot) Trigger whatever events you want to run when any card gets assigned to a new slot. Declaration IEnumerator OnCardAssignedToSlotContext(PlayableCard card, CardSlot oldSlot, CardSlot newSlot) Parameters Type Name Description DiskCardGame.PlayableCard card The card that got assigned to a new slot. DiskCardGame.CardSlot oldSlot The slot for the card before it moved. DiskCardGame.CardSlot newSlot The slot for the card after it moved. Returns Type Description System.Collections.IEnumerator . RespondsToCardAssignedToSlotContext(PlayableCard, CardSlot, CardSlot) Returns true if this should trigger when any card gets assigned to a new slot. Declaration bool RespondsToCardAssignedToSlotContext(PlayableCard card, CardSlot oldSlot, CardSlot newSlot) Parameters Type Name Description DiskCardGame.PlayableCard card The card that got assigned to a new slot. DiskCardGame.CardSlot oldSlot The slot for the card before it moved. DiskCardGame.CardSlot newSlot The slot for the card after it moved. Returns Type Description System.Boolean True if this should trigger when any card gets assigned to a new slot. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnCardAssignedToSlotNoResolve.html": {
    "href": "api/InscryptionAPI.Triggers.IOnCardAssignedToSlotNoResolve.html",
    "title": "Interface IOnCardAssignedToSlotNoResolve | InscryptionAPI",
    "keywords": "Interface IOnCardAssignedToSlotNoResolve Trigger that is triggered after any card is assigned to a slot, but only if it was assigned to a slot before. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnCardAssignedToSlotNoResolve Methods OnCardAssignedToSlotNoResolve(PlayableCard) Trigger whatever events you want to run when any card gets assigned to a new slot, with an exception of being placed on board for the first time. Declaration IEnumerator OnCardAssignedToSlotNoResolve(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card that was assigned to a new slot. Returns Type Description System.Collections.IEnumerator . RespondsToCardAssignedToSlotNoResolve(PlayableCard) Returns true if this should trigger when any card gets assigned to a new slot, with an exception of being placed on board for the first time. Declaration bool RespondsToCardAssignedToSlotNoResolve(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card that was assigned to a new slot. Returns Type Description System.Boolean True if this should trigger when any card gets assigned to a new slot, with an exception of being placed on board for the first time. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnCardDealtDamageDirectly.html": {
    "href": "api/InscryptionAPI.Triggers.IOnCardDealtDamageDirectly.html",
    "title": "Interface IOnCardDealtDamageDirectly | InscryptionAPI",
    "keywords": "Interface IOnCardDealtDamageDirectly Trigger that is triggered when a card deals direct damage. This is a replacement for the vanilla DealDamageDirectly trigger, which unlike the base-game trigger, triggers for all cards on the board and supplies more information. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnCardDealtDamageDirectly Methods OnCardDealtDamageDirectly(PlayableCard, CardSlot, Int32) Trigger whatever events you want to run when a card deals direct damage. Declaration IEnumerator OnCardDealtDamageDirectly(PlayableCard attacker, CardSlot opposingSlot, int damage) Parameters Type Name Description DiskCardGame.PlayableCard attacker The card that dealt the direct damage. DiskCardGame.CardSlot opposingSlot The card slot that was targeted for the direct attack. System.Int32 damage The amount of direct damage delt. Returns Type Description System.Collections.IEnumerator . RespondsToCardDealtDamageDirectly(PlayableCard, CardSlot, Int32) Returns true if this should trigger when a card deals direct damage. Declaration bool RespondsToCardDealtDamageDirectly(PlayableCard attacker, CardSlot opposingSlot, int damage) Parameters Type Name Description DiskCardGame.PlayableCard attacker The card that dealt the direct damage. DiskCardGame.CardSlot opposingSlot The card slot that was targeted for the direct attack. System.Int32 damage The amount of direct damage delt. Returns Type Description System.Boolean True if this should trigger when a card deals direct damage. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnCardPassiveAttackBuffs.html": {
    "href": "api/InscryptionAPI.Triggers.IOnCardPassiveAttackBuffs.html",
    "title": "Interface IOnCardPassiveAttackBuffs | InscryptionAPI",
    "keywords": "Interface IOnCardPassiveAttackBuffs Data collection trigger that modifies the passive attack buffs of any card. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnCardPassiveAttackBuffs Methods CollectCardPassiveAttackBuffs(PlayableCard, Int32) Returns the new attack buff value for a card. Declaration int CollectCardPassiveAttackBuffs(PlayableCard card, int currentValue) Parameters Type Name Description DiskCardGame.PlayableCard card Card the buffs will be given to. System.Int32 currentValue The current buff value. Returns Type Description System.Int32 The new attack buff value for a card. RespondsToCardPassiveAttackBuffs(PlayableCard, Int32) Returns true if this should modify the passive attack buffs given to a card. Declaration bool RespondsToCardPassiveAttackBuffs(PlayableCard card, int currentValue) Parameters Type Name Description DiskCardGame.PlayableCard card Card the buffs will be given to. System.Int32 currentValue The current buff value. Returns Type Description System.Boolean True if this should modify the passive attack buffs given to a card. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnCardPassiveHealthBuffs.html": {
    "href": "api/InscryptionAPI.Triggers.IOnCardPassiveHealthBuffs.html",
    "title": "Interface IOnCardPassiveHealthBuffs | InscryptionAPI",
    "keywords": "Interface IOnCardPassiveHealthBuffs Data collection trigger that modifies the passive health buffs of any card. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnCardPassiveHealthBuffs Methods CollectCardPassiveHealthBuffs(PlayableCard, Int32) Returns the new health buff value for a card. Declaration int CollectCardPassiveHealthBuffs(PlayableCard card, int currentValue) Parameters Type Name Description DiskCardGame.PlayableCard card Card the buffs will be given to. System.Int32 currentValue The current buff value. Returns Type Description System.Int32 The new health buff value for a card. RespondsToCardPassiveHealthBuffs(PlayableCard, Int32) Returns true if this should modify the passive health buffs given to a card. Declaration bool RespondsToCardPassiveHealthBuffs(PlayableCard card, int currentValue) Parameters Type Name Description DiskCardGame.PlayableCard card Card the buffs will be given to. System.Int32 currentValue The current buff value. Returns Type Description System.Boolean True if this should modify the passive health buffs given to a card. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnItemPreventedFromUse.html": {
    "href": "api/InscryptionAPI.Triggers.IOnItemPreventedFromUse.html",
    "title": "Interface IOnItemPreventedFromUse | InscryptionAPI",
    "keywords": "Interface IOnItemPreventedFromUse Trigger that is triggered when an item is prevented from use using IItemCanBeUsed. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnItemPreventedFromUse Methods OnItemPreventedFromUse(String) Trigger whatever events you want to run when an item is prevented from use using IItemCanBeUsed. Declaration IEnumerator OnItemPreventedFromUse(string itemName) Parameters Type Name Description System.String itemName Internal name of the item. Returns Type Description System.Collections.IEnumerator . RespondsToItemPreventedFromUse(String) Returns true if this should trigger when an item is prevented from use using IItemCanBeUsed. Declaration bool RespondsToItemPreventedFromUse(string itemName) Parameters Type Name Description System.String itemName Internal name of the item. Returns Type Description System.Boolean True if this should trigger when an item is prevented from use using IItemCanBeUsed. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnOtherCardAddedToHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnOtherCardAddedToHand.html",
    "title": "Interface IOnOtherCardAddedToHand | InscryptionAPI",
    "keywords": "Interface IOnOtherCardAddedToHand Trigger that is triggered when any card is drawn, but after it has been added to the list of cards in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnOtherCardAddedToHand Methods OnOtherCardAddedToHand(PlayableCard) Trigger whatever events you want to run when any card is drawn, after being added to the list of cards in hand. Declaration IEnumerator OnOtherCardAddedToHand(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card that was drawn. Returns Type Description System.Collections.IEnumerator . RespondsToOtherCardAddedToHand(PlayableCard) Returns true if this should trigger when any card is drawn, after being added to the list of cards in hand. Declaration bool RespondsToOtherCardAddedToHand(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card that was drawn. Returns Type Description System.Boolean True if this should trigger when any card is drawn, after being added to the list of cards in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnOtherCardAssignedToSlotInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnOtherCardAssignedToSlotInHand.html",
    "title": "Interface IOnOtherCardAssignedToSlotInHand | InscryptionAPI",
    "keywords": "Interface IOnOtherCardAssignedToSlotInHand Trigger that is triggered when any card is assigned to a slot, but unlike normal OnOtherCardAssignedToSlotInHand this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnOtherCardAssignedToSlotInHand Methods OnOtherCardAssignedToSlotInHand(PlayableCard) Trigger whatever events you want to run when any card is assigned to a new slot, but only if this card is in hand. Declaration IEnumerator OnOtherCardAssignedToSlotInHand(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card that got assigned to a new slot. Returns Type Description System.Collections.IEnumerator . RespondsToOtherCardAssignedToSlotInHand(PlayableCard) Returns true if this should trigger when any card is assigned to a new slot, but only if this card is in hand. Declaration bool RespondsToOtherCardAssignedToSlotInHand(PlayableCard card) Parameters Type Name Description DiskCardGame.PlayableCard card The card that got assigned to a new slot. Returns Type Description System.Boolean True if this should trigger when any card is assigned to a new slot, but only if this card is in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnOtherCardDealtDamageInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnOtherCardDealtDamageInHand.html",
    "title": "Interface IOnOtherCardDealtDamageInHand | InscryptionAPI",
    "keywords": "Interface IOnOtherCardDealtDamageInHand Trigger that is triggered when any card deals damage to another card, but unlike normal OnOtherCardDealtDamage this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnOtherCardDealtDamageInHand Methods OnOtherCardDealtDamageInHand(PlayableCard, Int32, PlayableCard) Trigger whatever events you want to run when any card deals damage to another card, but only if this card is in hand. Declaration IEnumerator OnOtherCardDealtDamageInHand(PlayableCard attacker, int amount, PlayableCard target) Parameters Type Name Description DiskCardGame.PlayableCard attacker The card that attacked another card. System.Int32 amount The damage that was dealt to the target. DiskCardGame.PlayableCard target The card that got attacked by the attacker. Returns Type Description System.Collections.IEnumerator . RespondsToOtherCardDealtDamageInHand(PlayableCard, Int32, PlayableCard) Returns true if this should trigger when any card deals damage to another card, but only if this card is in hand. Declaration bool RespondsToOtherCardDealtDamageInHand(PlayableCard attacker, int amount, PlayableCard target) Parameters Type Name Description DiskCardGame.PlayableCard attacker The card that attacked another card. System.Int32 amount The damage that was dealt to the target. DiskCardGame.PlayableCard target The card that got attacked by the attacker. Returns Type Description System.Boolean True if this should trigger when any card deals damage to another card, but only if this card is in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnOtherCardDieInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnOtherCardDieInHand.html",
    "title": "Interface IOnOtherCardDieInHand | InscryptionAPI",
    "keywords": "Interface IOnOtherCardDieInHand Trigger that is triggered after any card dies, but unlike normal OnOtherCardDie this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnOtherCardDieInHand Methods OnOtherCardDieInHand(PlayableCard, CardSlot, Boolean, PlayableCard) Trigger whatever events you want to run after any card dies, but only if this card is in hand. Declaration IEnumerator OnOtherCardDieInHand(PlayableCard card, CardSlot deathSlot, bool fromCombat, PlayableCard killer) Parameters Type Name Description DiskCardGame.PlayableCard card The card that is dying. DiskCardGame.CardSlot deathSlot The slot that the card died in. System.Boolean fromCombat False if the card was killed by a sacrifice, true otherwise. DiskCardGame.PlayableCard killer The card that killed the dying card. Can be null. Returns Type Description System.Collections.IEnumerator . RespondsToOtherCardDieInHand(PlayableCard, CardSlot, Boolean, PlayableCard) Returns true if this should trigger after any card dies, but only if this card is in hand. Declaration bool RespondsToOtherCardDieInHand(PlayableCard card, CardSlot deathSlot, bool fromCombat, PlayableCard killer) Parameters Type Name Description DiskCardGame.PlayableCard card The card that is dying. DiskCardGame.CardSlot deathSlot The slot that the card died in. System.Boolean fromCombat False if the card was killed by a sacrifice, true otherwise. DiskCardGame.PlayableCard killer The card that killed the dying card. Can be null. Returns Type Description System.Boolean True if this should trigger after any card dies, but only if this card is in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnOtherCardPreDeathInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnOtherCardPreDeathInHand.html",
    "title": "Interface IOnOtherCardPreDeathInHand | InscryptionAPI",
    "keywords": "Interface IOnOtherCardPreDeathInHand Trigger that is triggered before any card dies, but unlike normal OnOtherCardPreDeath this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnOtherCardPreDeathInHand Methods OnOtherCardPreDeathInHand(CardSlot, Boolean, PlayableCard) Trigger whatever events you want to run before any card dies, but only if this card is in hand. Declaration IEnumerator OnOtherCardPreDeathInHand(CardSlot deathSlot, bool fromCombat, PlayableCard killer) Parameters Type Name Description DiskCardGame.CardSlot deathSlot The slot that the dying card died in. System.Boolean fromCombat False if it was killed by a sacrifice, true otherwise. DiskCardGame.PlayableCard killer The card that killed the dying card. Can be null. Returns Type Description System.Collections.IEnumerator . RespondsToOtherCardPreDeathInHand(CardSlot, Boolean, PlayableCard) Returns true if this should trigger before any card dies, but only if this card is in hand. Declaration bool RespondsToOtherCardPreDeathInHand(CardSlot deathSlot, bool fromCombat, PlayableCard killer) Parameters Type Name Description DiskCardGame.CardSlot deathSlot The slot that the dying card died in. System.Boolean fromCombat False if it was killed by a sacrifice, true otherwise. DiskCardGame.PlayableCard killer The card that killed the dying card. Can be null. Returns Type Description System.Boolean True if this should trigger before any card dies, but only if this card is in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnOtherCardResolveInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnOtherCardResolveInHand.html",
    "title": "Interface IOnOtherCardResolveInHand | InscryptionAPI",
    "keywords": "Interface IOnOtherCardResolveInHand Trigger that is triggered when any card gets played, but unlike normal OnOtherCardResolveOnBoard this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnOtherCardResolveInHand Methods OnOtherCardResolveInHand(PlayableCard) Trigger whatever events you want to run when any card gets played, but only if this card is in hand. Declaration IEnumerator OnOtherCardResolveInHand(PlayableCard resolvingCard) Parameters Type Name Description DiskCardGame.PlayableCard resolvingCard The card that got played. Returns Type Description System.Collections.IEnumerator . RespondsToOtherCardResolveInHand(PlayableCard) Returns true if this should trigger when any card gets played, but only if this card is in hand. Declaration bool RespondsToOtherCardResolveInHand(PlayableCard resolvingCard) Parameters Type Name Description DiskCardGame.PlayableCard resolvingCard The card that got played. Returns Type Description System.Boolean True if this should trigger when any card gets played, but only if this card is in hand. . Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPostItemUsed.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPostItemUsed.html",
    "title": "Interface IOnPostItemUsed | InscryptionAPI",
    "keywords": "Interface IOnPostItemUsed Trigger that is triggered after any item is used. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPostItemUsed Methods OnPostItemUsed(String, Boolean, Boolean) Trigger whatever events you want to run after an item is used. Declaration IEnumerator OnPostItemUsed(string itemName, bool success, bool isHammer) Parameters Type Name Description System.String itemName Internal name of the item. System.Boolean success Normally true, but false if a targeted use item (e.g. scissors) got the use cancelled. System.Boolean isHammer True if the item is the act 3 hammer, false otherwise. Returns Type Description System.Collections.IEnumerator . RespondsToPostItemUsed(String, Boolean, Boolean) Returns true if this should trigger after an item is used. Declaration bool RespondsToPostItemUsed(string itemName, bool success, bool isHammer) Parameters Type Name Description System.String itemName Internal name of the item. System.Boolean success Normally true, but false if a targeted use item (e.g. scissors) got the use cancelled. System.Boolean isHammer True if the item is the act 3 hammer, false otherwise. Returns Type Description System.Boolean True if this should trigger after an item is used. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPostScalesChanged.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPostScalesChanged.html",
    "title": "Interface IOnPostScalesChanged | InscryptionAPI",
    "keywords": "Interface IOnPostScalesChanged Trigger that is triggered after the scales are changed. Also includes information about the original damage and side that the damage is added at, before those values potentially get changed by IOnPreScalesChangedRef. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPostScalesChanged Methods OnPostScalesChanged(Int32, Boolean, Int32, Boolean) Run whatever events you want to trigger after damage is added to the scales. Declaration IEnumerator OnPostScalesChanged(int damage, bool toPlayer, int originalDamage, bool originalToPlayer) Parameters Type Name Description System.Int32 damage The damage that got added to the scales. System.Boolean toPlayer True if the damage got added to the player's side of the scales. System.Int32 originalDamage Original damage that would get added, before getting changed by IOnPreScalesChangedRef. System.Boolean originalToPlayer True if the damage was originally going to get added to the player's side, before getting changed by IOnPreScalesChangedRef. Returns Type Description System.Collections.IEnumerator . RespondsToPostScalesChanged(Int32, Boolean, Int32, Boolean) Returns true if this should trigger after damage is added to the scales. Declaration bool RespondsToPostScalesChanged(int damage, bool toPlayer, int originalDamage, bool originalToPlayer) Parameters Type Name Description System.Int32 damage The damage that got added to the scales. System.Boolean toPlayer True if the damage got added to the player's side of the scales. System.Int32 originalDamage Original damage that would get added, before getting changed by IOnPreScalesChangedRef. System.Boolean originalToPlayer True if the damage was originally going to get added to the player's side, before getting changed by IOnPreScalesChangedRef. Returns Type Description System.Boolean True if this should trigger after damage is added to the scales. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPostSingularSlotAttackSlot.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPostSingularSlotAttackSlot.html",
    "title": "Interface IOnPostSingularSlotAttackSlot | InscryptionAPI",
    "keywords": "Interface IOnPostSingularSlotAttackSlot Trigger that is triggered after a slot does an individual attack. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPostSingularSlotAttackSlot Methods OnPostSingularSlotAttackSlot(CardSlot, CardSlot) Trigger whatever events you want to run after a slot does an individual attack. Declaration IEnumerator OnPostSingularSlotAttackSlot(CardSlot attackingSlot, CardSlot targetSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot The slot that has just did the attack. DiskCardGame.CardSlot targetSlot The slot that the attacking slot attacked. Returns Type Description System.Collections.IEnumerator . RespondsToPostSingularSlotAttackSlot(CardSlot, CardSlot) Returns true if this should trigger after a slot does an individual attack. Declaration bool RespondsToPostSingularSlotAttackSlot(CardSlot attackingSlot, CardSlot targetSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot The slot that has just did the attack. DiskCardGame.CardSlot targetSlot The slot that the attacking slot attacked. Returns Type Description System.Boolean True if this should trigger after a slot does an individual attack. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPostSlotAttackSequence.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPostSlotAttackSequence.html",
    "title": "Interface IOnPostSlotAttackSequence | InscryptionAPI",
    "keywords": "Interface IOnPostSlotAttackSequence Trigger that is triggered after a slot does its attacks. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPostSlotAttackSequence Methods OnPostSlotAttackSequence(CardSlot) Trigger whatever events you want to run after a slot does its attacks. Declaration IEnumerator OnPostSlotAttackSequence(CardSlot attackingSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot The slot that just did its attacks. Returns Type Description System.Collections.IEnumerator . RespondsToPostSlotAttackSequence(CardSlot) Returns true if this should trigger after a slot does its attacks. Declaration bool RespondsToPostSlotAttackSequence(CardSlot attackingSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot The slot that just did its attacks. Returns Type Description System.Boolean True if this should trigger after a slot does its attacks. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPreItemUsed.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPreItemUsed.html",
    "title": "Interface IOnPreItemUsed | InscryptionAPI",
    "keywords": "Interface IOnPreItemUsed Trigger that is triggered before any item is used. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPreItemUsed Methods OnPreItemUsed(String, Boolean) Trigger whatever events you want to run before an item is used. Declaration IEnumerator OnPreItemUsed(string itemName, bool isHammer) Parameters Type Name Description System.String itemName Internal name of the item. System.Boolean isHammer True if the item is the act 3 hammer, false otherwise. Returns Type Description System.Collections.IEnumerator . RespondsToPreItemUsed(String, Boolean) Returns true if this should trigger before an item is used. Declaration bool RespondsToPreItemUsed(string itemName, bool isHammer) Parameters Type Name Description System.String itemName Internal name of the item. System.Boolean isHammer True if the item is the act 3 hammer, false otherwise. Returns Type Description System.Boolean True if this should trigger before an item is used. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPreScalesChanged.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPreScalesChanged.html",
    "title": "Interface IOnPreScalesChanged | InscryptionAPI",
    "keywords": "Interface IOnPreScalesChanged Trigger that is triggered before the scales are changed, after IOnPreScalesChangedRef. Also includes information about the original damage and side that the damage is added at, before those values potentially get changed by IOnPreScalesChangedRef. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPreScalesChanged Methods OnPreScalesChanged(Int32, Boolean, Int32, Boolean) Run whatever events you want to trigger before damage is added to the scales. Declaration IEnumerator OnPreScalesChanged(int damage, bool toPlayer, int originalDamage, bool originalToPlayer) Parameters Type Name Description System.Int32 damage The damage that is about to get added. System.Boolean toPlayer True if the damage is getting added to the player's side of the scales. System.Int32 originalDamage Original damage that would get added, before getting changed by IOnPreScalesChangedRef. System.Boolean originalToPlayer True if the damage was originally going to get added to the player's side, before getting changed by IOnPreScalesChangedRef. Returns Type Description System.Collections.IEnumerator . RespondsToPreScalesChanged(Int32, Boolean, Int32, Boolean) Returns true if this should trigger before damage is added to the scales. Declaration bool RespondsToPreScalesChanged(int damage, bool toPlayer, int originalDamage, bool originalToPlayer) Parameters Type Name Description System.Int32 damage The damage that is about to get added. System.Boolean toPlayer True if the damage is getting added to the player's side of the scales. System.Int32 originalDamage Original damage that would get added, before getting changed by IOnPreScalesChangedRef. System.Boolean originalToPlayer True if the damage was originally going to get added to the player's side, before getting changed by IOnPreScalesChangedRef. Returns Type Description System.Boolean True if this should trigger before damage is added to the scales. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPreScalesChangedRef.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPreScalesChangedRef.html",
    "title": "Interface IOnPreScalesChangedRef | InscryptionAPI",
    "keywords": "Interface IOnPreScalesChangedRef Data collection trigger that is triggered before the scales are changed, can be used to change the amount of damage added and to which side it's added. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPreScalesChangedRef Methods CollectPreScalesChangedRef(Int32, ref Int32, ref Boolean) Returns the new amount of damage that will be added to the scales. Declaration int CollectPreScalesChangedRef(int damage, ref int numWeights, ref bool toPlayer) Parameters Type Name Description System.Int32 damage Number of damage currently dealt. System.Int32 numWeights Number of weights currently added to the scales. Change this value to modify that number. System.Boolean toPlayer True if the damage is dealt to the player. Change this value to modify the side the damage is getting added to. Returns Type Description System.Int32 The new amount of damage that will be added to the scales. RespondsToPreScalesChangedRef(Int32, Int32, Boolean) Returns true if this should modify the damage added to the scales. Declaration bool RespondsToPreScalesChangedRef(int damage, int numWeights, bool toPlayer) Parameters Type Name Description System.Int32 damage Number of damage currently dealt. System.Int32 numWeights Number of weights currently added to the scales. System.Boolean toPlayer True if the damage is dealt to the player. Returns Type Description System.Boolean . Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnPreSlotAttackSequence.html": {
    "href": "api/InscryptionAPI.Triggers.IOnPreSlotAttackSequence.html",
    "title": "Interface IOnPreSlotAttackSequence | InscryptionAPI",
    "keywords": "Interface IOnPreSlotAttackSequence Trigger that is triggered before a slot does its attacks. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnPreSlotAttackSequence Methods OnPreSlotAttackSequence(CardSlot) Trigger whatever events you want to run before a slot does its attacks. Declaration IEnumerator OnPreSlotAttackSequence(CardSlot attackingSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot The slot that is about to do its attacks. Returns Type Description System.Collections.IEnumerator . RespondsToPreSlotAttackSequence(CardSlot) Returns true if this should trigger before a slot does its attacks. Declaration bool RespondsToPreSlotAttackSequence(CardSlot attackingSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot The slot that is about to do its attacks. Returns Type Description System.Boolean True if this should trigger before a slot does its attacks. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnTurnEndInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnTurnEndInHand.html",
    "title": "Interface IOnTurnEndInHand | InscryptionAPI",
    "keywords": "Interface IOnTurnEndInHand Trigger that is triggered when the turn ends, but unlike normal OnTurnEnd this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnTurnEndInHand Methods OnTurnEndInHand(Boolean) Trigger whatever events you want to run when the turn ends, but only if this card is in hand. Declaration IEnumerator OnTurnEndInHand(bool playerTurn) Parameters Type Name Description System.Boolean playerTurn True if it's the end of the player's turn, false otherwise. Returns Type Description System.Collections.IEnumerator . RespondsToTurnEndInHand(Boolean) Returns true if this should trigger when the turn ends, but only if this card is in hand. Declaration bool RespondsToTurnEndInHand(bool playerTurn) Parameters Type Name Description System.Boolean playerTurn True if it's the end of the player's turn, false otherwise. Returns Type Description System.Boolean True if this should trigger when the turn ends, but only if this card is in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnTurnEndInQueue.html": {
    "href": "api/InscryptionAPI.Triggers.IOnTurnEndInQueue.html",
    "title": "Interface IOnTurnEndInQueue | InscryptionAPI",
    "keywords": "Interface IOnTurnEndInQueue Trigger that is triggered when the turn ends, but unlike normal OnTurnEnd this one only works on cards in the opponent's queue. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnTurnEndInQueue Methods OnTurnEndInQueue(Boolean) Trigger whatever events you want to run when the turn ends, but only if this card is in the opponent's queue. Declaration IEnumerator OnTurnEndInQueue(bool playerTurn) Parameters Type Name Description System.Boolean playerTurn True if it's the end of the player's turn, false otherwise. Returns Type Description System.Collections.IEnumerator . RespondsToTurnEndInQueue(Boolean) Returns true if this should trigger when the turn ends, but only if this card is in the opponent's queue. Declaration bool RespondsToTurnEndInQueue(bool playerTurn) Parameters Type Name Description System.Boolean playerTurn True if it's the end of the player's turn, false otherwise. Returns Type Description System.Boolean True if this should trigger when the turn ends, but only if this card is in the opponent's queue. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IOnUpkeepInHand.html": {
    "href": "api/InscryptionAPI.Triggers.IOnUpkeepInHand.html",
    "title": "Interface IOnUpkeepInHand | InscryptionAPI",
    "keywords": "Interface IOnUpkeepInHand Trigger that is triggered each turn, but unlike normal OnUpkeep this one only works in hand. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IOnUpkeepInHand Methods OnUpkeepInHand(Boolean) Trigger whatever events you want to run at the start of the turn, but only if this card is in hand. Declaration IEnumerator OnUpkeepInHand(bool playerUpkeep) Parameters Type Name Description System.Boolean playerUpkeep True if it's the start of the player's turn, false otherwise. Returns Type Description System.Collections.IEnumerator . RespondsToUpkeepInHand(Boolean) Returns true if this should trigger at the start of the turn, but only if this card is in hand. Declaration bool RespondsToUpkeepInHand(bool playerUpkeep) Parameters Type Name Description System.Boolean playerUpkeep True if it's the start of the player's turn, false otherwise. Returns Type Description System.Boolean True if this should trigger at the start of the turn, but only if this card is in hand. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IPassiveAttackBuff.html": {
    "href": "api/InscryptionAPI.Triggers.IPassiveAttackBuff.html",
    "title": "Interface IPassiveAttackBuff | InscryptionAPI",
    "keywords": "Interface IPassiveAttackBuff Used when a card wants to provide a passive buff to other cards on the board Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IPassiveAttackBuff Methods GetPassiveAttackBuff(PlayableCard) Used to provide a passive attack buff to a target Declaration int GetPassiveAttackBuff(PlayableCard target) Parameters Type Name Description DiskCardGame.PlayableCard target Returns Type Description System.Int32 The amount of attack you want to buff the target by. Remarks Do not assume that the target is on your side of the board! There may be negative sigils that buff opposing cards. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IPassiveHealthBuff.html": {
    "href": "api/InscryptionAPI.Triggers.IPassiveHealthBuff.html",
    "title": "Interface IPassiveHealthBuff | InscryptionAPI",
    "keywords": "Interface IPassiveHealthBuff Used when a card wants to provide a passive buff to other cards on the board Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IPassiveHealthBuff Methods GetPassiveHealthBuff(PlayableCard) Used to provide a passive health buff to a target Declaration int GetPassiveHealthBuff(PlayableCard target) Parameters Type Name Description DiskCardGame.PlayableCard target Returns Type Description System.Int32 The amount of health you want to buff the target by. Remarks Do not assume that the target is on your side of the board! There may be negative sigils that buff opposing cards. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.IPreTakeDamage.html": {
    "href": "api/InscryptionAPI.Triggers.IPreTakeDamage.html",
    "title": "Interface IPreTakeDamage | InscryptionAPI",
    "keywords": "Interface IPreTakeDamage Trigger that is triggered right before a card takes damage. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface IPreTakeDamage Methods OnPreTakeDamage(PlayableCard, Int32) Trigger whatever events you want to run before a card takes damage. Declaration IEnumerator OnPreTakeDamage(PlayableCard source, int damage) Parameters Type Name Description DiskCardGame.PlayableCard source The attacking card; The source of the damage. System.Int32 damage The amount of damage to be delt. Returns Type Description System.Collections.IEnumerator . RespondsToPreTakeDamage(PlayableCard, Int32) Returns true if this should trigger before a card takes damage. Declaration bool RespondsToPreTakeDamage(PlayableCard source, int damage) Parameters Type Name Description DiskCardGame.PlayableCard source The attacking card; The source of the damage. System.Int32 damage The amount of damage to be delt. Returns Type Description System.Boolean True if this should trigger before a card takes damage. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.ISetupAttackSequence.html": {
    "href": "api/InscryptionAPI.Triggers.ISetupAttackSequence.html",
    "title": "Interface ISetupAttackSequence | InscryptionAPI",
    "keywords": "Interface ISetupAttackSequence Data collection trigger that collects data related to attacked slots. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public interface ISetupAttackSequence Methods CollectModifyAttackSlots(PlayableCard, OpposingSlotTriggerPriority, List<CardSlot>, List<CardSlot>, ref Int32, ref Boolean) Modifies the slots that will be targeted of any card. Declaration List<CardSlot> CollectModifyAttackSlots(PlayableCard card, OpposingSlotTriggerPriority modType, List<CardSlot> originalSlots, List<CardSlot> currentSlots, ref int attackCount, ref bool didRemoveDefaultSlot) Parameters Type Name Description DiskCardGame.PlayableCard card Card whose slots will be modified. OpposingSlotTriggerPriority modType Type of modification that is currently triggering. List < DiskCardGame.CardSlot > originalSlots Original slots for attack. List < DiskCardGame.CardSlot > currentSlots Current slots that are targeted. System.Int32 attackCount How many attacks the card does. System.Boolean didRemoveDefaultSlot True if the original (opposing) slot was removed by Bifurcated Strike or any other ability that does it. Returns Type Description List < DiskCardGame.CardSlot > Modified data about targeted slots for attack. GetTriggerPriority(PlayableCard, OpposingSlotTriggerPriority, List<CardSlot>, List<CardSlot>, Int32, Boolean) Gets the priority for this trigger. Triggers with a higher priority will trigger first. Declaration int GetTriggerPriority(PlayableCard card, OpposingSlotTriggerPriority modType, List<CardSlot> originalSlots, List<CardSlot> currentSlots, int attackCount, bool didRemoveDefaultSlot) Parameters Type Name Description DiskCardGame.PlayableCard card Card whose slots will be modified. OpposingSlotTriggerPriority modType Type of modification that is currently triggering. List < DiskCardGame.CardSlot > originalSlots Original slots for attack. List < DiskCardGame.CardSlot > currentSlots Current slots that are targeted. NOTE: THIS VALUE IS NOT UP TO DATE, GETTING PRIORITIES HAPPENS BEFORE THE MODIFICATION ITSELF. System.Int32 attackCount How many attacks the card does. NOTE: THIS VALUE IS NOT UP TO DATE, GETTING PRIORITIES HAPPENS BEFORE THE MODIFICATION ITSELF. System.Boolean didRemoveDefaultSlot True if the original (opposing) slot was removed by Bifurcated Strike or any other ability that does it. NOTE: THIS VALUE IS NOT UP TO DATE, GETTING PRIORITIES HAPPENS BEFORE THE MODIFICATION ITSELF. Returns Type Description System.Int32 The priority for this trigger. RespondsToModifyAttackSlots(PlayableCard, OpposingSlotTriggerPriority, List<CardSlot>, List<CardSlot>, Int32, Boolean) If true, this trigger will collect data from CollectModifyAttackSlots. Declaration bool RespondsToModifyAttackSlots(PlayableCard card, OpposingSlotTriggerPriority modType, List<CardSlot> originalSlots, List<CardSlot> currentSlots, int attackCount, bool didRemoveDefaultSlot) Parameters Type Name Description DiskCardGame.PlayableCard card Card whose slots will be modified. OpposingSlotTriggerPriority modType Type of modification that is currently triggering. List < DiskCardGame.CardSlot > originalSlots Original slots for attack. List < DiskCardGame.CardSlot > currentSlots Current slots that are targeted. System.Int32 attackCount How many attacks the card does. System.Boolean didRemoveDefaultSlot True if the original (opposing) slot was removed by Bifurcated Strike or any other ability that does it. Returns Type Description System.Boolean True if this trigger will collect data from CollectModifyAttackSlots. Extension Methods ListExtensions.Repeat<T>(T, Int32)"
  },
  "api/InscryptionAPI.Triggers.OpposingSlotTriggerPriority.html": {
    "href": "api/InscryptionAPI.Triggers.OpposingSlotTriggerPriority.html",
    "title": "Enum OpposingSlotTriggerPriority | InscryptionAPI",
    "keywords": "Enum OpposingSlotTriggerPriority Flag that tells IGetOpposingSlots when to trigger. Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax public enum OpposingSlotTriggerPriority Fields Name Description BringsBackOpposingSlot Bring back opposing slot - use this for opposing slot modifications that bring back the original opposing slot if it was removed like Trifurcated Strike. Normal Normal mode - use this for opposing slot modifications that either don't do anything to the original opposing slots or remove it. PostAdditionModification Post slot addition modification - use this for opposing slot modifications that don't interact with any other modification and instead just statically modify the finished result like Double Strike. ReplacesDefaultOpposingSlot Replaces default opposing slot - use this for opposing slot modifications that replace the original opposing slot like Omni Strike. Extension Methods ListExtensions.Repeat<OpposingSlotTriggerPriority>(Int32)"
  },
  "api/InscryptionAPI.Triggers.SlotAttackSlotPatches.html": {
    "href": "api/InscryptionAPI.Triggers.SlotAttackSlotPatches.html",
    "title": "Class SlotAttackSlotPatches | InscryptionAPI",
    "keywords": "Class SlotAttackSlotPatches Inheritance System.Object SlotAttackSlotPatches Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class SlotAttackSlotPatches Methods DamageToDealThisPhase(CardSlot, CardSlot) Declaration public static int DamageToDealThisPhase(CardSlot attackingSlot, CardSlot opposingSlot) Parameters Type Name Description DiskCardGame.CardSlot attackingSlot DiskCardGame.CardSlot opposingSlot Returns Type Description System.Int32"
  },
  "api/InscryptionAPI.Triggers.TakeDamagePatches.html": {
    "href": "api/InscryptionAPI.Triggers.TakeDamagePatches.html",
    "title": "Class TakeDamagePatches | InscryptionAPI",
    "keywords": "Class TakeDamagePatches Inheritance System.Object TakeDamagePatches Namespace : InscryptionAPI.Triggers Assembly : InscryptionAPI.dll Syntax [HarmonyPatch] public static class TakeDamagePatches"
  },
  "index.html": {
    "href": "index.html",
    "title": "Inscryption API | InscryptionAPI",
    "keywords": "Inscryption API Welcome to the site of the Inscryption Modding API! You can find the wiki and API documentation here. Some Links Inscryption Modding Discord Thunderstore Page GitHub Repository Credits Original version by cyantist. API 2.0 Contributors: BobbyShmurner divisionbyz0rro Eri IngoH JamesVeug julian-perge KellyBetty Nevernamed SpecialAPI Void Slime WhistleWind Windows10CE"
  },
  "wiki/ability_management.html": {
    "href": "wiki/ability_management.html",
    "title": "Ability Management | InscryptionAPI",
    "keywords": "Ability Management Abilities are unfortunately a little more difficult to manage than cards. First of all, they have an attached 'AbilityBehaviour' type which you must implement. Second, the texture for the ability is not actually stored on the AbilityInfo object itself; it is managed separately (bizarrely, the pixel ability icon is on the AbilityInfo object, but we won't get into all that). Regardless, the API will help you manage all of this with the helpful AbilityManager class. Simply create an AbilityInfo object, and then call AbilityManager.Add with that info object, the texture for the icon, and the type that implements the ability. Abilities inherit from DiskCardGame.AbilityBehaviour AbilityInfo myinfo = ...; Texture2D myTexture = ...; AbilityManager.Add(MyPlugin.guid, myInfo, typeof(MyAbilityType), myTexture); You can also use the AbilityManager.New method to simplify some of this process: AbilityInfo myInfo = AbilityManager.New(MyPlugin.guid, \"Ability Name\", \"Ability Description\", typeof(MyAbilityType), \"/art/my_icon.png\"); And there are also extension methods to help you here as well: AbilityManager.New(MyPlugin.guid, \"Ability Name\", \"Ability Description\", typeof(MyAbilityType), \"/art/my_icon.png\") .SetDefaultPart1Ability() .SetPixelIcon(\"/art/my_pixel_icon.png\"); Ability Extensions SetCustomFlippedTexture: Use this to give the ability a custom texture when it belongs to the opponent. SetPixelIcon: Use this to set the texture used when rendered as a GBC card. AddMetaCategories: Adds any number of metacategories to the ability. Will not duplicate. SetDefaultPart1Ability: Makes this appear in the part 1 rulebook and randomly appear on mid-tier trader cards and totems. SetDefaultPart3Ability: Makes this appear in the part 3 rulebook and be valid for create-a-card (make sure your power level is accurate here!) SetActivated: Sets whether or not the ability is an activated ability. Activated abilities can be clicked to trigger an effect. SetPassive: Sets whether or not the ability is a passive ability. Passive abilities don't do anything. SetOpponentUsable: Sets whether or not the ability can be used by the opponent (such as in a Totem battle). SetConduit: Sets whether or not the ability can be used to complete Circuits. SetConduitCell: Sets whether or not the ability is a conduit cell. Unsure of what this does. SetCanStack: Sets whether multiple copies of the ability will stack, activating once per copy. Optionally controls stack behaviour should a card with the ability evolve (see below). SetTriggersOncePerStack: Sets whether the ability (if it stacks) will only ever trigger once per stack. There's a...'feature' where stackable abilities will trigger twice per stack after a card evolves. Programming Abilities Abilities require an instance of AbilityInfo that contains the information about the ability, but they also require you to write your own class that inherits from AbilityBehaviour and describes how the ability functions. AbilityBehaviour contains a lot of virtual methods. For each event that can happen during a battle, there will be a 'RespondsToXXX' and an 'OnXXX' method that you need to override. The purpose of the 'RespondsToXXX' is to indicate if your ability cares about that event - you must return True in that method for the ability to fire. Then, to actually make the ability function, you need to implement your custom behavior in the 'OnXXX' method. See this example from the base game: public class Sharp : AbilityBehaviour { public override Ability Ability => Ability.Sharp; public override bool RespondsToTakeDamage(PlayableCard source) => source != null && source.Health > 0; public override IEnumerator OnTakeDamage(PlayableCard source) { yield return base.PreSuccessfulTriggerSequence(); base.Card.Anim.StrongNegationEffect(); yield return new WaitForSeconds(0.55f); yield return source.TakeDamage(1, base.Card); yield return base.LearnAbility(0.4f); yield break; } } Stat Icons Stat icons are unique abilities that apply specifically to a card's Health and/or Attack stats. Stat icons require an instance of StatIconInfo that contains the information about the ability, but they also require you to write your own class that inherits from VariableStatBehaviour and describes how the ability functions. When you implement a variable stat behavior, you need to implement the abstract method GetStateValues. This method returns an array of integers: the value at index 0 is the variable attack power, and the value at index 1 is the variable health. Here is an example from the base game: public class BellProximity : VariableStatBehaviour { protected override SpecialStatIcon IconType => SpecialStatIcon.Bell; protected override int[] GetStatValues() { int num = BoardManager.Instance.PlayerSlotsCopy.Count - base.PlayableCard.Slot.Index; int[] array = new int[2]; array[0] = num; return array; } } NOTE: you need to be very careful about how complicated the logic is in GetStatValues. This will be called every frame!! If you're not careful, you could bog the game down substantially. Special Triggered Abilities Special triggered abilities are a lot like regular abilities; however, they are 'invisible' to the player (that is, they do not have icons or rulebook entries). As such, the API for these is very simple. You simply need to provide your plugin guid, the name of the ability, and the type implementing the ability, and you will be given back a wrapper containing the ID of your newly created special triggered ability. Special triggered abilities inherit from DiskCardGame.SpecialCardBehaviour. public readonly static SpecialTriggeredAbility MyAbilityID = SpecialTriggeredAbilityManager.Add(MyPlugin.guid, \"Special Ability\", typeof(MySpecialTriggeredAbility)).Id; And now MyAbilityID can be added to CardInfo objects. Special abilities are programmed the same as regular abilities, except they do not have a metadata object associated with them (because they are not described or documented for the player) and they inherit from SpecialCardBehaviour instead of AbilityBehaviour. Here is an example from the base game: public class TrapSpawner : SpecialCardBehaviour { public override bool RespondsToDie(bool wasSacrifice, PlayableCard killer) => base.PlayableCard.OnBoard; public override IEnumerator OnDie(bool wasSacrifice, PlayableCard killer) { yield return new WaitForSeconds(0.35f); yield return BoardManager.Instance.CreateCardInSlot(CardLoader.GetCardByName(\"Trap\"), base.PlayableCard.Slot, 0.1f, true); yield return new WaitForSeconds(0.35f); yield break; } } Note how the code uses 'base.PlayableCard' instead of 'base.Card'. Keep this in mind when making special abilities."
  },
  "wiki/ascension.html": {
    "href": "wiki/ascension.html",
    "title": "Adding New Challenges | InscryptionAPI",
    "keywords": "Adding New Challenges The API supports adding new Challenges as part of Kaycee's Mod using the ChallengeManager class. You can add a new Challenge using ChallengeManager.Add, either by passing in a new AscensionChallengeInfo object or by passing the individual properties of your challenge (which will construct the information object for you). This will make your challenge automatically appear in the challenge selection screen. If you use the overload of Add that takes an AscensionChallengeInfo object, note that the \"challengeType\" field of type AscensionChallenge is completely irrelevant. This is an enumerated value, and it will be set for you by the ChallengeManager to ensure there is no collision with other challenges created by other mods. As such, you need to save the ID that is returned by the Add method of ChallengeManager so that you can reference it later. If your challenge can stack, set the stackable flag to 'true' when adding your challenge. This will cause it to appear twice in the challenge selection screen. Yes, this means stackable challenges are currently limited to a max of two. You will be responsible to write all of the necessary patches for your challenge to function. When writing those patches, you must make sure that the challenge is active before you do anything. This is entirely up to you - there is nothing in the API that can detect this for you. You should also make sure to alert the user whenever your challenge has triggered some change in the game. The ChallengeActivationUI class (from DiskCardGame) has a helper to alert the user. private static AscensionChallenge ID = ChallengeManager.Add ( Plugin.PluginGuid, \"Dummy Challenge\", \"This challenge doesn't do anything\", 15, Resources.Load<Texture2D>(\"Path/To/Texture\") ); [HarmonyPatch(...)] public static void DoSomething() { if (AscensionSaveData.Data.ChallengeIsActive(ID)) { ChallengeActivationUI.Instance.ShowActivation(ID); // Do some actual stuff } } Adding New Starter Decks Starter decks are relatively simple. They simply need a title, an icon, and a set of three cards. You can also optionally add an \"unlock level\" which prevents your starter deck from being unlocked until the player reaches a certain challenge level. This defaults to 0, which means that the starter deck will always be unlocked. What if you want to make a starter deck with cards from another mod? What if you aren't 100% sure that those cards are loaded at the time that your starter deck is loaded? You can solve this manually by creating a dependency, which forces BepInEx to load the other mod first. However, if that mod uses JSON Loader, you need to create a dependency on JSON Loader instead, which could (in some very bizarre situations) create a situation where you both need to load before and after JSON Loader. Rather than sort out all of these possible scenarios one-by-one, you can instead create a starter deck with a set of three card names (strings) instead of three CardInfo objects. This will create a \"delayed loading\" scenario where the actual starter deck info won't be built until right before the Starter Deck screen loads. Both patterns are shown here: StarterDeckInfo myDeck = ScriptableObject.CreateInstance<StarterDeckInfo>(); myDeck.title = \"Pelts\"; myDeck.iconSprite = TextureHelper.GetImageAsSprite(\"art/pelts_deck_icon.png\", TextureHelper.SpriteType.StarterDeckIcon); myDeck.cards = new () { CardLoader.GetCardByName(\"PeltWolf\"), CardLoader.GetCardByName(\"PeltHare\"), CardLoader.GetCardByName(\"PeltHare\") }; StarterDeckManager.Add(MyPlugin.Guid, myDeck); StarterDeckManager.New(MyPlugin.Guid, \"Pelts\", \"art/pelts_deck_icon.png\", new string[] { \"PeltWolf\", \"PeltHare\", \"PeltHare\"}); Adding Custom Screens to Kaycee's Mod This API supports adding new screens to Kaycee's Mod that execute before a run starts. New screens can use the AscensionScreenSort attribute to influence their sort order. Custom screens will execute in the following order: Starter Decks Select Challenges Custom Screens Requires Start Prefers Start No Preference (default) Prefers End Requires End Start Run To create a custom screen, you need to write a special screen behavior class that inherits from AscensionRunSetupScreenBase (which in turn inherits from MonoBehavior). You will be required to override the following: headerText: The displayed title on the screen showCardDisplayer: Set this to return true if you want the panel on your screen that shows card information showCardPanel: Set this to return true if you want the scrollable panel on your screen that shows selectable cards There is also a virtual method called InitializeScreen which you should use to build the content of your screen. In general, you are responsible for doing all the hard work of building your screen. However, all the boilerplate content is built for you. You will automatically be given the continue and back buttons, the header (which shows the current challenge level), the footer (which displays changes as the challenge level changes), and the title of your screen. You can also optionally be given a scrollable card selection panel and card information displayer panel if you need them (using the properties shown above). Once you've written the custom screen class, you need to register it with AscensionScreenManager like so: AscensionScreenManager.RegisterScreen<MyCustomScreen>();"
  },
  "wiki/asset_bundle.html": {
    "href": "wiki/asset_bundle.html",
    "title": "Asset Bundles | InscryptionAPI",
    "keywords": "Asset Bundles Asset bundles are how you can import your own models, textures, gameobjects and more into Inscryption. Think of them as fancy .zip's that are supported by Unity. Making Asset Bundles Make a Unity project. Make sure you are using 2019.4.24f1 or your models will not show in-game. Install the AssetBundleBrowser package. (Window->Package Manager) Select the assets you want to be in the bundle (They need to be in the hierarchy, not in a scene!) At the bottom of the Inspector window you'll see a section labedled \"Asset Bundle\" Assign a new asset bundle name (example: testbundleexample) Build Asset bundles Window->AssetBundle Browser Go to the output path using file explorer There should be a file called 'testbundleexample' in that folder (It will not have an extension!) Copy this file into your mod folder Loading Asset Bundles if (AssetBundleHelper.TryGet<GameObject>(\"pathToBundleFile\", \"nameOfPrefabInsideAssetBundle\", out GameObject prefab)) { GameObject clone = GameObject.Instantiate(prefab); // Do things with gameobject! } First parameter is the path to the asset bundle that we copied to your mod folder in #9. Second parameter is the name of the prefab or texture... etc that you changed to have the asset bundle name in #4. Third parameter is the result of taking the object out of the asset bundle. NOTE : Getting a prefab from an asset bundle does not load it into the world. You need to clone it with Instantiate! NOTE 2 : If the GameObject is being created but the model isn't showing up in-game, make sure you are using Unity 2019.4.24f1 to build the asset bundle; the model will not show up otherwise!"
  },
  "wiki/card_management.html": {
    "href": "wiki/card_management.html",
    "title": "Card Management | InscryptionAPI",
    "keywords": "Card Management Card management is handled through InscryptionAPI.Card.CardManager. You can simply call CardManager.Add with a CardInfo object and that card will immediately be added to the card pool: CardInfo myCard = ...; CardManager.Add(myCard); // Boom: done You can create CardInfo objects however you want. However, there are some helper methods available to simplify this process for you. The most import of these is CardManager.New(name, displayName, attack, health, optional description) which creates a new card and adds it for you automatically: CardInfo myCard = CardManager.New(\"example_card\", \"Sample Card\", 2, 2, \"This is just a sample card\"); From here, you can modify the card as you wish, and the changes will stay synced with the game: CardInfo myCard = CardManager.New(\"example_card\", \"Sample Card\", 2, 2, \"This is just a sample card\"); myCard.cost = 2; However, there are also a number of extension methods you can chain together to perform a number of common tasks when creating a new card. Here is an example of them in action, followed by a full list: CardInfo myCard = CardManager.New(\"example_card\", \"Sample Card\", 2, 2, \"This is just a sample card\") .SetDefaultPart1Card() .SetCost(bloodCost: 1, bonesCost: 2) .SetPortrait(\"/art/sample_portrait.png\", \"/art/sample_emissive_portrait.png\") .AddAbilities(Ability.BuffEnemies, Ability.TailOnHit) .SetTail(\"Geck\", \"/art/sample_lost_tail.png\") .SetRare(); Card Extensions The following card extensions are available (may not be up-to-date): SetPortrait: Assigns the card's portrait art, and optionally its emissive portrait as well. You can supply Texture2D directly, or supply a path to the card's art. SetEmissivePortrait: If a card already has a portrait and you just want to modify its emissive portrait, you can use this. Note that this will throw an exception if the card does not have a portrait already. SetAltPortrait: Assigns the card's alternate portrait. SetPixelPortrait: Assigns the card's pixel portrait (for GBC mode). SetCost: Sets the cost for the card. There are also extensions for setting Blood, Bones, Energy, and Mox individually. SetDefaultPart1Card: Sets all of the metadata necessary to make this card playable in Part 1 (Leshy's cabin). SetGBCPlayable: Sets all of the metadata necessary to make this card playable in Part 2. SetDefaultPart3Card: Sets all of the metadata necessary to make this card playable in Part 3 (P03's cabin). SetRare: Sets all of the metadata ncessary to make this card look and play as Rare. SetTerrain: Sets all of the metadata necessary to make this card look and play as terrain. SetPelt: Sets all of the metadeta necessary to make this card look and play as a pelt card. Can optionally choose whether the card will trigger Pelt Lice's special ability. SetTail: Creates tail parameters. Note that you must also add the TailOnHit ability for this to do anything. SetIceCube: Creates ice cube parameters. Note that you must also add the IceCube ability for this to do anything. SetEvolve: Creates evolve parameters. Note that you must also add the Evolve ability for this to do anything. SetOnePerDeck: Sets whether or not the card is unique (only one copy in your deck per run). SetHideAttackAndHealth: Sets whether or not the card's Power and Health stats will be displayed or not. SetGemify: Sets whether or not the card should be Gemified by default. SetAffectedByTidalLock: Sets whether or not the card will be killed by the effect of the Tidal Lock sigil. AddAbilities: Add any number of abilities to the card. This will add duplicates. AddAppearances: Add any number of appearance behaviors to the card. No duplicates will be added. AddMetaCategories: Add any number of metacategories to the card. No duplicates will be added. AddTraits: Add any number of traits to the card. No duplicates will be added. AddTribes: Add any number of tribes to the card. No duplicates will be added. AddSpecialAbilities: Add any number of special abilities to the card. No duplicates will be added. Evolve, Tail, Ice Cube, and Delayed Loading It's possible that at the time your card is built, the card that you want to evolve into has not been built yet. You can use the event handler to delay building the evolve/icecube/tail parameters of your card, or you can use the extension methods above which will handle that for you. Note that if you use these extension methods to build these parameters, and the card does not exist yet, the parameters will come back null. You will not see the evolve parameters until you add the evolution to the card list and you get a fresh copy of the card from CardLoader (as would happen in game). CardManager.New(\"Example\", \"Base\", \"Base Card\", 2, 2).SetEvolve(\"Evolve Card\", 1); // \"Evolve Card\" hasn't been built yet Plugin.Log.LogInfo(CardLoader.GetCardByName(\"Example_Base\").evolveParams == null); // TRUE! CardInfo myEvolveCard = CardManager.New(\"Example\", \"Evolve\", \"Evolve Card\", 2, 5); Plugin.Log.LogInfo(CardLoader.GetCardByName(\"Example_Base\").evolveParams == null); // FALSE! NOTE: for card blueprints (see Encounters ), Evolve, Tail, and Ice Cube will NOT work properly if you use delayed loading. To solve this, simply create the evolution/tail/ice cube card before the base card like so: CardInfo myEvolveCard = CardManager.New(\"Example\", \"Evolve\", \"Evolve Card\", 2, 5); // build \"Evolve Card\" first CardManager.New(\"Example\", \"Base\", \"Base Card\", 2, 2).SetEvolve(myEvolveCard, 1); // then create the base card Editing Existing Cards If you want to edit a card that comes with the base game, you can simply find that card in the BaseGameCards list in CardManager, then edit it directly: CardInfo card = CardManager.BaseGameCards.CardByName(\"Porcupine\"); card.AddTraits(Trait.KillsSurvivors); There is also an advanced editing pattern that you can use to not only edit base game cards, but also potentially edit cards that might be added by other mods. To do this, you will add an event handler to the CardManager.ModifyCardList event. This handler must accept a list of CardInfo objects and return a list of CardInfo objects. In that handlers, look for the cards you want to modify and modify them there. In this example, we want to make all cards that have either the Touch of Death or Sharp Quills ability to also gain the trait \"Kills Survivors\": CardManager.ModifyCardList += delegate(List<CardInfo> cards) { foreach (CardInfo card in cards.Where(c => c.HasAbility(Ability.Sharp) || c.HasAbility(Ability.Deathtouch))) card.AddTraits(Trait.KillsSurvivors); return cards; }; By doing this, you can ensure that not on all of the base game cards get modified, but also all other cards added by other mods. Card Appearance Behaviours Card Appearance Behaviours are special classes that modify a card's appearance in-game. They can be built into a CardInfo, or added to a card mid-game. Appearance behaviours are implemented similarly to special abilities (for more information on those, see here ). public readonly static CardAppearanceBehaviour.Appearance MyAppearanceID = CardAppearanceBehaviourManager.Add(MyPlugin.guid, \"Special Appearance\", typeof(MyAppearanceBehaviour)).Id; Appearance behaviours implement the CardAppearanceBehaviour class. There is an abstract method called ApplyAppearance that you must implement - this where you'll override the default appearance of the card. There are also three other virtual methods: ResetAppearance, OnCardAddedToDeck, and OnPreRenderCard that give other hooks for changing the card's appearance. Here is an example from the base game: public class RedEmission : CardAppearanceBehaviour { public override void ApplyAppearance() { base.Card.RenderInfo.forceEmissivePortrait = true; base.Card.StatsLayer.SetEmissionColor(GameColors.Instance.glowRed); } public override void ResetAppearance() { base.Card.RenderInfo.forceEmissivePortrait = false; base.Card.StatsLayer.SetEmissionColor(GameColors.Instance.glowSeafoam); } }"
  },
  "wiki/custom_costs.html": {
    "href": "wiki/custom_costs.html",
    "title": "Custom Card Costs | InscryptionAPI",
    "keywords": "Custom Card Costs In Inscryption, the player will encounter four different resources as they play: Blood, Bones, Energy, and Mox/Gems. These resources are needed in order to play cards with the corresponding card cost, with most cards costing at least one of these four costs. With the API, it's possible to create cards that cost multiple types of resources, giving modders greater creativity when creating cards. There may come a time where the base costs don't meet your needs. Or maybe you just want to make a new cost. Regardless of reason, the API provides a few ways of creating a basic card cost using the CardCostManager. The community patches contain a TestCost class that implements many of the features this page will cover. Creating a New Cost To create a new card cost, you need to create a new class that inherits from the API's CustomCardCost class. The CustomCardCost class provides you with the basic functionality to ensure your cost works. Note that the API does not provide support for custom cost resources, so you will need to create the logic for it yourself through patching. Once you have created your cost's class, you need to register it with the API. An example for all this can be found below: // for simplicity, this cost replicates the logic by the energy cost public class MyCardCost : CustomCardCost { // this is a required field, and should be equal to the name you pass into the API when registering your cost public override string CostName => \"TestCost\"; // whether or not this cost's price has been satisfied by the card public override bool CostSatisfied(int cardCost, PlayableCard card) { // if the player has enough energy to pay the cost // takes the vanilla energy cost into account return cardCost <= (ResourcesManager.Instance.PlayerEnergy - card.EnergyCost); } // the dialogue that's played when you try to play a card with this cost, and CostSatisfied is false public override string CostUnsatisfiedHint(int cardCost, PlayableCard card) { return $\"Eat your greens aby. {card.Info.DisplayedNameLocalized}\"; } // this is called after a card with this cost resolves on the board // if your cost spends a resource, this is where you'd put that logic public override IEnumerator OnPlayed(int cardCost, PlayableCard card) { // reduce the player's current energy by the card's cost yield return ResourcesManager.Instance.SpendEnergy(cardCost); } } public void AddCost() { // when registering your card, you need to provide 2 Func's: one for grabbing the cost texture in the 3D Acts, and one for grabbing the pixel texture in Act 2 // if your cost is exclusive to one part of the game, you can pass in null for the appropriate Func. CardCostManager.Register(\"api\", \"TestCost\", typeof(TestCost), TextureMethod, PixelTextureMethod); } When registering your cost, you can pass a static method for the Func's instead of creating a delegate. These methods MUST have 3 parameters types: int, CardInfo, PlayableCard; and return a Texture2D. The int parameter represents the card's cost, and the CardInfo and PlayableCard parameters represent the current CardInfo and PlayableCard being checked. Note that the PlayableCard parameter can be null public static Texture2D TextureMethod(int cardCost, CardInfo info, PlayableCard card) { return TextureHelper.GetImageAsTexture($\"myCost_{cardCost}\"); } public static Texture2D PixelTextureMethod(int cardCost, CardInfo info, PlayableCard card) { return TextureHelper.GetImageAsTexture($\"myCost_pixel_{cardCost}\"); // if you want the API to handle adding stack numbers, you can instead provide a 7x8 texture like so: // return Part2CardCostRender.CombineIconAndCount(cardCost, TextureHelper.GetImageAsTexture(\"myCost_pixel_7x8\")); } Card cost textures vary based on what part of the game the cost will be displayed in. For Act 1, textures must be 64x28. In Act 2 they can be 30x8 at maximum or 7x8 (see above). Act 3 has no set size but they should be no larger than 300x78. Negative Costs, Cost Tier, and Turn 2 Play The API allows you to define whether or not negative cost values should be considered in the game. This is false by default, meaning negative costs on cards will be read as 0 by the API (the actual assigned value is not changed). You can use SetCanBeNegative to change this value, or directly modify the CanBeNegative field. Cost tier is an integer denoting how expensive a card is, with each cost having its own formula that adds to the tier. From example, the formula for Bones' tier is (amount / 3), rounded down. By default, custom costs are not accounted when determining a card's cost tier; this can be fixed using SetCostTier to define the function to use. public static void Init() { FullCardCost cost = CardCostManager.Register(InscryptionAPIPlugin.ModGUID, \"TestCost\", typeof(TestCost), Texture3D, TexturePixel); cost.SetCostTier(CostTier); } public static int CostTier(int amount) { return Mathf.FloorToInt(amount / 2f); } A vital part of Inscryption's gameplay is the fair hand mechanic; when a battle starts, the game will give you at least one card that can be played immediately, as well as a card that can be played by the second turn. By default, when the game checks if a card with custom costs can be played by turn 2, it will return 2 - even if it can't be. To fix this, you'll need to set your cost's CanBePlayedByTurn2WithHand function (long name, I know): public static void Init() { CardCostManager.FullCardCost fullCardCost = CardCostManager.Register(InscryptionAPIPlugin.ModGUID, \"TestCost\", typeof(TestCost), Texture3D, TexturePixel); fullCardCost.SetCanBePlayedByTurn2WithHand(CanBePlayed); } // amount is the card's cost amount, and hand is the list of cards in the player's hand public static bool CanBePlayed(int amount, CardInfo card, List<CardInfo> hand) { // TestCost is just a copy of Energy, so any card that costs 2 or less will be playable by turn 2 return amount <= 2; } Cost Choice Nodes If you want your cost to be chooseable in Act 1 at cost choice nodes, the API provides a method to do so: public static void Init() { CardCostManager.FullCardCost fullCardCost = CardCostManager.Register(InscryptionAPIPlugin.ModGUID, \"TestCost\", typeof(TestCost), Texture3D, TexturePixel); // if true, assigns a custom ResourceType to the cost, letting it be found at cost choice nodes. // rewardBack is the texture that will be displayed at the choice node, and is 125 x 190 in size fullCardCost.SetFoundAtChoiceNodes(isChoice: true, rewardBack: (Texture2D)ResourceBank.Get<Texture>(\"Art/Cards/RewardBacks/card_rewardback_bird\")); } Looking at the code above, you may be wondering what a ResourceType is. To put it simply, the ResourceType is used by the game to determine what costs will be offered to the player, and then is used to determine what cards the player can receive. Different Resource Amounts Alongside a ResourceType, the game can further distinguish between different amounts of that resource when offering choices. By default, a custom cost at the choice node will give you any valid card with that cost, regardless of how many resources it needs. This is similar to how Bones and Energy are handled, but what if you want your cost to be handled like Blood? Being able to choose being a card that costs 1, 2, or 3 of your cost? Well, all you need to do is use a variant of SetFoundAtChoiceNodes like so: public static void Init() { CardCostManager.FullCardCost fullCardCost = CardCostManager.Register(InscryptionAPIPlugin.ModGUID, \"TestCost\", typeof(TestCost), Texture3D, TexturePixel); // in this version of the method, you must provide a Func instead of a Texture2D. // this Func will be used to determine the correct rewardback texture to use for each different valid amount. fullCardCost.SetFoundAtChoiceNodes(isChoice: true, rewardBackFunc: GetRewardBack, 1, 2, 4); // next time we go to a cost choice node, we may be able to choose between cards that cost 1, 2, or 4 TestCost. } Alternatively, you can set the FullCardCost object's 'ChoiceAmounts' field to an integer array containing the amounts. Grouping Different Costs In the event you're adding multiple custom costs to the game, you may want to group them all into a single choice. Maybe they're all related to each other, or you don't want to push out other choices at the node. Either way, the API offers this functionality. private void Example() { FullCardCost cost = CardCostManager.Register(...); cost.ChoiceAmounts = new int[] { 1, 4, 7 }; } In order to group custom costs together, they must share the same ResourceType value. public static void Init() { // firstly, we'll want to mark one of our costs as chooseable CardCostManager.FullCardCost fullCardCost = CardCostManager.Register(InscryptionAPIPlugin.ModGUID, \"TestCost\", typeof(TestCost), Texture3D, TexturePixel); fullCardCost.SetFoundAtChoiceNodes(isChoice: true, rewardBack: (Texture2D)ResourceBank.Get<Texture>(\"Art/Cards/RewardBacks/card_rewardback_bird\")); // then when creating subsequent costs, we want to set their ResourceType to the same one being used by our first cost CardCostManager.FullCardCost fullCardCost2 = CardCostManager.Register(InscryptionAPIPlugin.ModGUID, \"TestCost2\", typeof(TestCost2), Texture3D2, TexturePixel2); fullCardCost2.ResourceType = fullCardCost.ResourceType; } Note that grouped costs are incompatible with multiple-amount costs, meaning if one of the grouped costs has different possible choice amounts defined, they will be ignored. Adding Costs to Cards Custom costs are added to cards using the API's extended properties system and can be accessed the same way. For clarity of purpose, the API provides some extension methods for setting a CardInfo's custom cost: public void AddCard() { CardInfo info = CardManager.New(\"myMod\", \"custom_card\", \"Card\", 1, 1); info.SetCustomCost(\"TestCost\", 1); int cost = info.GetCustomCost(\"Test\") // equal to 1 } Custom Costs for Death Cards Death cards aren't technically cards; they're card mods that are added to a template card. Because of this, simply adding an extended property to them won't work, since properties apply to ALL copies of the card. If you want to create a death card that uses a custom play cost, you'll need to create a new card and then add properties to that new CardInfo. Fortunately, the API's DeathCardManager is here to handle all this. CreateCustomDeathCard() will return a new CardInfo that will represent your custom death card, using the data from the CardModificationInfo you give it to set the card's name, stats, etc.. private void AddCustomDeathCard() { CardModificationInfo deathCardMod = new CardModificationInfo(2, 2) .SetNameReplacement(\"Mabel\").SetSingletonId(\"wstl_mabel\") .SetBonesCost(2).AddAbilities(Ability.SplitStrike) .SetDeathCardPortrait(CompositeFigurine.FigurineType.SettlerWoman, 5, 2) .AddCustomCostId(\"CustomCost\", 1); // you can then add your newly created death card to the list of default death card mods like so DeathCardManager.AddDefaultDeathCard(deathCardMod); } Further Functionality In older versions of the API, adding custom costs (or their textures at least) was handled by the community patches. These methods still exist for use, and this section will go over how to use them to add cost textures the old way. using InscryptionCommunityPatch.Card; using InscryptionAPI.Helpers; Part1CardCostRender.UpdateCardCost += delegate(CardInfo card, List<Texture2D> costs) { int myCustomCost = card.GetExtensionPropertyAsInt(\"myCustomCardCost\") ?? 0; // GetExtensionPropertyAsInt can return null, so remember to check for that if (myCustomCost > 0) costs.Add(TextureHelper.GetImageAsTexture($\"custom_cost_{myCustomCost}.png\")); } For adding custom costs to Act 2, you have two main ways of going about it: using InscryptionCommunityPatch.Card; using InscryptionAPI.Helpers; // if you want the API to handle adding stack numbers, provide a - 7x8 - texture representing your cost's icon. Part2CardCostRender.UpdateCardCost += delegate(CardInfo card, List<Texture2D> costs) { int myCustomCost = card.GetExtensionPropertyAsInt(\"myCustomCardCost_pixel\") ?? 0; if (myCustomCost > 0) { Texture2D customCostTexture = TextureHelper.GetImageAsTexture($\"custom_cost_pixel.png\"); costs.Add(Part2CardCostRender.CombineIconAndCount(myCustomCost, customCostTexture)); } } // if you want more control over your cost's textures, or don't want to use stack numbers, provide a - 30x8 - texture for your custom cost. Part2CardCostRender.UpdateCardCost += delegate(CardInfo card, List<Texture2D> costs) { int myCustomCost = card.GetExtensionPropertyAsInt(\"myCustomCardCost_pixel\") ?? 0; if (myCustomCost > 0) { costs.Add(TextureHelper.GetImageAsTexture($\"custom_cost_{myCustomCost}_pixel.png\")); } } Act 3 Card costs in Act 3 are a tad more complex since Act 3 cards display costs as 3D objects rather than simply flat textures. In practice, this means that you have more control over a cost's appearance than in other acts. There are two custom cost events to hook into: Part3CardCostRender.UpdateCardCostSimple provides a quick way to provide/modify the cost textures that will be rendered on the card. Part3CardCostRender.UpdateCardCostComplex provides more advanced functionality, letting you modify a custom cost's GameObject directly, allowing you to attach any arbitrary amount of further objects/components as you wish. Basic Card Cost If you just want to display a basic card cost, all you need to do is prepare an icon that represents a single unit of your custom cost. For example, if you are building a custom cost for currency, you need an icon that represents spending one currency (for example, a $ symbol). The width and height of the icon are up to you, but keep in mind that they will be placed onto a region that is 300x73 pixels, so the height should not exceed 73 pixels, and the wider the icon is, the fewer will fit on the space. The Part3CardCostRender.GetIconifiedCostTexture helper method accepts one of these icons as well as a cost value and generates a pair of textures displaying that total cost. The first texture is the default texture (albedo) and the second is an emissive texture. If there is enough space in the 300x73 region to repeat the icon enough times to display the cost, it will do so. Otherwise, it will render a 7-segement display. In the \"currency cost\" example, where the icon is the $ symbol: A cost of 3 would be rendered as $$$ A cost of 10 would be rendered as $ x10 From here, you just need to hook into the event. Each custom cost is represented by a CustomCostRenderInfo object, which holds the textures and game objects that will become the cost rendering on the card. Each of these objects needs a unique identifier so the can be found later. In this simple example, that identifier isn't particularly useful because we won't use the second part of the event, but it's still required. using InscryptionCommunityPatch.Card; using InscryptionAPI.Helpers; MyIconTexture = TextureHelper.GetImageAsTexture(\"cost_icon.png\"); Part3CardCostRender.UpdateCardCostSimple += delegate(CardInfo card, List<Part3CardCostRender.CustomCostRenderInfo> costs) { int myCustomCost = card.GetExtensionPropertyAsInt(\"myCustomCardCost\"); costs.add(new (\"MyCustomCost\", Part3CardCostRender.GetIconifiedCostTexture(MyIconTexture, myCustomCost))); } Advanced Card Costs You can also directly modify the card costs by adding new game objects to them, using the UpdateCardCostComplex event. This gives you complete creative freedom, but does require you to truly understand the Unity engine to be able to make it work. To do this, don't add any textures to the render info during the first event. You can then access the GameObject during the second event and do whatever you want: using InscryptionCommunityPatch.Card; using InscryptionAPI.Helpers; using UnityEngine; Part3CardCostRender.UpdateCardCostSimple += delegate(CardInfo card, List<Part3CardCostRender.CustomCostRenderInfo> costs) { costs.add(new (\"MyCustomCost\")); } Part3CardCostRender.UpdateCardCostComplex += delegate(CardInfo card, List<Part3CardCostRender.CustomCostRenderInfo> costs) { GameObject costObject = costs.Find(c => c.name.Equals(\"MyCustomCost\")).CostContainer; // Now I can add things to the cost object directly. }"
  },
  "wiki/custom_properties.html": {
    "href": "wiki/custom_properties.html",
    "title": "Custom/Extended Properties | InscryptionAPI",
    "keywords": "Custom/Extended Properties The API implements a system of custom properties that you can add to CardInfo's, AbilityInfo's, and CardModificationInfo's, and then retrieve them as needed. In the same way that you can use Evolve parameters to make the evolve ability work, or the Ice Cube parameters to make the IceCube ability work, this can allow you to set custom parameters to make your custom abilities work. // adding a custom property to a CardInfo CardInfo sample = CardLoader.CardByName(\"MyCustomCard\"); sample.SetExtendedProperty(\"CustomPropertyName\", \"CustomPropertyValue\"); string propValue = sample.GetExtendedProperty(\"CustomPropertyName\"); Reserved Properties Some extended properties are reserved by the API for certain uses. The following are some extension properties you can use for your cards. If you're using C# you can set these properties using their respective setter method, and can retrieve these properties with the appropritate getter method. For JsonLoader users, these properties can be accessed using the same method as accessing any other extended property. NOTE THAT THE NAMES ARE CASE-SENSITIVE. Property Name Affected Type Value Type Description Extension Method TriggersOncePerStack AbilityInfo Boolean If the ability should trigger twice when the card evolves. SetTriggersOncePerStack HideSingleStacks AbilityInfo Boolean If making an ability hidden should hide all of an ability's stacks or only one per. SetHideSingleStacks AffectedByTidalLock CardInfo Boolean If the card should be killed by the effect of Tidal Lock. SetAffectedByTidalLock TransformerCardId CardInfo String The name of the card this card will transform into when it has the Transformer sigil. SetTransformerCardId RemoveGreenGem CardModificationInfo Boolean Removes the Green Mox from the card. RemoveGreenGemCost* RemoveOrangeGem CardModificationInfo Boolean Removes the Green Mox from the card. RemoveOrangeGemCost* RemoveBlueGem CardModificationInfo Boolean Removes the Green Mox from the card. RemoveBlueGemCost* You can also use RemoveGemsCost to remove multiple gems at once"
  },
  "wiki/getting_started.html": {
    "href": "wiki/getting_started.html",
    "title": "Getting Started: Installation | InscryptionAPI",
    "keywords": "Getting Started: Installation To begin, we'll go over how to install BepInEx, the framework all Inscryption mods use. This is a necessary step to playing modded Inscryption, so be sure to follow this carefully. Installing with a Mod Manager This is the recommended way to install BepInEx to the game. Download and install Thunderstore Mod Manager or r2modman . Click the Install with Mod Manager button on the top of BepInEx's page. Run the game via the mod manager. Installing Manually Install BepInEx by pressing 'Manual Download' and extract the contents into a folder. Do not extract into the game folder! Move the contents of the 'BepInExPack_Inscryption' folder into the game folder (where the game executable is). Run the game. If everything was done correctly, you will see the BepInEx console appear on your desktop. Close the game after it finishes loading. Install MonoModLoader and extract the contents into a folder. Move the contents of the 'patchers' folder into 'BepInEx/patchers' (If any of the mentioned BepInEx folders don't exist, just create them). Install Inscryption API and extract the contents into a folder. Move the contents of the 'plugins' folder into 'BepInEx/plugins' and the contents of the 'monomod' folder into the 'BepInEx/monomod' folder. Run the game again. If everything runs correctly, a message will appear in the console telling you that the API was loaded. Installing on the Steam Deck Download r2modman on the Steam Deck’s Desktop Mode and open it from its download using its AppImage file. Download the mods you plan on using and their dependencies.. Go to the setting of the profile you are using for the mods and click Browse Profile Folder . Copy the BepInEx folder, then go to Steam and open Inscryption's Properties menu Go to Installed Files click Browse to open the folder containing Inscryption's local files; paste the BepInEx folder there. Enter Gaming Mode and check 'Force the use of a specific Steam Play compatibility tool' in the Properties menu under Compatibility . Go to the launch parameters and enter WINEDLLOVERRIDES=“winhttp.dll=n,b” %command% . Open Inscryption. If everything was done correctly, you should see a console appear on your screen. Mac & Linux Follow the steps here first: https://docs.bepinex.dev/articles/user_guide/installation/index.html Next do steps 4-8 of the Manual Installation Your game should be setup for inscryption modding now Getting Started: Modding Modding Inscryption requires a knowledge of coding in C#, and in many cases an understanding of how to patch the game using HarmonyPatch. If you're unfamiliar with any of this, or just want to create cards and sigils, you can use JSONLoader . Modding with JSONLoader JSONLoader is a versatile mode that provides a more beginner-friendly way of creating new cards and abilities for Inscryption using JSON syntax, which is much simpler than C#. JSONLoader's documentation can be found here . A video tutorial covering how to use JSONLoader can be found here . Modding with C# To begin modding with C#, you will need to create a new C# project using a code editor. We recommend and assume you're using Microsoft's Visual Studio. Your project's target framework needs to be netstandard2.0 . Once your project's created, go to Project > Manage NuGet Packages . Click the dropdown menu for 'Package source' and check that 'BepInEx' and 'nuget' is there. If BepInEx or nuget aren't an available source, we need to add them. To add a new package source, click on the gear icon next to the package source selector, then click the large green plus-sign. To add BepInEx, change the name to 'BepInEx' and the source link to ' https://nuget.bepinex.dev/v3/index.json '. To add nuget, change the name to 'nuget' and the source link to ' https://nuget.windows10ce.com/nuget/v3/index.json '. Change the package source to 'All' then click 'Browse'. We want to install the following packages ( Make sure the version numbers match! ): BepInEx.Analyzers v1.0.8 BepInEx.Core v5.4.19 HarmonyX v2.9.0 Inscryption.GameLibs v1.9.0-r.0 UnityEngine.Modules v2019.4.24 You will also need to add the API as a reference. There are a couple ways to do this, detailed below; whichever way you choose to do this, you'll also need to need to reference InscryptionAPI.dll , which should be in your BepInEx plugins folder; copy this path for future use. To do so, go to your 'BepInEx/plugins' folder and copy the folder path. Then, navigate to Project > Add Project Reference and click 'Browse'. Copy the folder path and add 'InscryptionAPI.dll' as a reference. You can do this for other mods' .dll files if you want to reference them as a mod dependency (a separate mod that your mod relies on to work). An alternative method to adding the API (and other mods) as a reference is to use NuGet packages by adding ' https://nuget.bepinex.dev/v3/index.json ' as a package source, and then adding 'API_dev-API' as a reference. With all this, you are now ready to begin creating your mod! Some resources are provided below for you to use, including an example mod to look at for examples. Otherwise, continue reading this wiki. Modding Resources Inscryption Modding Discord BepInEx documentation Harmony patching article Example Mod using C# Vanilla and Modded Enumerations"
  },
  "wiki/index.html": {
    "href": "wiki/index.html",
    "title": "Inscryption Modding Wiki | InscryptionAPI",
    "keywords": "Inscryption Modding Wiki Welcome to the modding wiki! This document will help familiarise you with modding Inscryption using the Inscryption API. Here you will find in-depth information on the API's numerous features, both what they do and how you can use them. For a full list of API classes and members, or are looking for more technical information, you can look at the documentation section. Game Tweaks Included with the API are a number of game changes for aiding with multi-Act support and further modding customisation. The API package also comes with a second DLL consisting of multiple community patches, either fixing bugs or providing QoL changes for the game. Card Cost Displays Cards in Acts 1 and 2 can now display multiple costs at the same time, and cards in Act 1 can now display Energy and Mox costs. Energy Drone in Act One/Kaycee's Mod With the API installed, Act 3's energy management drone can be made available in Act 1 and in Kaycee's Mod. It will appear automatically if any cards with an energy or gem cost are in the Act 1 card pool, and can be forced to appear by modifying the configuration for the API. The energy and mox displays will appear on the battle scales by default; this can be changed in the configuration file. You can also force these drones to appear in different sections of the game by overriding the following values: using InscryptionCommunityPatch.ResourceManagers; EnergyDrone.ZoneConfigs[CardTemple.Nature].ConfigEnergy = true; // Enables energy EnergyDrone.ZoneConfigs[CardTemple.Nature].ConfigDrone = true; // Makes the drone appear EnergyDrone.ZoneConfigs[CardTemple.Nature].ConfigMox = true; // Enables Mox management EnergyDrone.ZoneConfigs[CardTemple.Nature].ConfigDroneMox = true; // Makes the Mox drone appear Currently, the only zones where these settings will have any effect are CardTemple.Nature (Leshy's cabin) and CardTemple.Undead (Grimora's cabin). Bones Display in Act Three / P03 in Kaycee's Mod With the API installed, a separate bones displayer can be made available in Act 3. It will appear automatically if any cards with a bones cost are in the Act 3 card pool, and can be forced to appear by modifying the configuration for the API. This displayer appears as a TV screen hanging on the resource drone below the Gems module. You can also force this to be active using code: using InscryptionCommunityPatch.ResourceManagers; Act3BonesDisplayer.ForceBonesDisplayActive = true; // Forces the bones TV screen to be visible in act 3. If the bones TV screen is active, a bolt will also be dropped on top of each card that dies in-game (the same way that bone tokens are dropped on top of cards that die in Leshy's cabin). DeathShield Ability Behaviour The API changes how DeathShield (aka Nano Armour/Armoured) functions, with the ability now being attached to a custom ability behaviour 'APIDeathShield' that inherits from DamageShieldBehaviour (more info further below). Extra Alternate Portraits In Inscryption, there are some situations where a card's portrait is changed. SteelTrap, for example, changes the base card's portrait to the 'closed trap' portrait, and Mud Turtle switches its portrait upon losing its shield. However, these cases are very limited; SteelTrap changes all cards to the closed trap portrait, even if it's not on the vanilla trap card; and only Mud Turtle can change its portrait upon losing its shield. So the API changes this. Each added CardInfo can now be assigned custom sprites specific to the effects of SteelTrap and losing a shield, using SetSteelTrapPortrait() and SetBrokenShieldPortrait() respectively. These are stored separately from a card's base portrait and alternate portrait, giving you greater freedom in what cards you can make. Name Description Setter Methods PixelAlternatePortrait The portrait used when calling SwitchToAlternatePortrait in Act 2. SetPixelAlternatePortrait SteelTrapPortrait The portrait used when the Steel Trap sigil activates. SetSteelTrapPortrait, SetEmissiveSteelTrapPortrait, SetPixelSteelTrapPortrait BrokenShieldPortrait The portrait used when this card has lost all of its shields. SetBrokenShieldPortrait, SetEmissiveBrokenShieldPortrait, SetPixelBrokenShieldPortrait SacrificablePortrait The portrait used when this card is on the board and the player is choosing sacrifices. SetSacrificablePortrait, SetEmissiveSacrificablePortrait, SetPixelSacrificablePortrait Part2Modular The API adds a custom AbilityMetaCategory called Part2Modular, accessible from the AbilityManager. This metacategory is used in the community patches to determine what sigils the Amorphous sigil can become while in Act 2, but is otherwise free for you to use. A number of vanilla sigils have been marked with this metacategory by default. Core Features Extending Enumerations The base game uses a number of hard-coded lists, called 'Enumerations' or 'Enums', to manage behaviors. For example, the ability \"Brittle\" is assigned to a card using the enumerated value Ability.Brittle. We can expand these lists, but it requires care, and it is managed by the GuidManager class. This handles the creation of new enumerations and making sure those are handled consistently across mods. Lets say that you want to create a new story event. These are managed by the enumeration StoryEvent. To create a new story event, you should use this pattern to create a single static reference to that new value: public static readonly StoryEvent MyEvent = GuidManager.GetEnumValue<StoryEvent>(MyPlugin.guid, \"MyNewStoryEvent\"); GuidManager requires you to give it the GUID of your plugin as well as a friendly name for the value you want to create (the plugin GUID is required to avoid issues if multiple mods try to create a new value with the same name). If you want to get a value that was created by another mod (for example: you want to make a card that uses an ability created by another mod), you can follow this exact same pattern. You just need to know the plugin GUID for the mod that it is contained in: public static readonly Ability OtherAbility = GuidManager.GetEnumValue<Ability>(\"other.mod.plugin.guid\", \"Ability Name\"); All of these values are stored in the modded save file. Custom Game Save Data If your mod needs to save data, the ModdedSaveManager class is here to help. There are two chunks of extra save data that you can access here: 'SaveData' (which persists across runs) and 'RunState' (which is reset on every run). Note that these require you to pass in a GUID, which should be your mod's plugin GUID, and an arbitrary key, which you can select for each property to you want to save. The easiest way to use these helpers is to map them behind static properties, like so: public static int NumberOfItems { get { return ModdedSaveManager.SaveData.GetValueAsInt(Plugin.PluginGuid, \"NumberOfItems\"); } set { ModdedSaveManager.SaveData.SetValue(Plugin.PluginGuid, \"NumberOfItems\", value); } } When written like this, the static property \"NumberOfItems\" now automatically syncs to the save file."
  },
  "wiki/items.html": {
    "href": "wiki/items.html",
    "title": "Custom Items | InscryptionAPI",
    "keywords": "Custom Items The API supports adding custom consumable items. To create an item, you will need to create a new class that inherits from ConsumableItem. Specify the class for your item and what happens when its used. public class CustomConsumableItem : ConsumableItem { public override IEnumerator ActivateSequence() { base.PlayExitAnimation(); yield return new WaitForSeconds(0.25f); yield return base.StartCoroutine(Singleton<ResourcesManager>.Instance.AddBones(4, null)); yield break; } public override bool ExtraActivationPrerequisitesMet() { if (!base.ExtraActivationPrerequisitesMet()) { return false; } // Optional: Stop player from using the item! return true; } } Adding your New Item If you don't have a custom model you can use one of the default types from ConsumableItemManager.ModelType provided by the API. ConsumableItemManager.ModelType modelType = ConsumableItemManager.ModelType.Basic; ConsumableItemManager.New(Plugin.PluginGuid, \"Custom Item\", \"Does a thing!\", textureOrSprite, typeof(CustomConsumableItem), modelType) .SetDescription(learnText) .SetAct1(); If you want to create a simple 'card-in-a-bottle' type item, you can use the provided method like so: ConsumableItemManager.NewCardInABottle(PluginGuid, cardInfo.name) .SetAct1(); If you have a custom model for your item you can specify it in the different constructor: GameObject prefab = ... ConsumableItemManager.New(Plugin.PluginGuid, \"Custom Item\", \"Does a thing!\", textureOrSprite, typeof(CustomConsumableItem), prefab) .SetDescription(learnText) .SetAct1();"
  },
  "wiki/localisation.html": {
    "href": "wiki/localisation.html",
    "title": "Localisation | InscryptionAPI",
    "keywords": "Localisation While Inscryption already provides translations for a number of languages, these only apply to the base game's text, meaning any modded content is stuck in the language it was written in. To alleviate this problem, the API provides support for adding new translations and even new languages. Adding new Translations If you want to add your own translations to Inscryption you can use the API's localisation system. LocalizationManager.Translate(\"MyModGUID\", null, \"Hello\", \"안녕하세요\", Language.Korean); Default languages The default supported languages are listed in the table below. Suffix Language fr French it Italian de German es Spanish pt Portuguese tr Turkish ru Russian ja Japanese ko Korean zhcn Chinese (Simplified) zhtw Chinese (Traditional) Adding new Languages If you want to translate into an unsupported language, you can add a new langauge and translation like so: LocalizationManager.NewLanguage(\"MyModGUID\", \"Polish\", \"PL\", \"Reset With Polish\", pathToCSV); Your language file must be a .csv, and formatted in the following way so the API can read it properly: Column1,Column10,PL TALKING_STOAT_DIALOGUE_STOATSACRIFICE_REPEAT_#2_852_M,Again...,Ponownie... _OPPONENTSKIPTURN_REPEAT_#1_558_M,Pass.,Przechodzić."
  },
  "wiki/map.html": {
    "href": "wiki/map.html",
    "title": "Custom Maps and Encounters | InscryptionAPI",
    "keywords": "Custom Maps and Encounters Unlike abilities, encounters are encoded into the game's data through a combination of enumerations and strings. For example, Opponents are enumerated by the enumeration Opponent.Type, but special sequencers and unique AI rules are represented as strings buried in each encounters data. To create a custom encounter (for example, a custom boss fight), you will need some combination of opponents, special sequencers, and AI. Encounter Turn Plans When you're creating an encounter, you'll want to also create a turn plan that determines what cards are played during the encounter. The API adds a number of methods to make this process easier for you. In this example, we will create a turn plan that is 14 turns long with the following card sequence: Turn 1 - Play 2 Bonehounds; the slots they spawn in are chosen by the game; you have no control of it when making a turn plan Turn 2 - Play nothing Turn 3 - Play nothing Turn 4 - Play 1 Bonepile Turn 5 - Play 1 Bonepile that is replaced with a Bonehound at difficulties >= 10 Turn 6 - Play nothing Turn 7 - Play 1 Bonepile Repeat turns 1-7 one time. using static InscryptionAPI.Encounters.EncounterManager; private void AddEncounters() { CardBlueprint bonePile_rp = NewCardBlueprint(\"Bonepile\").SetReplacement(\"Bonehound\", 10); List<List<CardBlueprint>> turnPlan = new() { CreateTurn(\"Bonehound\", \"Bonehound\"), CreateTurn(), CreateTurn(), CreateTurn(\"Bonepile\"), CreateTurn(bonePile_rp), CreateTurn(), CreateTurn(\"Bonepile\") }; New(\"ExampleEncounter\").AddTurns(turnPlan).DuplicateTurns(1); } The following methods are provided for convenience: New: Creates a new instance of EncounterBlueprintData and adds it to the API (does not add the EBD to any regions). NewCardBlueprint: Creates a new CardBlueprint. CreateTurn: Creates a new List<CardBlueprint> that represents a single turn in an encounter's turn plan. Can pass card names through or CardBlueprints, or nothing if you want an empty turn. The following extensions are available for making turn plans, sorted by what class they affect: EncounterBlueprintData SetDifficulty: Sets the minimum and maximum difficulties at which the encounter can be used. AddDominantTribes: Used in Totem battles to determine the potential Totem top that will be used. SetRegionSpecific: Unused by the game, just here for posterity (unless you want to use it for something yourself). AddRandomReplacementCards: When making a card blueprint, you can set whether the card can be randomly replaced. This field determines the cards that can potentially replace that card. SetRedundantAbilities: Sets what abilities can't be chosen by Leshy to be used for his totem during Totem battles. SetUnlockedCardPrerequisites: Sets what cards have to be unlocked in order to be used in this encounter. AddTurnMods: Used in Part 3 to overclock played cards above the specified difficulty on the specified turn. AddTurn: Adds a turn to the turn plan. AddTurns: Adds turns to the turn plan. DuplicateTurns: Duplicates all turns currently in the turn plan by the specified amount. SyncDifficulties: Sets the minimum and maximum difficulties of all cards in the turn plan. CardBlueprint SetDifficulty: Sets the minimum and maximum difficulties at which this card can be played. SetReplacement: Sets the card that will replace the base card at and above the specified difficulty. List<CardBlueprint> SetTurnDifficulty: Sets the minimum and maximum difficulties of each card in the list. DuplicateTurn: Duplicates the list the specified number of times. Designed to be used with EncounterBlueprintData.AddTurns(). Adding Map Nodes When adding a custom node to the game map, be prepared to implement potentially complex game logic. Every new node requires a 'sequencer' class, which controls the event that happens when you enter a map node. This includes the creation of game objects, animation of objects, manipulating the player's deck, and everything else you may want the map node to do. Your sequencer class must implement the API's ICustomNodeSequencer interface, otherwise the API will have difficulty executing the event correctly. The API provides a couple template sequencer classes to make this easier for you: CustomNodeSequencer and CustomCardChoiceNodeSequencer . The former is a basic abstract class that simply implements the above interface as well as every other node-related interface in the API. The latter class is intended for custom card choice nodes. It's highly recommended that you decompile the game's node sequencer classes to get a feel of how they work. Along with a sequencer, you will need to create an animation so the node will appear on the map. This takes the form of an array of exactly four textures, each sized at 49x49 pixels. Each of these textures should be similar to each other if you want to mimic the 'shakiness' of the game's nodes. With all these pieces, the final step is to register your custom node with the API: Assembly asm = typeof(MyCustomSequencer).Assembly; NewNodeManager.New( \"MyPluginGUID\", \"MyCustomNode\", GenerationType.SpecialEvent, typeof(MyCustomSequencer), new List<Texture2D> { TextureHelper.GetImageAsTexture(\"animated_node_1.png\", asm), TextureHelper.GetImageAsTexture(\"animated_node_2.png\", asm), TextureHelper.GetImageAsTexture(\"animated_node_3.png\", asm), TextureHelper.GetImageAsTexture(\"animated_node_4.png\", asm) } ); GenerationType is a flag-style enumeration that tells the API where the node should appear. Flag-style means that multiple values can be combined using the bitwise-or operator (|). For example, if you want the node to randomly appear before a battle, but also be forced to appear directly before the boss, you can use this combination: GenerationType.SpecialEvent | GenerationType.PreBoss The values of GenerationType are: None: This node will not be autogenerated on the map, but can still be manually added (for example, if you are manually manipulating Act 3 maps). SpecialCardChoice: This node will appear in the pool of random events that happen right after a battle. SpecialEvent: This node will appear in the pool of random events that happen right before a battle. RegionStart: This node will be forced to appear at the start of each map, unless the node fails a prerequisite condition. PreBoss: This node will be forced to appear right before the boss of each map, unless the node fails a prerequisite condition PostBoss: This node will be forced to appear right after the boss of each map, unless the node fails a prerequisite condition Conditional Nodes Map nodes can implement logic that determines whether or not they are generated on the map. This is done using the SelectionCondition class, and when registering your node you'll have the ability to give it SelectionConditions that control its generation logic. There are two condition types: prerequisite and forced generation. The former prevents a node from generating if any condition return false, and the latter forces a node to generate if any condition returns true; The game comes prepackaged with several premade SelectionConditions, but you can also create your own. Base SelectionConditions: CardsInDeckTraits: Checks if any cards in your deck have the given Trait, can be used as a blacklist or whitelist. EitherOr: Checks if either of the given SelectionConditions were satisified. IsAscension: Checks if the player is playing Kaycee's Mod. PastRunsCompleted: Checks if the given integer is greater or equal to the number of previous completed runs. PreviousNodesContent: Checks if the list of all previous map nodes contains the given NodeType, can be used as a blacklist or whitelist. PreviousRowContent: Checks if the previous row of map nodes contains the given NodeType, can be used as a blacklist or whitelist. StoryEventCompleted: Checks if the given StoryEvent has been completed. WithinGridYRange: Checks if the current map node location is within the given range. The API also adds two custom SelectionConditions: ChallengeIsActive: Checks if the given Challenge is active, can be used as a blacklist or whitelist. NumChallengesOfTypeActive: Compares the given integer to the number of active challenges of the given Type based on the value of greaterThanNumActive . Here is a code sample: Assembly asm = typeof(MyCustomSequencer).Assembly; NewNodeManager.New( \"MyPluginGUID\", \"MyCustomNode\", GenerationType.SpecialEvent, typeof(MyCustomSequencer), new List<Texture2D> { TextureHelper.GetImageAsTexture(\"animated_node_1.png\", asm), TextureHelper.GetImageAsTexture(\"animated_node_2.png\", asm), TextureHelper.GetImageAsTexture(\"animated_node_3.png\", asm), TextureHelper.GetImageAsTexture(\"animated_node_4.png\", asm) }, new List<NodeData.SelectionCondition> { new ChallengeIsActive(AscensionChallenge.BaseDifficulty, exclude: true) // prevent generation if there are no BaseDifficulty challenges active. }, new List<NodeData.SelectionCondition> { new NumChallengesOfTypeActive(AscensionChallenge.BaseDifficulty, 2, greaterThanNumActive: false) // force generation if there are 2 or more BaseDifficulty challenges active. } );"
  },
  "wiki/opponent.html": {
    "href": "wiki/opponent.html",
    "title": "Special Sequencers | InscryptionAPI",
    "keywords": "Special Sequencers Special sequencers are essentially 'global abilities;' they listen to the same triggers that cards do and can execute code based on these triggers (such as whenever cards are played or die, at the start of each turn, etc). While you can inherit directly from SpecialBattleSequencer, there is a hierarchy of existing special sequencers that you may wish to inherit from depending upon your use case. You can use dnSpy to see all of them, but these are three you should be specifically aware of: SpecialBattleSequencer : The base class for all special sequencers. Use this by default. BossBattleSequencer : Used for boss battles Part1BossBattleSequencer : Use for boss battles in Act 1 (Angler, Prospector, Trapper/Trader, and Leshy) Special sequencers are set directly on the NodeData instance corresponding to the map node that the player touches to start the battle. This is done using a string value corresponding to the sequencer. To set this yourself, use the SpecialSequenceManager class in the API: public class MyCustomBattleSequencer : Part1BossBattleSequencer { public static readonly string ID = SpecialSequenceManager.Add(Plugin.PluginGuid, \"MySequencer\", typeof(MyCustomBattleSequencer)); } Opponents In the context of this API, think of opponents as basically just bosses. There is a enumeration of Opponents called Opponent.Type that refers to the opponent. This name can be confusing in some IDEs, as they may simply show the parameter type as Type, which should not be confused with the System.Type type. Like everything else, Opponents are classes that you have to write that are responsible for handling the weird things that happen during battle. Depending upon which type of opponent you are buiding, you will need to use one of the following base classes: Opponent : The base class for all Opponents. You should probably never inherit from this one directly. Part1Opponent : Used for battles in Leshy's cabin Part1BossOpponent : Used for boss battles in Leshy's cabin PixelOpponent : Used for battles in the GBC game PixelBossOpponent : Used for boss battles in the GBC game Part3Opponent : Used for battles in Botopia Part3BossOpponent : Used for boss battles in Botopia Custom opponents will need a custom Special Sequencer as a companion (please, don't ask why we need Special Sequencers and Opponents and why they couldn't just be the same thing). So in this case, the following code snippet shows how to create an opponent that is linked to its special sequencer: public class MyBossOpponent : Part1BossOpponent { public static readonly Opponent.Type ID = OpponentManager.Add(Plugin.PluginGuid, \"MyBossOpponent\", MyCustomBattleSequencer.ID, typeof(MyBossOpponent)).Id; } Note that the third parameter in OpponentManager.Add is a string, and that string is the same ID that was set in the code snippet for the special sequencer in the previous example. If you have a specific blueprint that you want your opponent type to use, using the example for setting up the blueprint from before, then in in the Awake , Start , or IntroSequence override you can set it there if you didn't already set it in the EncounterData object: public override IEnumerator IntroSequence(EncounterData encounter) { encounterData.Blueprint = EncounterManager.AllEncountersCopy.Find(enc => enc.name == \"TurnPlan_2\"); List<List<CardInfo>> plan = EncounterBuilder.BuildOpponentTurnPlan(encounterData.Blueprint, difficulty, removeLockedCards); base.ReplaceAndAppendTurnPlan(plan); yield return QueueNewCards(); yield return base.IntroSequence(encounter); } AI In most cases, you will probably not need to create a custom AI. By default, the game will look at the cards that the computer is preparing to play and then use brute force to test every possible slot that the computer could queue those slots for. It will then simulate a full turn of the game for each of those positions and determine which one has the best outcome. There are very few exceptions to this rule. As an example, one exception is the Prospector boss fight, where the computer will always play the Pack Mule in slot 0 and a coyote in slot 1. It's important that these cards always get played in this position, so the game has a custom AI that detects this part of the game and overrides the default AI. If you want to use a custom AI, you need to build a class that inherits from DiskCardGame.AI and overrides the virtual method SelectSlotsForCards. That one method is where you implement your custom AI logic. To register a new AI with the game, use the AIManager class in the API, and keep a reference to the string ID that you receive back: public class MyCustomAI : AI { public static readonly string ID = AIManager.Add(Plugin.PluginGuid, \"MyAI\", typeof(MyCustomAI)).Id; public override List<CardSlot> SelectSlotsForCards(List<CardInfo> cards, CardSlot[] slots) { // Do stuff here } } To actually use your new AI, you need to set it inside of a special sequencer; specifically in the BuildCustomEncounter method: public class MyCustomBattleSequencer : Part1BossBattleSequencer { public override EncounterData BuildCustomEncounter(CardBattleNodeData nodeData) { EncounterData data = base.BuildCustomEncounter(nodeData); data.aiId = MyCustomAI.ID; return data; } } Boss Masks When creating a custom boss opponent, you may feel the urge to change what mask Leshy adorns during the fight. Fortunately, the API's got you covered. Changing an Existing Mask This allows you to change a mask already added to Inscyrption. Can be any Vanilla masks or one someone else has added. MaskManager.Override(\"guid\", \"nameOfNewMask\", LeshyAnimationController.Mask.Angler, \"pathToTexture\"); This example shows changing the mask the Angler uses to have a custom texture we are using. NOTE: This also changes the model so we can use a texture without the fuss of UV mapping the Anglers actual mask. If you still want to use the Anglers model then use .SetModelType(MaskManager.ModelType.Angler) Adding a Random Mask If you want to add a new mask that will be randomly chosen when Leshy goes to put on a mask use this. MaskManager.AddRandom(\"guid\", \"nameOfNewMask\", LeshyAnimationController.Mask.Prospector, \"pathToTexture\"); This example shows adding a new mask that when going to the Prospector boss fight, Leshy will choose between the default Prospector mask and this new one. You can add as many random masks as you want. There is no limit. Adding a Custom Mask MaskManager.Add(\"guid\", \"nameOfNewMask\", \"pathToTexture\"); Adding a Custom Model ResourceLookup resourceLookup = new ResourceLookup(); resourceLookup.FromAssetBundle(\"pathToAssetBundle\", \"prefabNameInsideBundle\"); MaskManager.ModelType modelType = MaskManager.RegisterPrefab(\"guid\", \"nameOfModel\", resourceLookup); var mask = MaskManager.Add(\"guid\", \"nameOfMask\"); mask.SetModelType(modelType); Putting on a Mask This will tell Leshy to push a mask on his face. Useful for when you have your own boss sequence and you want to tell Leshy to put on your new mask! LeshyAnimationController.Instance.PutOnMask(LeshyAnimationController.Mask.Woodcarver, false); Adding Custom Mask Behaviour public class Plugin : BaseUnityPlugin { private void Awake() { MyCustomMask.Setup(); } } public class MyCustomMask : MaskBehaviour { public static LeshyAnimationController.Mask ID; public static void Setup() { var mask = MaskManager.Add(\"guid\", \"nameOfNewMask\", \"pathToTexture\"); mask.SetMaskBehaviour(typeof(MyCustomMask)); ID = mask.ID; } }"
  },
  "wiki/pelts.html": {
    "href": "wiki/pelts.html",
    "title": "Custom Pelts | InscryptionAPI",
    "keywords": "Custom Pelts The pelts bought and sold by the Trapper and Tradder are comprised of two components: the CardInfo and the PeltData. The CardInfo represents the actual card that you can obtain and sell, and is created using the CardManager the same way as any regular card. The PeltData on the other hand is created using the API's PeltManager. The PeltData determines how the CardInfo is handled by the Trapper and Trader. This includes how much it costs to buy, how much the price increases over a run,and what and how many cards the Trader will offer for the pelt. Adding a Custom Pelt The first step is making the card. CardInfo bonePeltInfo = CardManager.New(PluginGuid, \"Bone Pelt\", \"Bone Pelt\", 0, 2); bonePeltInfo.portraitTex = TextureHelper.GetImageAsTexture(Path.Combine(PluginDirectory, \"Art/portrait_skin_bone.png\")).ConvertTexture(); bonePeltInfo.cardComplexity = CardComplexity.Simple; bonePeltInfo.temple = CardTemple.Nature; bonePeltInfo.SetPelt(); You MUST create the card before creating the pelt data. Once that's done, it's time to create the pelt data. The most important complicated part of this is creating the Function that will be used to determine the cards the Trader will offer. For this example, the Trader will only offer cards that cost Bones and are part of the Nature temple (meaning Act 1 cards only). Func<List<CardInfo>> cardChoices = () { return CardManager.AllCardsCopy.FindAll((CardInfo x) => x.BonesCost > 0 && x.temple == CardTemple.Nature); }; PeltManager.CustomPeltData bonePelt = PeltManager.New(yourPluginGuid, bonePeltInfo, baseBuyPrice: 3, extraAbilitiesToAdd: 0, choicesOfferedByTrader: 8, cardChoices); This pelt will now cost 3 Teeth to buy from the Trapper, and the Trader will offer you 8 cards to choose from for it; the offered cards will have 0 extra abilities added onto them as well. Pelt Extensions The following extensions are provided for further customisation: SetPluginGuid: Sets the Guid of the plugin that's adding the pelt. Useful if you aren't using PeltManager.New() to create your pelt. SetBuyPrice: Sets the base buy price of the pelt, meaning how much it costs initially before modifiers are added. Optionally sets the max buy price for the pelt as well (default price is 20). SetMaxBuyPrice: A separate extension for only setting the max buy price of the pelt. Useful if you've already set the buy price using PeltManager.New(), for instance. SetBuyPriceModifiers: Sets the values used to determine how the price is affected by in-game events, such as the Trapper and Trader being defeated, or the Expensive Pelts challenge being active. SetBuyPriceAdjustment: Sets the Function used to determine how the price changes across a run. You can get really fancy with it, but by default it increases by 1 Tooth. SetModifyCardChoiceAtTrader: Lets you modify the cards offered by the Trader further, such as adding a decal or changing their cost. SetIsSoldByTrapper: Determines whether the pelt will be sold by the Trapper. SetNumberOfCardChoices: Sets how many cards you will able to choose from when trading the pelt. SetCardChoices: Sets the Function used to determine what potential cards the Trader will offer for the pelt."
  },
  "wiki/rulebook.html": {
    "href": "wiki/rulebook.html",
    "title": "The Rulebook | InscryptionAPI",
    "keywords": "The Rulebook The Rulebook is a powerful tool for the player during the 3D Acts. Every ability, stat icon, boon and item that they can encounter during a certain Act will have an entry in it, providing a name and description of what it does. These entries are act-specific, and custom abilities and the like can be marked to only appear in a certain Act or Acts* using their specific AbilityMetaCategory field. In most cases, this is the end of a modder's consideration Rulebook. If you're making a mod for Act 3, custom sigils should appear in the Act 3 Rulebook and nowhere else. If you don't want a stat icon to appear in any Rulebook for one reason or another, you simply leave its AbilityMetaCategories field empty. Custom content that appears in the Rulebook will appear in the order they were loaded into the game by the API, content that doesn't won't. However, there may arise cases where this is insufficient for your needs. Maybe you want an ability to always appear at the beginning of the Rulebook for some reason, or you want to add a whole new section to the Rulebook. The former case can be easily handled with a simple patch to RuleBookInfo.ConstructPageData, but the latter can get fairly complicated. In either case, you can use the API's RuleBookManager to make this process simpler. * Items and Boons can only be marked to appear in a single Act. Adding Custom Sections Creating a custom rulebook section/range is a bit different than creating other things like abilities. Custom sections don't require a Type reference to a custom class, though it's still good practice to create a class to keep things organised. Simple call RuleBookManager.New() with the needed arguments and you're good to go. RuleBookManager.New( MyPluginGuid, // a unique identifier for your mod PageRangeType.Boons, // the PageRangeType we want to inherit our page style from \"Mod Tribes\", // the subsection name that appears at the end of the header GetInsertPosition, // a function that determines where in the Rulebook to insert our custom section CreatePages, // the function to create the pages that will be in our custom section headerPrefix, // optional argument, if left null one will be created for you getStartingNumberFunc: GetStartingNumber, // optional argument, if left null the starting number will be 1 fillPageAction: FillPage // also optional, but if you want to display custom names, descriptions, etc you will need to set this ); This will return a FullRuleBookRangeInfo object representing your custom section. Note how you can pass in STATIC methods as arguments when creating your custom rulebook range. // note that the return value and parameters MUST match the parameters and return value of the Func private static int GetInsertPosition(PageRangeInfo pageRangeInfo, List<RuleBookPageInfo> pages) { return pages.FindLastIndex(rbi => rbi.pagePrefab == pageRangeInfo.rangePrefab) + 1; } private static List<RuleBookPageInfo> CreatePages(RuleBookInfo instance, PageRangeInfo currentRange, AbilityMetaCategory metaCategory) { // in this example, we're adding a rulebook section for custom Tribes // foreach custom tribe that exists, we create a rulebook page then set the pageId to the tribe enum so we can use it later List<TribeManager.TribeInfo> allTribes = TribeManager.NewTribes.ToList(); List<RuleBookPageInfo> retval = new(); foreach (var tribe in allTribes) { RuleBookPageInfo page = new(); page.pageId = tribe.tribe.ToString(); retval.Add(page); } return retval; } private static int GetStartingNumber(List<RuleBookPageInfo> addedPages) { return (int)Tribe.NUM_TRIBES; // since we're doing mod Tribes only, we start after custom Tribes (pretend we have a separate section for those) } private static void FillPage(RuleBookPage page, string pageId, object[] otherArgs) { if (page is BoonPage boonPage && int.TryParse(pageId, out int id)) { TribeManager.TribeInfo tribe = TribeManager.NewTribes.FirstOrDefault(x => x.tribe == (Tribe)id); if (tribe != null) { boonPage.nameTextMesh.text = Localization.Translate(tribe.name.ToLowerInvariant().Replace(\"tribe\", \"\")); boonPage.descriptionTextMesh.text = \"\"; boonPage.iconRenderer.material.mainTexture = boonPage.iconRenderer2.material.mainTexture = tribe.icon.texture; } } } Useful Information on RuleBookPages When filling the content of your custom pages, it's important to understand the page style and what fields you'll have access to. When your custom section's FillPage() method is called, only certain parts of the current RuleBookPageInfo will be provided to you. If you plan on using information beyond the pageId when filling your pages, you need to know the order of objects in the array. AbilityPage Ability icon texture is placed on the left of the page otherArgs: headerText, ability, fillerAbilityIds Class Fields: AbilityPageContent mainAbilityGroup StatIconPage Stat Icon texture is placed on the left of the icon's name otherArgs: headerText Class Fields: Renderer iconRenderer TextMeshPro nameTextMesh TextMeshPro descriptionTextMesh BoonPage Boon texture is placed on the left and right of the page otherArgs: headerText, boon Class Fields: Renderer iconRenderer Renderer iconRenderer2 TextMeshPro nameTextMesh TextMeshPro descriptionTextMesh ItemPage Item's rulebookSprite is placed on the left of the page otherArgs: headerText Class Fields: Renderer iconRenderer TextMeshPro nameTextMesh TextMeshPro descriptionTextMesh Transform itemModelParent GameObject itemModel"
  },
  "wiki/shield.html": {
    "href": "wiki/shield.html",
    "title": "DamageShieldBehaviour | InscryptionAPI",
    "keywords": "DamageShieldBehaviour Ever wanted to create your own version of the Armoured sigil, but were frustrated by the game's simplistic boolean logic for shields? Worry not! Using the API, you can now easily create your own! Simply create a class that inherits from DamageShieldBehaviour (or ActivatedDamageShieldBehaviour) and you're good to go. Abilities using either of these classes must specify a starting number of shields the sigil will provide to a card. A basic example can be found here: public class APIDeathShield : DamageShieldBehaviour { public override Ability Ability => Ability.DeathShield; // for stackable sigils, you'll want to set StartingNumShields to something like this if you want the stacks to be counted public override int StartingNumShields => base.Card.GetAbilityStacks(Ability); // For non-stackable sigils (or perhaps special cases) just setting it to a number will suffice. // public override int StartingNumShields => 1; } You can continue to modify the shield count during battle: public void RegainShields { // NumShield tracks the current shield amount for the ability instance; it cannot be negative if (NumShield == 0) { ResetShields(true); // Resets NumShield to the starting amount and updates the card display } } public void ChangeShieldCount() { // to modify shield count you need to use numShield NOT NumShield // NumShield cannot be modified directly if (addShield == true) { numShield++; } else { numShield--; } base.Card.RenderCard(); // update the card display if we need to } You can check how many shields a card has using card.GetTotalShields(). For stacking shields sigils, one stack is hidden whenever the card is damaged IF the ability has been set to behave that way using SetHideSingleStacks(). Otherwise, the sigil is hidden only when that specific ability's internal shield count hits 0."
  },
  "wiki/slots.html": {
    "href": "wiki/slots.html",
    "title": "Slot Modifications | InscryptionAPI",
    "keywords": "Slot Modifications The API now supports adding abilities and behaviors to card slots! These \"slot modifications\" are implemented very similarly to how you would implement sigils; you just need to code your modification logic as a subclass of SlotModificationBehaviour and make some custom artwork for what the new slot should look like. Creating Slot Textures and Sprites Slot textures in 3D game zones are 154x226 pixels. You can either create a single slot texture for all zones, or create a separate texture for Leshy, P03, Grimora, and Magnificus. Slot textures in 2D game zones are 44x58 pixels. There are five different themes for 2D battles (Nature, Tech, Undead, Wizard, and Finale), and slots change their appearance when you hover over them. Additionally, you may wish to have a different texture for the opponent than for the player (this is most likely to happen in the Nature theme as the claw icons faces down for the opponent and up for the player). In order to accomodate all of these different combinations, you are given a number of options when supplying textures to the SlotModificationManager : If you provide a 44x58 texture, the manager will create 10 variations of it automatically, recoloring it to fit the color (standard and highlighted/mouse-over) of each theme. All black and transparent pixels will be left as-is; all remaining pixels will be replaced with the appropriate color for the theme. If you provide a 220x116 texture, the manager will slice this into 10 sprites - two rows, five columns. The first row will be the standard slot, and the second row will be the slot when hovering. In order, the columns will be Nature, Undead, Tech, Wizard, Finale. If you provide a 220x232 texture, it behaves the same as above, except rows 3 and 4 are used for the opponent slots. Creating a Slot Modification Behaviour You need to create a subclass of SlotModificationBehaviour to implement your slot's logic. You can also add on API interface triggers as part of this. For example, this slot deals one damage to the card in it every end step: class SharpSlotBehaviour : SlotModificationBehaviour { public override bool RespondsToTurnEnd(bool playerTurnEnd) => playerTurnEnd == Slot.IsPlayerSlot; public override IEnumerator OnTurnEnd(bool playerTurnEnd) { if (Slot.Card != null) yield return Slot.Card.TakeDamage(1, null); } } ...and this slot adds 1 passive attack to the card in it... public class BuffSlot : SlotModificationBehaviour, IPassiveAttackBuff { public int GetPassiveAttackBuff(PlayableCard target) { return Slot.Card == target ? 1 : 0; } } If you want your slot to grant another ability to the card in it, there's a helper for that: SlotModificationGainAbilityBehaviour : public class SharpQuillsSlot : SlotModificationGainAbilityBehaviour { protected override Ability AbilityToGain => Ability.Sharp; } If you want your slot to take an action when it is first created or when it is removed, override Setup and Cleanup respectively. Often these could be used to add additional visual flair to your slot: public class AwesomeLookingSlot : SlotModificationBehaviour { public override IEnumerator Setup() { yield return ShowSomeAwesomeVisuals(); } public override IEnumerator Cleanup(SlotModificationManager.ModificationType replacement) { yield return DestroyMyAwesomeVisuals(); } } Registering A Slot Modification The pattern is very similar to creating a new sigil; you need to call the SlotModificationManager to register your slot mod and then store the result you get back: public static readonly SlotModificationManager.ModificationType SharpQuillsSlot = SlotModificationManager.New( \"MyPluginGuid\", \"SharpQuillsSlot\", typeof(SharpQuillsSlot), TextureHelper.GetImageAsTexture(\"my_3d_card_slot.png\", typeof(SharpQuillsSlot).Assembly), TextureHelper.GetImageAsTexture(\"my_2d_card_slot.png\", typeof(SharpQuillsSlot).Assembly) ) Activating A Slot Modification You'll almost always end up creating a slot modification as part of another sigil. Here, we have an example custom sigil that activates the slot when the card dies. You do this by using the extension method SetSlotModification . public class LeaveSharpBehindBehaviour : AbilityBehaviour { public override bool RespondsToPreDeathAnimation(bool wasSacrifice) => Card.OnBoard; public override IEnumerator OnPreDeathAnimation(bool wasSacrifice) { // SharpQuillSlot is the ID that was returned by the SlotModificationManager yield return Card.Slot.SetSlotModification(SharpQuillsSlot); } }"
  },
  "wiki/sniper.html": {
    "href": "wiki/sniper.html",
    "title": "Custom Sniper Logic | InscryptionAPI",
    "keywords": "Custom Sniper Logic Though not technically part of the API proper, the community patches still offer a number of useful options for modders to take advantage of. InscryptionCommunityPatch.Card.SniperFix, as its name suggests, fixes the Sniper ability when used in Act 1. It does more than just that, however; it also expands the Sniper ability's logic into a number of overridable methods, allowing for further customisation to how Sniper functions in all parts of the game. To modify these methods, you will need to patch them using Harmony. These methods are: DoSniperLogic() - controls whether to use player or opponent sniper logic DoAttackTargetSlotsLogic() - controls attack logic for each target slot GetValidTargets() - returns the list of card slot the player and opponent can target PlayerTargetSelectedCallback() - called when the player selects a valid target PlayerSlotCursorEnterCallback() - called when the player's cursor enters a slot OpponentSelectTarget() - returns a card slot for the opponent to target and attack For example, if you wanted to allow cards with the Sniper ability to target any card slot, including slots on the same side of the board, you would do: [HarmonyPostfix, HarmonyPatch(typeof(SniperFix), nameof(SniperFix.GetValidTargets))] private static void TargetAllSlots(ref List<CardSlot> __result, bool playerIsAttacker, CardSlot attackingSlot) { __result = BoardManager.Instance.AllSlotsCopy; // override the default list of valid targets __result.Remove(attackingSlot); // remove the currently attacking slot as a valid target }"
  },
  "wiki/sound.html": {
    "href": "wiki/sound.html",
    "title": "Adding Music Tracks to the Gramophone | InscryptionAPI",
    "keywords": "Adding Music Tracks to the Gramophone This API supports adding new tracks to the Gramophone in Leshy's Cabin. (A user must have the Hex disc unlocked in order to be able to listen to the new tracks.) All you need for that is a regular audio file. The API will do all of the conversion. The file should be inside the 'plugins' folder. and the supported audio formats are MP3, WAV, OGG and AIFF. You can register your track like this: GramophoneManager.AddTrack(PluginGuid, \"MyFile.wav\", 0.5f); The first parameter should be your plugin's GUID. The second parameter should be your file's name. The third parameter is optional, and determines the volume of your track, from 0 to 1f. Converting Audio Files to Unity AudioClip Objects This API provides a helper method for converting audio files to Unity AudioClip objects so that they can be played in-game with the AudioSource component. You can use this to replace in-game music through patches, or to play your own sound effects. The audio file should be located inside of the 'plugins' folder. The supported audio formats are MP3, WAV, OGG and AIFF. You can convert your audio file into an AudioClip object like this: AudioClip audio = SoundManager.LoadAudioClip(\"Example.mp3\");"
  },
  "wiki/talking_cards.html": {
    "href": "wiki/talking_cards.html",
    "title": "Talking Cards | InscryptionAPI",
    "keywords": "Talking Cards This API supports creating new talking cards from scratch, without the need to load up your own Unity prefabs or anything of the sort! All you have to do is create a class that implements the ITalkingCard interface, which contains the following fields: Field Type Description CardName string The name of an existing card. Emotions List<EmotionData> Your talking card's emotions. FaceInfo FaceInfo A bit of info about your talking card: blink rate and voice. DialogueAbility SpecialTriggeredAbility The special ability that controls your talking card's dialogue. And after that, all you need to do is register your talking card with the TalkingCardManager.New<T>() method as such: TalkingCardManager.New<ExampleClass>(); Additionally, as you can see from the last item in the table above, you're gonna need to create a new SpecialTriggeredAbility that controls your talking card's dialogue. Don't worry, I'll explain exactly what you need to do! Fortunately for you, this API already supports creating new special abilities. Additionally, you won't have to do all the work: the base game already defines abstract classes you should inherit from when creating a special ability for your talking card: Act Class To Inherit From Act 1 PaperTalkingCard Act 3 DiskTalkingCard Additionally , to make the task of creating Act 1 talking cards even easier for you, I've defined an abstract class that inherits from PaperTalkingCard , includes the ITalkingCard interface and adds a few small tweaks behind the scenes! It's called CustomPaperTalkingCard . All you have to do is create a class that inherits from CustomPaperTalkingCard and implement its abstract fields as such: public class ExampleTalkingCard : CustomPaperTalkingCard { public override string CardName => \"example_ExampleCard\"; public override List<EmotionData> Emotions => new List<EmotionData>() { new EmotionData(emotion: Emotion.Neutral, face: \"Example_Face.png\", eyes: (\"Example_EyesOpen.png\", \"Example_EyesClosed.png\"), mouth: (\"Example_MouthOpen.png\", \"Example_MouthClosed.png\"), emission: (\"Example_EyesOpenEmission.png\", \"_\")) }; public override FaceInfo FaceInfo => new FaceInfo(blinkRate: 1.5f, voiceSoundPitch: 1.1f); public override SpecialTriggeredAbility DialogueAbility => dialogueAbility; private SpecialTriggeredAbility dialogueAbility = SpecialTriggeredAbilityManager.Add( guid: Plugin.PluginGuid, abilityName: \"ExampleDialogueAbility\", behavior: typeof(ExampleTalkingCard)).Id; public override string OnDrawnDialogueId => \"Example_OnDrawn\"; public override string OnPlayFromHandDialogueId => \"Example_OnPlayFromHand\"; public override string OnAttackedDialogueId => \"Example_OnAttacked\"; public override string OnBecomeSelectablePositiveDialogueId => \"Example_OnSelectedPositive\"; public override string OnBecomeSelectableNegativeDialogueId => \"Example_OnSelectedNegative\"; public override Dictionary<Opponent.Type, string> OnDrawnSpecialOpponentDialogueIds => new Dictionary<Opponent.Type, string>(); } And, after that, all you need to do is register your new talking card with the TalkingCardManager.New<T>() method as such: TalkingCardManager.New<ExampleTalkingCard>(); Note : CustomPaperTalkingCard can only be used for Act 1 talking cards. If you want to make an Act 3 talking card, you're gonna have to inherit from DiskTalkingCard directly! Below I'm going to explain a few important things about talking cards in-depth! EmotionData The EmotionData class is a container for the sprites for one of your character's emotions. It has a constructor that takes Unity Sprites as parameters, and another constructor that takes the path to your image as a string for each image. The constructors take the following parameters: Parameter Description emotion The chosen emotion. face A sprite for your character's face. eyes A pair of sprites for your character's eyes: open and closed. mouth A pair of sprites for your character's mouth: open and closed. emission A pair of sprites for your character's eyes' emission: open and closed. If you ever need to use an empty portrait texture, you can use TalkingCardManager.EmptyPortrait ! The string constructor also contains shorthand for an empty texture, if you need it: Just add an \"_\" as your string for that given parameter. A guide on how to use emotions in your card's dialogue can be found in this section below . FaceInfo The FaceInfo class contains a bit of info about your talking card: namely, blink rate, voice pitch, and the sound used for your character's voice in general. The constructor takes the following parameters: Parameter Type Description blinkRate float How often your character blinks. voiceId string Your character's \"voice\". Will explain more below. voiceSoundPitch float Your character's voice's pitch. customVoice string A custom voice for your character. Will be explained below. \"voiceId\" can only be one of these three strings: female1_voice cat_voice kobold_voice Most talking cards in the game use the first and simply change the pitch. Custom Voices You can add a custom voice to your character instead of using one of the default voices. For that, all you need to is pass the path to your audio file as the \"customVoice\" parameter. The supported audio formats are MP3, WAV, OGG and AIFF! Please use a very short audio file for your voice. Typically, you want only a very short 'vowel' sound for this, since it's going to be played in rapid repetition. If you pass anything as \"customVoice\", then the contents of the \"voiceId\" parameter will not matter. Dialogue Events After looking at the example above, you might be wondering \"What's all of that DialogueId stuff about? How do I make my own dialogue events?\" . I'm gonna explain everything to you in detail now! Dialogue Triggers Talking cards can respond to a variety of game events. If you want your card to respond to a given event, you can override that property and return the ID of your new dialogue event. Some properties are abstract and must be implemented: namely, OnDrawnDialogueId , OnPlayFromHandDialogueId , OnAttackedDialogueId , OnBecomeSelectablePositiveDialogueId and OnBecomeSelectableNegativeDialogueId . And here's a full list of triggers you can override, and a small explanation of each. Note : All of these names end in \"DialogueId\", so I've omitted that last part of the name to be concise. Trigger Description OnDrawn Plays when your card is drawn. OnPlayFromHand Plays when your card is played. OnAttacked Plays when your card is attacked. OnBecomeSelectablePositive Plays when your card becomes selectable for a positive effect. OnBecomeSelectableNegative Plays when your card becomes selectable for a negative effect. OnSacrificed Plays when your card is sacrificed. OnSelectedForDeckTrial Plays when your card is selected in the deck trial node. OnSelectedForCardMerge Plays before your card receives the sigil in the sigil node. OnSelectedForCardRemove Plays when your card is selected for removal. Additionally, the OnDrawnSpecialOpponentDialogueIds dictionary lets you add special dialogue when your card is drawn in a specific boss battle, like this: public override Dictionary<Opponent.Type, string> OnDrawnSpecialOpponentDialogueIds => new Dictionary<Opponent.Type, string>() { { Opponent.Type.ProspectorBoss, \"Example_TalkAboutProspector\" } }; Creating a Dialogue Event You can create your own dialogue events with this API's DialogueManager.GenerateEvent() method, like this: DialogueManager.GenerateEvent( pluginGUID: Plugin.PluginGuid, name: \"Example_OnPlayFromHand\", mainLines: new List<CustomLine>() { \"This is a main line.\" }, repeatLines: new List<List<CustomLine>>() { new List<CustomLine>() { \"This is a repeat line!\" }, new List<CustomLine>() { \"This is another repeat line!\" } } ); A brief explanation of each parameter: Field Description pluginGUID Your mod's GUID. name The name for your dialogue event; this is what you'll use to refer to it! mainLines A set of lines that plays in the very first time this event runs. repeatLines Multiple sets of lines that are played after the first time this event has run. Dialogue Codes A really neat feature of Inscryption's dialogue events are dialogue codes. They add a lot of life to dialogue! The dialogue codes most relevant to talking cards will be explained below. All of these work with talking cards. Wait ([w:]) This is by far the dialogue code you'll wanna use the most. It's also the one the game itself uses the most in all of its dialogue. The \"[w:x]\" dialogue code adds a pause of x seconds before the rest of a sentence plays. You can use it like this: \"Hello.[w:1] How are you?\" In this example, after saying \"Hello.\", the character waits 1 second before saying \"How are you?\". The number of seconds does not have to be an integer. Using \"[w:0.2]\" to wait only 0.2 seconds is valid, for example, and used often throughout the base game's dialogue. This being said, I'd advise you not to go below [w:0.1], as I don't know how small the number can go before issues arise. (And there's no point in going below that, anyhow.) Color ([c:]) The [c:] dialogue code changes the color of a portion of your text. You can use it like this: \"[c:R]This text is red.[c:] This text is not.\" In this example, the part after [c:R] is colored in the color that matches the code 'R', which is the color red, and the part after [c:] has the default text color. You can think of this as \"switching on\" the colorful text mode and then switching it off. \"But how do I know the codes for each color?\" Fear not! Here's a comprehensive table of all available colors and their respective codes: Code Color B Blue bB Bright Blue bG Bright Gold blGr Bright Lime Green bR Bright Red brnO Brown Orange dB Dark Blue dlGr Dark Lime Green dSG Dark Seafoam bSG Glow Seafoam G Gold gray Gray lGr Lime Green O Orange R Red (For the record: These are the colors the game has available, built-in. I did not choose them. Yes, it's a very odd selection of colors.) Custom Colors I have added a way to use custom colors with dialogue codes. In place of one of the color codes in the table above, you can instead use a hex color code , and this mod will parse the code into an usable Color for the text. Here's an example: \"You must be... [w:0.4][c:#7f35e6]confused[c:][w:1].\", In this example, the word \"confused\" is colored in the color #7f35e6. Which, if you don't wanna look it up, it's this color! Please note that for compatibility reasons, your hex color code should include the '#' . Making Leshy Talk The [leshy:x] dialogue code makes Leshy say x. This color code is very useful for making Leshy and your card talk a bit between each other! You can use it like this: \"We're all doomed.[leshy:Quiet now.][w:2]\", In this example, the character says \"We're all doomed.\" and then Leshy says \"Quiet now.\" right after. The text remains on the screen for 2 seconds. There are a few things to note from that example: You don't need to put quotation marks around the line Leshy is going to say. The \"Wait\" dialogue code is still usable with Leshy's lines. Using Emotions in Dialogue You can change your character's emotion in their dialogue lines with the dialogue code [e:x] , where 'x' is the name of an emotion. You can look at the table above for the names of all the available emotions. This mod adds patches to make the emotion names not case-sensitive, which means the following lines are all equally valid: \"[e:Anger]I'm angry.\" \"[e:anger]I'm angry.\" \"[e:AnGeR]I'm angry and my keyboard is acting up.\" If you prefer, you can use the numeric value associated with an emotion instead of its name! This is perfectly valid, for example: \"[e:2]I'm angry.\""
  },
  "wiki/totems.html": {
    "href": "wiki/totems.html",
    "title": "Custom Totem Tops | InscryptionAPI",
    "keywords": "Custom Totem Tops When creating custom Tribes, mostly likely you'll want it to be usable with Totems as well. There is a default model for custom Totem Tops, but if you have a custom-made model you want to use, the API's got you covered. If you want to add your own model for your top then you can use the example below. TotemManager.NewTopPiece<CustomIconTotemTopPiece>(\"NameOfTotem\", Plugin.PluginGuid, Tribe, prefab); If you are using a model that you have created then here is an example of how to use asset bundles to include it. if (AssetBundleHelper.TryGet(\"pathToAssetBundle\", \"nameOfPrefabInAssetBundle\", out GameObject prefab)) { TotemManager.NewTopPiece<CustomIconTotemTopPiece>(\"NameOfTotem\", Plugin.PluginGuid, Tribe, prefab); } \"I don't have an icon to show on my totem top!\" You will need a new class for your totem top so it doesn't look for an icon to populate from a tribe. public class MyCustomTotemTopPiece : CompositeTotemPiece { protected virtual string EmissionGameObjectName => \"GameObjectName\"; public override void SetData(ItemData data) { base.SetData(data); // Set emissiveRenderer so the game knows what to highlight when hovering their mouse over the totem top emissiveRenderer = this.gameObject.FindChild(EmissionGameObjectName); if (emissiveRenderer != null) { emissiveRenderer = icon.GetComponent<Renderer>(); } if (emissiveRenderer == null) { InscryptionAPIPlugin.Logger.LogError($\"emissiveRenderer not assigned to totem top!\"); } } } Then add your totem with your new class: if (AssetBundleHelper.TryGet(\"pathToAssetBundle\", \"nameOfPrefabInAssetBundle\", out GameObject prefab)) { TotemManager.NewTopPiece<MyCustomTotemTopPiece>(\"NameOfTotem\", Plugin.PluginGuid, Tribe, prefab); }"
  },
  "wiki/triggers.html": {
    "href": "wiki/triggers.html",
    "title": "Triggers and Interfaces | InscryptionAPI",
    "keywords": "Triggers and Interfaces The API adds a number of interfaces you can use to add additional functionality to your ability. It also adds a new class: ExtendedAbilityBehaviour , which has all the interfaces already implemented for immediate use, saving you time. Passive Attack and Health Buffs To do this, you need to override GetPassiveAttackBuff(PlayableCard target) or GetPassiveAttackBuff(PlayableCard target) to calculate the appropriate buffs. These return an int representing the buff to give to 'target'. In battle, the game will iterate across all cards on the board and check whether they should receive the buffs; this is what 'target' refers to; the current card being checked. You will need to write the logic for determining what cards should get the buff, as well as what buff they should receive. Note: you need to be very careful about how complicated the logic is in GetPassiveAttackBuffs and GetPassiveHealthBuffs. These methods will be called every frame for every instance of the ability!! If you're not careful, you could bog the game down substantially! TriggerWhenFaceDown The API allows you to add custom properties to an ability, using the same methods as for adding custom properties to cards. The API also allows you to control whether the ability's triggers will activate when the card is facedown. You will need to override TriggerWhenFaceDown to return true. There are also 2 other bools you can override for more control over what triggers should activate: ShouldTriggerWhenFaceDown, which controls whether vanilla triggers will activate; and ShouldTriggerCustomWhenFaceDown, which control whether custom triggers will activate. Modifying What Card Slots to Attack To do this, you need to override RespondsToGetOpposingSlots to return true (like all RespondsToXXX overrides, you can make this conditional), and then override GetOpposingSlots to return the list of card slots that your ability wants the card to attack. If you want to override the default slot (the one directly across from the card) instead of adding an additional card slot, you will need to override RemoveDefaultAttackSlot to return true. Modify What Card Slots Attack Don't let the similar names confuse you, this is in fact a different section from the above one. Using the IGetAttackingSlots interface, you can modify what card slots will attack each turn. For example, if you wanted to make a sigil that prevents a card from attacking at all: public class DontAttack : AbilityBehaviour, IGetAttackingSlots { public bool RespondsToGetAttackingSlots(bool playerIsAttacker, List<CardSlot> originalSlots, List<CardSlot> currentSlots) { return true; } // returns a list of card slots TO BE ADDED to the list of attacking slots public List<CardSlot> GetAttackingSlots(bool playerIsAttacker, List<CardSlot> originalSlots, List<CardSlot> currentSlots) { // you can modify the currentSlots directly like this currentSlots.Remove(base.Card.Slot); // if you don't want to add new slots, return new() or null return new(); } // used to determine when to trigger this sigil, for when multiple sigils are modifying the attacking slots (e.g., other mods) // triggers are sorted from highest to lowest priority public int TriggerPriority(bool playerIsAttacker, List<CardSlot> originalSlots) { // in this example, we don't particularly care if other sigils re-add this slot // if we did, we'd return a lower number like -1000 or something return 0; } } Importantly, the list of card slots is UNFILTERED, meaning that some card slots may not actually end up in the final list of slots. The game will automatically remove card slots that are unoccupied, as well as card slots occupied by cards with 0 Power; if you add any such slots they will be removed. What this also means is that when checking card slots, you cannot assume that it has a card. public List<CardSlot> GetAttackingSlots(bool playerIsAttacker, List<CardSlot> originalSlots, List<CardSlot> currentSlots) { // this will cause an error currentSlots.RemoveAll(slot => slot.Card.HasAbility(Ability.Sharp)); // this will not currentSlots.RemoveAll(slot => slot.Card != null && slot.Card.HasAbility(Ability.Sharp)); return new(); } Modify Damage Taken Using IModifyDamageTaken, you can increase or reduce the damage cards take when they're attacked. Damage cannot go below 0; if it is, the API sets it to 0 after all calculations are done. public class ReduceDamageByOne : AbilityBehaviour, IModifyDamageTaken { public static Ability ability; public override Ability Ability => ability; public bool RespondsToModifyDamageTaken(PlayableCard target, int damage, PlayableCard attacker, int originalDamage) { // reduce damage this card takes by 1 if (base.Card == target && damage > 0) return attacker == null; return false; } public int OnModifyDamageTaken(PlayableCard target, int damage, PlayableCard attacker, int originalDamage) { damage--; return damage; // could also return damage - 1 if you want it all on one line } public int TriggerPriority(PlayableCard target, int damage, PlayableCard attacker) => 0; } Additional Functionality for Activated Abilities The API adds a new class ExtendedActivatedAbilityBehaviour that adds additional functionality for use when making activated abilities. This new class changes how activated abilities are made a bit. As an example, if you were inheriting from the vanilla ActivatedAbilityBehaviour, you would override BonesCost to set the... Bones cost. ExtendedActivatedAbilityBehaviour moves that functionality to the virtual int StartingBonesCost, and BonesCost is now used to keep track of the total cost, modifiders included. Put simply, to set the starting cost(s), you override StartingBonesCost, StartingEnergyCost, or StartingHealthCost. There is also a new override IEnumerator PostActivate() that triggers after the main body of code. Blood Cost This behaves exactly like the Blood cost for playing cards, where you have to sacrifice other cards on your side of the board in order to trigger an effect. The card info and card slot of sacrificed cards will be stored in the dictionary currentSacrificedCardInfos , with the CardInfo as the Key and the CardSlot as the Value. Use this if you want to manipulate sacrificed cards once they're gone, but do note that the dictionary is cleared once the ability's effect has finished. public Dictionary<CardSlot, CardInfo> currentSacrificedCardInfos = new(); public override IEnumerator Activate() { // Create new copies of the sacrificed cards in their original board slots foreach (KeyValuePair<CardSlot, CardInfo> valuePair in currentSacrificedCardInfos) { yield return Singleton<BoardManager>.Instance.CreateCardInSlot(valuePair.Value, valuePair.Key); } } Health Cost This is easy enough to understand, it's a way of making an activated ability cost Health to use. If the cost is equal to the card's current Health, then it will die. You can set this by overriding StartingHealthCost. Dynamic Activation Costs Using ExtendedActivatedAbilityBehaviour, you can change the cost of an activated ability during battle. By overriding OnActivateBonesCostMod, OnActivateEnergyCostMod, OnActivateBloodCostMod, or OnActivateHealthCostMod, you can make the ability's activation cost increase after it has been activated. public class ActivateRepulsive : ExtendedActivatedAbilityBehaviour { public static Ability abiliy; public override Ability Ability => ability; public override int StartingBonesCost => 2; public override int OnActivateBonesCostMod => 1; public override IEnumerator Activate() { yield return this.Effect(); } } You can keep changing these modifier fields as well, if you want the cost to increase exponentially. public override IEnumerator PostActivate(); { OnActivateBonesCostMod += 1; } You have basically no limits on how or when you can change the activation cost. public override IEnumerator OnUpkeep(bool playerUpkeep) { bonesCostMod -= 1; } This will reduce the Bones activation cost by 1 on upkeep. Note that bonesCostMod was used here instead of OnActivateBonesCostMod ; The OnActivate... fields are used for changing the cost every activation, while the ...CostMod fields are used for everything else. Importantly, the ...CostMod fields keep track of the current cost modifier. bonesCostMod = 0; This resets the current Bones cost modifier. An additional note to make is that you're not limited to only modifying a single cost; you can increase any cost you want, even those that aren't initially required for activation. Keeping Track of It All With the ability to modify a card's activation cost, the question of how to keep track of the new costs comes up. While it's entirely possible you have an incredible memory and can just hoof it from there, the API provides a simpler way for you to keep track of it all by updating the Rulebook description of your ability. When right-clicking the ability icon of a card, the API will grab the current activation costs and display them. This is unique to each card, so don't worry about keeping track of multiple activation costs. To tell the API what part of the Rulebook description should be modified, you must use [sigilcost:X] where X is the initial activation cost. string rulebookDescription = \"Pay [sigilcost:1 Bone, 1 Energy] to do a thing, then increase its activation cost by 1 Energy.\" AbilityManager.New(pluginGuid, rulebookName, rulebookDescription, typeof(T), \"artpath.png\"); Triggering OnResolveOnBoard In Act 2, upon playing a card with an activated ability you will trigger a tutorial explaining how they work. In order to ensure this code runs, you are prevented from overriding OnResolveOnBoard, both in the vanilla behaviour and in this extended version. Worry not however, for there is a workaround: the new virtual methods RespondsToPostResolveOnBoard() and OnPostResolveOnBoard() can be overridden instead to the same effect. public override IEnumerator RespondsToPostResolveOnBoard() { return true; } public override IEnumerator OnPostResolveOnBoard() { // put your code here }"
  }
}