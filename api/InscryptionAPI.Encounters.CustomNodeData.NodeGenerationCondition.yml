### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
  commentId: T:InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
  id: CustomNodeData.NodeGenerationCondition
  parent: InscryptionAPI.Encounters
  children: []
  langs:
  - csharp
  - vb
  name: CustomNodeData.NodeGenerationCondition
  nameWithType: CustomNodeData.NodeGenerationCondition
  fullName: InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
  type: Delegate
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: NodeGenerationCondition
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 17
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nThis tells us whether or not the node can actually be generated on the map.\nSimply creating the node is not good enough: the node has to confirm that it can be generated\n"
  example: []
  syntax:
    content: public delegate bool NodeGenerationCondition(int gridY, List<NodeData> previousNodes);
    parameters:
    - id: gridY
      type: System.Int32
      description: How deep into the map the node will be. Higher numbers are further away from the start.
    - id: previousNodes
      type: List{DiskCardGame.NodeData}
      description: All nodes that have previously been confirmed to be added to the map.
    return:
      type: System.Boolean
      description: TRUE if the node is able to be added to the map. FALSE if it is not.
    content.vb: Public Delegate Function NodeGenerationCondition(gridY As Integer, previousNodes As List(Of NodeData)) As Boolean
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: InscryptionAPI.Encounters
  commentId: N:InscryptionAPI.Encounters
  name: InscryptionAPI.Encounters
  nameWithType: InscryptionAPI.Encounters
  fullName: InscryptionAPI.Encounters
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: List{DiskCardGame.NodeData}
  commentId: '!:List{DiskCardGame.NodeData}'
  definition: List`1
  name: List<NodeData>
  nameWithType: List<NodeData>
  fullName: List<DiskCardGame.NodeData>
  nameWithType.vb: List(Of NodeData)
  fullName.vb: List(Of DiskCardGame.NodeData)
  name.vb: List(Of NodeData)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.NodeData
    name: NodeData
    nameWithType: NodeData
    fullName: DiskCardGame.NodeData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.NodeData
    name: NodeData
    nameWithType: NodeData
    fullName: DiskCardGame.NodeData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
