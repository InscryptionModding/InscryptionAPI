### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Encounters.EncounterExtensions
  commentId: T:InscryptionAPI.Encounters.EncounterExtensions
  id: EncounterExtensions
  parent: InscryptionAPI.Encounters
  children:
  - InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes``1(``0,DiskCardGame.Tribe[])
  - InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards``1(``0,System.String[])
  - InscryptionAPI.Encounters.EncounterExtensions.AddTurn``1(``0,DiskCardGame.EncounterBlueprintData.CardBlueprint[])
  - InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods``1(``0,DiskCardGame.EncounterBlueprintData.TurnModBlueprint[])
  - InscryptionAPI.Encounters.EncounterExtensions.CreateTurn``1(``0)
  - InscryptionAPI.Encounters.EncounterExtensions.OpponentById(IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent},DiskCardGame.Opponent.Type)
  - InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty``1(``0,System.Int32,System.Int32)
  - InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String,System.String,Type)
  - InscryptionAPI.Encounters.EncounterExtensions.SetOpponent(InscryptionAPI.Encounters.OpponentManager.FullOpponent,Type)
  - InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities``1(``0,DiskCardGame.Ability[])
  - InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific``1(``0,System.Boolean)
  - InscryptionAPI.Encounters.EncounterExtensions.SetSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String)
  - InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites``1(``0,System.String[])
  langs:
  - csharp
  - vb
  name: EncounterExtensions
  nameWithType: EncounterExtensions
  fullName: InscryptionAPI.Encounters.EncounterExtensions
  type: Class
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: EncounterExtensions
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 6
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static class EncounterExtensions
    content.vb: Public Module EncounterExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Encounters.EncounterExtensions.OpponentById(IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent},DiskCardGame.Opponent.Type)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.OpponentById(IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent},DiskCardGame.Opponent.Type)
  id: OpponentById(IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent},DiskCardGame.Opponent.Type)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: OpponentById(IEnumerable<OpponentManager.FullOpponent>, Opponent.Type)
  nameWithType: EncounterExtensions.OpponentById(IEnumerable<OpponentManager.FullOpponent>, Opponent.Type)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.OpponentById(IEnumerable<InscryptionAPI.Encounters.OpponentManager.FullOpponent>, DiskCardGame.Opponent.Type)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: OpponentById
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 8
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static OpponentManager.FullOpponent OpponentById(this IEnumerable<OpponentManager.FullOpponent> opponents, Opponent.Type id)
    parameters:
    - id: opponents
      type: IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
    - id: id
      type: DiskCardGame.Opponent.Type
    return:
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OpponentById(opponents As IEnumerable(Of OpponentManager.FullOpponent), id As Opponent.Type) As OpponentManager.FullOpponent
  overload: InscryptionAPI.Encounters.EncounterExtensions.OpponentById*
  nameWithType.vb: EncounterExtensions.OpponentById(IEnumerable(Of OpponentManager.FullOpponent), Opponent.Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.OpponentById(IEnumerable(Of InscryptionAPI.Encounters.OpponentManager.FullOpponent), DiskCardGame.Opponent.Type)
  name.vb: OpponentById(IEnumerable(Of OpponentManager.FullOpponent), Opponent.Type)
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetOpponent(InscryptionAPI.Encounters.OpponentManager.FullOpponent,Type)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetOpponent(InscryptionAPI.Encounters.OpponentManager.FullOpponent,Type)
  id: SetOpponent(InscryptionAPI.Encounters.OpponentManager.FullOpponent,Type)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetOpponent(OpponentManager.FullOpponent, Type)
  nameWithType: EncounterExtensions.SetOpponent(OpponentManager.FullOpponent, Type)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetOpponent(InscryptionAPI.Encounters.OpponentManager.FullOpponent, Type)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetOpponent
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 13
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static OpponentManager.FullOpponent SetOpponent(this OpponentManager.FullOpponent opp, Type opponentType)
    parameters:
    - id: opp
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    - id: opponentType
      type: Type
    return:
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetOpponent(opp As OpponentManager.FullOpponent, opponentType As Type) As OpponentManager.FullOpponent
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetOpponent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String)
  id: SetSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetSequencer(OpponentManager.FullOpponent, String)
  nameWithType: EncounterExtensions.SetSequencer(OpponentManager.FullOpponent, String)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent, System.String)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetSequencer
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 19
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static OpponentManager.FullOpponent SetSequencer(this OpponentManager.FullOpponent opp, string sequenceId)
    parameters:
    - id: opp
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    - id: sequenceId
      type: System.String
    return:
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetSequencer(opp As OpponentManager.FullOpponent, sequenceId As String) As OpponentManager.FullOpponent
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetSequencer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String,System.String,Type)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String,System.String,Type)
  id: SetNewSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent,System.String,System.String,Type)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetNewSequencer(OpponentManager.FullOpponent, String, String, Type)
  nameWithType: EncounterExtensions.SetNewSequencer(OpponentManager.FullOpponent, String, String, Type)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer(InscryptionAPI.Encounters.OpponentManager.FullOpponent, System.String, System.String, Type)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetNewSequencer
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 25
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static OpponentManager.FullOpponent SetNewSequencer(this OpponentManager.FullOpponent opp, string pluginGuid, string sequencerName, Type sequencerType)
    parameters:
    - id: opp
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    - id: pluginGuid
      type: System.String
    - id: sequencerName
      type: System.String
    - id: sequencerType
      type: Type
    return:
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetNewSequencer(opp As OpponentManager.FullOpponent, pluginGuid As String, sequencerName As String, sequencerType As Type) As OpponentManager.FullOpponent
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty``1(``0,System.Int32,System.Int32)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty``1(``0,System.Int32,System.Int32)
  id: SetDifficulty``1(``0,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetDifficulty<T>(T, Int32, Int32)
  nameWithType: EncounterExtensions.SetDifficulty<T>(T, Int32, Int32)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty<T>(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetDifficulty
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 38
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nSets the difficulty range of this encounter.<br />\nDifficulty is determined by the formula (6 * <code>tier</code>) + <code>battle#</code> + <code>modifier</code>.\n"
  example: []
  syntax:
    content: >-
      public static T SetDifficulty<T>(this T blueprint, int min, int max)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: min
      type: System.Int32
      description: The minimum difficulty.
    - id: max
      type: System.Int32
      description: The maximum difficulty.
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetDifficulty(Of T As EncounterBlueprintData)(blueprint As T, min As Integer, max As Integer) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty*
  nameWithType.vb: EncounterExtensions.SetDifficulty(Of T)(T, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty(Of T)(T, System.Int32, System.Int32)
  name.vb: SetDifficulty(Of T)(T, Int32, Int32)
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes``1(``0,DiskCardGame.Tribe[])
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes``1(``0,DiskCardGame.Tribe[])
  id: AddDominantTribes``1(``0,DiskCardGame.Tribe[])
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: AddDominantTribes<T>(T, Tribe[])
  nameWithType: EncounterExtensions.AddDominantTribes<T>(T, Tribe[])
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes<T>(T, DiskCardGame.Tribe[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddDominantTribes
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 50
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds dominant tribes to this region.<br />\nThe dominant tribes list determines the totems for this battle.\n"
  example: []
  syntax:
    content: >-
      public static T AddDominantTribes<T>(this T blueprint, params Tribe[] tribes)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: tribes
      type: DiskCardGame.Tribe[]
      description: The tribes to add.
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddDominantTribes(Of T As EncounterBlueprintData)(blueprint As T, ParamArray tribes As Tribe()) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes*
  nameWithType.vb: EncounterExtensions.AddDominantTribes(Of T)(T, Tribe())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes(Of T)(T, DiskCardGame.Tribe())
  name.vb: AddDominantTribes(Of T)(T, Tribe())
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific``1(``0,System.Boolean)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific``1(``0,System.Boolean)
  id: SetRegionSpecific``1(``0,System.Boolean)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetRegionSpecific<T>(T, Boolean)
  nameWithType: EncounterExtensions.SetRegionSpecific<T>(T, Boolean)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific<T>(T, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetRegionSpecific
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 60
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      public static T SetRegionSpecific<T>(this T blueprint, bool enabled)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: enabled
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetRegionSpecific(Of T As EncounterBlueprintData)(blueprint As T, enabled As Boolean) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific*
  nameWithType.vb: EncounterExtensions.SetRegionSpecific(Of T)(T, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific(Of T)(T, System.Boolean)
  name.vb: SetRegionSpecific(Of T)(T, Boolean)
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards``1(``0,System.String[])
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards``1(``0,System.String[])
  id: AddRandomReplacementCards``1(``0,System.String[])
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: AddRandomReplacementCards<T>(T, String[])
  nameWithType: EncounterExtensions.AddRandomReplacementCards<T>(T, String[])
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards<T>(T, System.String[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddRandomReplacementCards
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 72
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds random replacement cards to this region.<br />\nA card from this list is selected whenever a card is randomly replaced by <code>randomReplaceChance</code>.\n"
  example: []
  syntax:
    content: >-
      public static T AddRandomReplacementCards<T>(this T blueprint, params string[] cards)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: cards
      type: System.String[]
      description: The cards to add.
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddRandomReplacementCards(Of T As EncounterBlueprintData)(blueprint As T, ParamArray cards As String()) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards*
  nameWithType.vb: EncounterExtensions.AddRandomReplacementCards(Of T)(T, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards(Of T)(T, System.String())
  name.vb: AddRandomReplacementCards(Of T)(T, String())
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities``1(``0,DiskCardGame.Ability[])
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities``1(``0,DiskCardGame.Ability[])
  id: SetRedundantAbilities``1(``0,DiskCardGame.Ability[])
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetRedundantAbilities<T>(T, Ability[])
  nameWithType: EncounterExtensions.SetRedundantAbilities<T>(T, Ability[])
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities<T>(T, DiskCardGame.Ability[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetRedundantAbilities
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 91
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds redundant abilities to this region.<br />\nRedundant abilities will not be used on totems for this encounter.\n"
  example: []
  syntax:
    content: >-
      public static T SetRedundantAbilities<T>(this T blueprint, params Ability[] abilities)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: abilities
      type: DiskCardGame.Ability[]
      description: The abilities to add.
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetRedundantAbilities(Of T As EncounterBlueprintData)(blueprint As T, ParamArray abilities As Ability()) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities*
  nameWithType.vb: EncounterExtensions.SetRedundantAbilities(Of T)(T, Ability())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities(Of T)(T, DiskCardGame.Ability())
  name.vb: SetRedundantAbilities(Of T)(T, Ability())
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites``1(``0,System.String[])
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites``1(``0,System.String[])
  id: SetUnlockedCardPrerequisites``1(``0,System.String[])
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: SetUnlockedCardPrerequisites<T>(T, String[])
  nameWithType: EncounterExtensions.SetUnlockedCardPrerequisites<T>(T, String[])
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites<T>(T, System.String[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SetUnlockedCardPrerequisites
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 97
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      public static T SetUnlockedCardPrerequisites<T>(this T blueprint, params string[] cards)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: cards
      type: System.String[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetUnlockedCardPrerequisites(Of T As EncounterBlueprintData)(blueprint As T, ParamArray cards As String()) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites*
  nameWithType.vb: EncounterExtensions.SetUnlockedCardPrerequisites(Of T)(T, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites(Of T)(T, System.String())
  name.vb: SetUnlockedCardPrerequisites(Of T)(T, String())
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods``1(``0,DiskCardGame.EncounterBlueprintData.TurnModBlueprint[])
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods``1(``0,DiskCardGame.EncounterBlueprintData.TurnModBlueprint[])
  id: AddTurnMods``1(``0,DiskCardGame.EncounterBlueprintData.TurnModBlueprint[])
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: AddTurnMods<T>(T, EncounterBlueprintData.TurnModBlueprint[])
  nameWithType: EncounterExtensions.AddTurnMods<T>(T, EncounterBlueprintData.TurnModBlueprint[])
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods<T>(T, DiskCardGame.EncounterBlueprintData.TurnModBlueprint[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddTurnMods
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 111
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      public static T AddTurnMods<T>(this T blueprint, params EncounterBlueprintData.TurnModBlueprint[] turnMods)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: turnMods
      type: DiskCardGame.EncounterBlueprintData.TurnModBlueprint[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTurnMods(Of T As EncounterBlueprintData)(blueprint As T, ParamArray turnMods As EncounterBlueprintData.TurnModBlueprint()) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods*
  nameWithType.vb: EncounterExtensions.AddTurnMods(Of T)(T, EncounterBlueprintData.TurnModBlueprint())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods(Of T)(T, DiskCardGame.EncounterBlueprintData.TurnModBlueprint())
  name.vb: AddTurnMods(Of T)(T, EncounterBlueprintData.TurnModBlueprint())
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddTurn``1(``0,DiskCardGame.EncounterBlueprintData.CardBlueprint[])
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.AddTurn``1(``0,DiskCardGame.EncounterBlueprintData.CardBlueprint[])
  id: AddTurn``1(``0,DiskCardGame.EncounterBlueprintData.CardBlueprint[])
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: AddTurn<T>(T, EncounterBlueprintData.CardBlueprint[])
  nameWithType: EncounterExtensions.AddTurn<T>(T, EncounterBlueprintData.CardBlueprint[])
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddTurn<T>(T, DiskCardGame.EncounterBlueprintData.CardBlueprint[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddTurn
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 117
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      public static T AddTurn<T>(this T blueprint, params EncounterBlueprintData.CardBlueprint[] turn)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    - id: turn
      type: DiskCardGame.EncounterBlueprintData.CardBlueprint[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTurn(Of T As EncounterBlueprintData)(blueprint As T, ParamArray turn As EncounterBlueprintData.CardBlueprint()) As T
  overload: InscryptionAPI.Encounters.EncounterExtensions.AddTurn*
  nameWithType.vb: EncounterExtensions.AddTurn(Of T)(T, EncounterBlueprintData.CardBlueprint())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.AddTurn(Of T)(T, DiskCardGame.EncounterBlueprintData.CardBlueprint())
  name.vb: AddTurn(Of T)(T, EncounterBlueprintData.CardBlueprint())
- uid: InscryptionAPI.Encounters.EncounterExtensions.CreateTurn``1(``0)
  commentId: M:InscryptionAPI.Encounters.EncounterExtensions.CreateTurn``1(``0)
  id: CreateTurn``1(``0)
  isExtensionMethod: true
  parent: InscryptionAPI.Encounters.EncounterExtensions
  langs:
  - csharp
  - vb
  name: CreateTurn<T>(T)
  nameWithType: EncounterExtensions.CreateTurn<T>(T)
  fullName: InscryptionAPI.Encounters.EncounterExtensions.CreateTurn<T>(T)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: CreateTurn
    path: ../InscryptionAPI/Encounters/EncounterExtensions.cs
    startLine: 126
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nCreates a new turn for this encounter and returns the builder.\n"
  example: []
  syntax:
    content: >-
      public static TurnBuilder<T> CreateTurn<T>(this T blueprint)
          where T : EncounterBlueprintData
    parameters:
    - id: blueprint
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: InscryptionAPI.Encounters.TurnBuilder{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateTurn(Of T As EncounterBlueprintData)(blueprint As T) As TurnBuilder(Of T)
  overload: InscryptionAPI.Encounters.EncounterExtensions.CreateTurn*
  nameWithType.vb: EncounterExtensions.CreateTurn(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.EncounterExtensions.CreateTurn(Of T)(T)
  name.vb: CreateTurn(Of T)(T)
references:
- uid: InscryptionAPI.Encounters
  commentId: N:InscryptionAPI.Encounters
  name: InscryptionAPI.Encounters
  nameWithType: InscryptionAPI.Encounters
  fullName: InscryptionAPI.Encounters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InscryptionAPI.Encounters.EncounterExtensions.OpponentById*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.OpponentById
  name: OpponentById
  nameWithType: EncounterExtensions.OpponentById
  fullName: InscryptionAPI.Encounters.EncounterExtensions.OpponentById
- uid: IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
  commentId: '!:IEnumerable{InscryptionAPI.Encounters.OpponentManager.FullOpponent}'
  definition: IEnumerable`1
  name: IEnumerable<OpponentManager.FullOpponent>
  nameWithType: IEnumerable<OpponentManager.FullOpponent>
  fullName: IEnumerable<InscryptionAPI.Encounters.OpponentManager.FullOpponent>
  nameWithType.vb: IEnumerable(Of OpponentManager.FullOpponent)
  fullName.vb: IEnumerable(Of InscryptionAPI.Encounters.OpponentManager.FullOpponent)
  name.vb: IEnumerable(Of OpponentManager.FullOpponent)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    name: OpponentManager.FullOpponent
    nameWithType: OpponentManager.FullOpponent
    fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    name: OpponentManager.FullOpponent
    nameWithType: OpponentManager.FullOpponent
    fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  - name: )
    nameWithType: )
    fullName: )
- uid: DiskCardGame.Opponent.Type
  commentId: T:DiskCardGame.Opponent.Type
  parent: DiskCardGame
  isExternal: true
  name: Opponent.Type
  nameWithType: Opponent.Type
  fullName: DiskCardGame.Opponent.Type
- uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  commentId: T:InscryptionAPI.Encounters.OpponentManager.FullOpponent
  parent: InscryptionAPI.Encounters
  name: OpponentManager.FullOpponent
  nameWithType: OpponentManager.FullOpponent
  fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DiskCardGame
  commentId: N:DiskCardGame
  isExternal: true
  name: DiskCardGame
  nameWithType: DiskCardGame
  fullName: DiskCardGame
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetOpponent*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetOpponent
  name: SetOpponent
  nameWithType: EncounterExtensions.SetOpponent
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetOpponent
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetSequencer*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetSequencer
  name: SetSequencer
  nameWithType: EncounterExtensions.SetSequencer
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetSequencer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer
  name: SetNewSequencer
  nameWithType: EncounterExtensions.SetNewSequencer
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetNewSequencer
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty
  name: SetDifficulty
  nameWithType: EncounterExtensions.SetDifficulty
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetDifficulty
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes
  name: AddDominantTribes
  nameWithType: EncounterExtensions.AddDominantTribes
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddDominantTribes
- uid: DiskCardGame.Tribe[]
  isExternal: true
  name: Tribe[]
  nameWithType: Tribe[]
  fullName: DiskCardGame.Tribe[]
  nameWithType.vb: Tribe()
  fullName.vb: DiskCardGame.Tribe()
  name.vb: Tribe()
  spec.csharp:
  - uid: DiskCardGame.Tribe
    name: Tribe
    nameWithType: Tribe
    fullName: DiskCardGame.Tribe
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: DiskCardGame.Tribe
    name: Tribe
    nameWithType: Tribe
    fullName: DiskCardGame.Tribe
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific
  name: SetRegionSpecific
  nameWithType: EncounterExtensions.SetRegionSpecific
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetRegionSpecific
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards
  name: AddRandomReplacementCards
  nameWithType: EncounterExtensions.AddRandomReplacementCards
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddRandomReplacementCards
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities
  name: SetRedundantAbilities
  nameWithType: EncounterExtensions.SetRedundantAbilities
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetRedundantAbilities
- uid: DiskCardGame.Ability[]
  isExternal: true
  name: Ability[]
  nameWithType: Ability[]
  fullName: DiskCardGame.Ability[]
  nameWithType.vb: Ability()
  fullName.vb: DiskCardGame.Ability()
  name.vb: Ability()
  spec.csharp:
  - uid: DiskCardGame.Ability
    name: Ability
    nameWithType: Ability
    fullName: DiskCardGame.Ability
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: DiskCardGame.Ability
    name: Ability
    nameWithType: Ability
    fullName: DiskCardGame.Ability
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites
  name: SetUnlockedCardPrerequisites
  nameWithType: EncounterExtensions.SetUnlockedCardPrerequisites
  fullName: InscryptionAPI.Encounters.EncounterExtensions.SetUnlockedCardPrerequisites
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods
  name: AddTurnMods
  nameWithType: EncounterExtensions.AddTurnMods
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddTurnMods
- uid: DiskCardGame.EncounterBlueprintData.TurnModBlueprint[]
  isExternal: true
  name: EncounterBlueprintData.TurnModBlueprint[]
  nameWithType: EncounterBlueprintData.TurnModBlueprint[]
  fullName: DiskCardGame.EncounterBlueprintData.TurnModBlueprint[]
  nameWithType.vb: EncounterBlueprintData.TurnModBlueprint()
  fullName.vb: DiskCardGame.EncounterBlueprintData.TurnModBlueprint()
  name.vb: EncounterBlueprintData.TurnModBlueprint()
  spec.csharp:
  - uid: DiskCardGame.EncounterBlueprintData.TurnModBlueprint
    name: EncounterBlueprintData.TurnModBlueprint
    nameWithType: EncounterBlueprintData.TurnModBlueprint
    fullName: DiskCardGame.EncounterBlueprintData.TurnModBlueprint
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: DiskCardGame.EncounterBlueprintData.TurnModBlueprint
    name: EncounterBlueprintData.TurnModBlueprint
    nameWithType: EncounterBlueprintData.TurnModBlueprint
    fullName: DiskCardGame.EncounterBlueprintData.TurnModBlueprint
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InscryptionAPI.Encounters.EncounterExtensions.AddTurn*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.AddTurn
  name: AddTurn
  nameWithType: EncounterExtensions.AddTurn
  fullName: InscryptionAPI.Encounters.EncounterExtensions.AddTurn
- uid: DiskCardGame.EncounterBlueprintData.CardBlueprint[]
  isExternal: true
  name: EncounterBlueprintData.CardBlueprint[]
  nameWithType: EncounterBlueprintData.CardBlueprint[]
  fullName: DiskCardGame.EncounterBlueprintData.CardBlueprint[]
  nameWithType.vb: EncounterBlueprintData.CardBlueprint()
  fullName.vb: DiskCardGame.EncounterBlueprintData.CardBlueprint()
  name.vb: EncounterBlueprintData.CardBlueprint()
  spec.csharp:
  - uid: DiskCardGame.EncounterBlueprintData.CardBlueprint
    name: EncounterBlueprintData.CardBlueprint
    nameWithType: EncounterBlueprintData.CardBlueprint
    fullName: DiskCardGame.EncounterBlueprintData.CardBlueprint
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: DiskCardGame.EncounterBlueprintData.CardBlueprint
    name: EncounterBlueprintData.CardBlueprint
    nameWithType: EncounterBlueprintData.CardBlueprint
    fullName: DiskCardGame.EncounterBlueprintData.CardBlueprint
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InscryptionAPI.Encounters.EncounterExtensions.CreateTurn*
  commentId: Overload:InscryptionAPI.Encounters.EncounterExtensions.CreateTurn
  name: CreateTurn
  nameWithType: EncounterExtensions.CreateTurn
  fullName: InscryptionAPI.Encounters.EncounterExtensions.CreateTurn
- uid: InscryptionAPI.Encounters.TurnBuilder{{T}}
  commentId: T:InscryptionAPI.Encounters.TurnBuilder{``0}
  parent: InscryptionAPI.Encounters
  definition: InscryptionAPI.Encounters.TurnBuilder`1
  name: TurnBuilder<T>
  nameWithType: TurnBuilder<T>
  fullName: InscryptionAPI.Encounters.TurnBuilder<T>
  nameWithType.vb: TurnBuilder(Of T)
  fullName.vb: InscryptionAPI.Encounters.TurnBuilder(Of T)
  name.vb: TurnBuilder(Of T)
  spec.csharp:
  - uid: InscryptionAPI.Encounters.TurnBuilder`1
    name: TurnBuilder
    nameWithType: TurnBuilder
    fullName: InscryptionAPI.Encounters.TurnBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InscryptionAPI.Encounters.TurnBuilder`1
    name: TurnBuilder
    nameWithType: TurnBuilder
    fullName: InscryptionAPI.Encounters.TurnBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Encounters.TurnBuilder`1
  commentId: T:InscryptionAPI.Encounters.TurnBuilder`1
  name: TurnBuilder<T>
  nameWithType: TurnBuilder<T>
  fullName: InscryptionAPI.Encounters.TurnBuilder<T>
  nameWithType.vb: TurnBuilder(Of T)
  fullName.vb: InscryptionAPI.Encounters.TurnBuilder(Of T)
  name.vb: TurnBuilder(Of T)
  spec.csharp:
  - uid: InscryptionAPI.Encounters.TurnBuilder`1
    name: TurnBuilder
    nameWithType: TurnBuilder
    fullName: InscryptionAPI.Encounters.TurnBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: InscryptionAPI.Encounters.TurnBuilder`1
    name: TurnBuilder
    nameWithType: TurnBuilder
    fullName: InscryptionAPI.Encounters.TurnBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
