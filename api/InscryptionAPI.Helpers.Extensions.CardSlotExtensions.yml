### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Helpers.Extensions.CardSlotExtensions
  commentId: T:InscryptionAPI.Helpers.Extensions.CardSlotExtensions
  id: CardSlotExtensions
  parent: InscryptionAPI.Helpers.Extensions
  children:
  - InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.PlayableCard})
  - InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.CardSlot})
  langs:
  - csharp
  - vb
  name: CardSlotExtensions
  nameWithType: CardSlotExtensions
  fullName: InscryptionAPI.Helpers.Extensions.CardSlotExtensions
  type: Class
  source:
    remote:
      path: InscryptionAPI/Helpers/Extensions/CardSlotExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: CardSlotExtensions
    path: ../InscryptionAPI/Helpers/Extensions/CardSlotExtensions.cs
    startLine: 4
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Helpers.Extensions
  syntax:
    content: public static class CardSlotExtensions
    content.vb: Public Module CardSlotExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.PlayableCard})
  commentId: M:InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.PlayableCard})
  id: GetCards(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.PlayableCard})
  isExtensionMethod: true
  parent: InscryptionAPI.Helpers.Extensions.CardSlotExtensions
  langs:
  - csharp
  - vb
  name: GetCards(IEnumerable<CardSlot>, Predicate<PlayableCard>)
  nameWithType: CardSlotExtensions.GetCards(IEnumerable<CardSlot>, Predicate<PlayableCard>)
  fullName: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards(IEnumerable<DiskCardGame.CardSlot>, Predicate<DiskCardGame.PlayableCard>)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Helpers/Extensions/CardSlotExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: GetCards
    path: ../InscryptionAPI/Helpers/Extensions/CardSlotExtensions.cs
    startLine: 12
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Helpers.Extensions
  summary: "\nRetrieve all the PlayableCard objects from the collection of slots provided.\n"
  example: []
  syntax:
    content: public static List<PlayableCard> GetCards(this IEnumerable<CardSlot> slots, Predicate<PlayableCard> filterOnPredicate = null)
    parameters:
    - id: slots
      type: IEnumerable{DiskCardGame.CardSlot}
      description: Collection of CardSlots
    - id: filterOnPredicate
      type: Predicate{DiskCardGame.PlayableCard}
      description: Predicate to filter each slot&apos;s playable card against, if one exists.
    return:
      type: List{DiskCardGame.PlayableCard}
      description: The list of cards from each slot
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCards(slots As IEnumerable(Of CardSlot), filterOnPredicate As Predicate(Of PlayableCard) = Nothing) As List(Of PlayableCard)
  overload: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards*
  nameWithType.vb: CardSlotExtensions.GetCards(IEnumerable(Of CardSlot), Predicate(Of PlayableCard))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards(IEnumerable(Of DiskCardGame.CardSlot), Predicate(Of DiskCardGame.PlayableCard))
  name.vb: GetCards(IEnumerable(Of CardSlot), Predicate(Of PlayableCard))
- uid: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.CardSlot})
  commentId: M:InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.CardSlot})
  id: OpenSlots(IEnumerable{DiskCardGame.CardSlot},Predicate{DiskCardGame.CardSlot})
  isExtensionMethod: true
  parent: InscryptionAPI.Helpers.Extensions.CardSlotExtensions
  langs:
  - csharp
  - vb
  name: OpenSlots(IEnumerable<CardSlot>, Predicate<CardSlot>)
  nameWithType: CardSlotExtensions.OpenSlots(IEnumerable<CardSlot>, Predicate<CardSlot>)
  fullName: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots(IEnumerable<DiskCardGame.CardSlot>, Predicate<DiskCardGame.CardSlot>)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Helpers/Extensions/CardSlotExtensions.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: OpenSlots
    path: ../InscryptionAPI/Helpers/Extensions/CardSlotExtensions.cs
    startLine: 26
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Helpers.Extensions
  summary: "\nRetrieve all the CardSlot objects that are not occupied by a PlayableCard object.\n"
  example: []
  syntax:
    content: public static List<CardSlot> OpenSlots(this IEnumerable<CardSlot> slots, Predicate<CardSlot> filterOnPredicate = null)
    parameters:
    - id: slots
      type: IEnumerable{DiskCardGame.CardSlot}
      description: Collection of CardSlots
    - id: filterOnPredicate
      type: Predicate{DiskCardGame.CardSlot}
      description: Predicate to filter each slot against
    return:
      type: List{DiskCardGame.CardSlot}
      description: The list of slots not occupied by a playable card.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OpenSlots(slots As IEnumerable(Of CardSlot), filterOnPredicate As Predicate(Of CardSlot) = Nothing) As List(Of CardSlot)
  overload: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots*
  nameWithType.vb: CardSlotExtensions.OpenSlots(IEnumerable(Of CardSlot), Predicate(Of CardSlot))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots(IEnumerable(Of DiskCardGame.CardSlot), Predicate(Of DiskCardGame.CardSlot))
  name.vb: OpenSlots(IEnumerable(Of CardSlot), Predicate(Of CardSlot))
references:
- uid: InscryptionAPI.Helpers.Extensions
  commentId: N:InscryptionAPI.Helpers.Extensions
  name: InscryptionAPI.Helpers.Extensions
  nameWithType: InscryptionAPI.Helpers.Extensions
  fullName: InscryptionAPI.Helpers.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards*
  commentId: Overload:InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards
  name: GetCards
  nameWithType: CardSlotExtensions.GetCards
  fullName: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.GetCards
- uid: IEnumerable{DiskCardGame.CardSlot}
  commentId: '!:IEnumerable{DiskCardGame.CardSlot}'
  definition: IEnumerable`1
  name: IEnumerable<CardSlot>
  nameWithType: IEnumerable<CardSlot>
  fullName: IEnumerable<DiskCardGame.CardSlot>
  nameWithType.vb: IEnumerable(Of CardSlot)
  fullName.vb: IEnumerable(Of DiskCardGame.CardSlot)
  name.vb: IEnumerable(Of CardSlot)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.CardSlot
    name: CardSlot
    nameWithType: CardSlot
    fullName: DiskCardGame.CardSlot
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.CardSlot
    name: CardSlot
    nameWithType: CardSlot
    fullName: DiskCardGame.CardSlot
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Predicate{DiskCardGame.PlayableCard}
  commentId: '!:Predicate{DiskCardGame.PlayableCard}'
  definition: Predicate`1
  name: Predicate<PlayableCard>
  nameWithType: Predicate<PlayableCard>
  fullName: Predicate<DiskCardGame.PlayableCard>
  nameWithType.vb: Predicate(Of PlayableCard)
  fullName.vb: Predicate(Of DiskCardGame.PlayableCard)
  name.vb: Predicate(Of PlayableCard)
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.PlayableCard
    name: PlayableCard
    nameWithType: PlayableCard
    fullName: DiskCardGame.PlayableCard
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.PlayableCard
    name: PlayableCard
    nameWithType: PlayableCard
    fullName: DiskCardGame.PlayableCard
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List{DiskCardGame.PlayableCard}
  commentId: '!:List{DiskCardGame.PlayableCard}'
  definition: List`1
  name: List<PlayableCard>
  nameWithType: List<PlayableCard>
  fullName: List<DiskCardGame.PlayableCard>
  nameWithType.vb: List(Of PlayableCard)
  fullName.vb: List(Of DiskCardGame.PlayableCard)
  name.vb: List(Of PlayableCard)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.PlayableCard
    name: PlayableCard
    nameWithType: PlayableCard
    fullName: DiskCardGame.PlayableCard
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.PlayableCard
    name: PlayableCard
    nameWithType: PlayableCard
    fullName: DiskCardGame.PlayableCard
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Predicate`1
  isExternal: true
  name: Predicate<>
  nameWithType: Predicate<>
  fullName: Predicate<>
  nameWithType.vb: Predicate(Of )
  fullName.vb: Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots*
  commentId: Overload:InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots
  name: OpenSlots
  nameWithType: CardSlotExtensions.OpenSlots
  fullName: InscryptionAPI.Helpers.Extensions.CardSlotExtensions.OpenSlots
- uid: Predicate{DiskCardGame.CardSlot}
  commentId: '!:Predicate{DiskCardGame.CardSlot}'
  definition: Predicate`1
  name: Predicate<CardSlot>
  nameWithType: Predicate<CardSlot>
  fullName: Predicate<DiskCardGame.CardSlot>
  nameWithType.vb: Predicate(Of CardSlot)
  fullName.vb: Predicate(Of DiskCardGame.CardSlot)
  name.vb: Predicate(Of CardSlot)
  spec.csharp:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.CardSlot
    name: CardSlot
    nameWithType: CardSlot
    fullName: DiskCardGame.CardSlot
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.CardSlot
    name: CardSlot
    nameWithType: CardSlot
    fullName: DiskCardGame.CardSlot
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List{DiskCardGame.CardSlot}
  commentId: '!:List{DiskCardGame.CardSlot}'
  definition: List`1
  name: List<CardSlot>
  nameWithType: List<CardSlot>
  fullName: List<DiskCardGame.CardSlot>
  nameWithType.vb: List(Of CardSlot)
  fullName.vb: List(Of DiskCardGame.CardSlot)
  name.vb: List(Of CardSlot)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.CardSlot
    name: CardSlot
    nameWithType: CardSlot
    fullName: DiskCardGame.CardSlot
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.CardSlot
    name: CardSlot
    nameWithType: CardSlot
    fullName: DiskCardGame.CardSlot
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
