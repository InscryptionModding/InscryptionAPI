### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Encounters.OpponentManager
  commentId: T:InscryptionAPI.Encounters.OpponentManager
  id: OpponentManager
  parent: InscryptionAPI.Encounters
  children:
  - InscryptionAPI.Encounters.OpponentManager.Add(System.String,System.String,System.String,Type)
  - InscryptionAPI.Encounters.OpponentManager.AllOpponents
  - InscryptionAPI.Encounters.OpponentManager.BaseGameOpponents
  - InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss(DiskCardGame.Opponent.Type)
  - InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId(DiskCardGame.Opponent.Type,System.String@)
  - InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath(System.String@,DiskCardGame.Opponent.Type)
  - InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent(DiskCardGame.EncounterData,DiskCardGame.Opponent@)
  langs:
  - csharp
  - vb
  name: OpponentManager
  nameWithType: OpponentManager
  fullName: InscryptionAPI.Encounters.OpponentManager
  type: Class
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: OpponentManager
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 9
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyPatch]

      public static class OpponentManager
    content.vb: >-
      <HarmonyPatch>

      Public Module OpponentManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Encounters.OpponentManager.BaseGameOpponents
  commentId: F:InscryptionAPI.Encounters.OpponentManager.BaseGameOpponents
  id: BaseGameOpponents
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: BaseGameOpponents
  nameWithType: OpponentManager.BaseGameOpponents
  fullName: InscryptionAPI.Encounters.OpponentManager.BaseGameOpponents
  type: Field
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: BaseGameOpponents
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 26
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static readonly ReadOnlyCollection<OpponentManager.FullOpponent> BaseGameOpponents
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
    content.vb: Public Shared ReadOnly BaseGameOpponents As ReadOnlyCollection(Of OpponentManager.FullOpponent)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Encounters.OpponentManager.AllOpponents
  commentId: P:InscryptionAPI.Encounters.OpponentManager.AllOpponents
  id: AllOpponents
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: AllOpponents
  nameWithType: OpponentManager.AllOpponents
  fullName: InscryptionAPI.Encounters.OpponentManager.AllOpponents
  type: Property
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AllOpponents
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 61
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static List<OpponentManager.FullOpponent> AllOpponents { get; }
    parameters: []
    return:
      type: List{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
    content.vb: Public Shared ReadOnly Property AllOpponents As List(Of OpponentManager.FullOpponent)
  overload: InscryptionAPI.Encounters.OpponentManager.AllOpponents*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Encounters.OpponentManager.Add(System.String,System.String,System.String,Type)
  commentId: M:InscryptionAPI.Encounters.OpponentManager.Add(System.String,System.String,System.String,Type)
  id: Add(System.String,System.String,System.String,Type)
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: Add(String, String, String, Type)
  nameWithType: OpponentManager.Add(String, String, String, Type)
  fullName: InscryptionAPI.Encounters.OpponentManager.Add(System.String, System.String, System.String, Type)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Add
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 63
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static OpponentManager.FullOpponent Add(string guid, string opponentName, string sequencerID, Type opponentType)
    parameters:
    - id: guid
      type: System.String
    - id: opponentName
      type: System.String
    - id: sequencerID
      type: System.String
    - id: opponentType
      type: Type
    return:
      type: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    content.vb: Public Shared Function Add(guid As String, opponentName As String, sequencerID As String, opponentType As Type) As OpponentManager.FullOpponent
  overload: InscryptionAPI.Encounters.OpponentManager.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent(DiskCardGame.EncounterData,DiskCardGame.Opponent@)
  commentId: M:InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent(DiskCardGame.EncounterData,DiskCardGame.Opponent@)
  id: ReplaceSpawnOpponent(DiskCardGame.EncounterData,DiskCardGame.Opponent@)
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: ReplaceSpawnOpponent(EncounterData, ref Opponent)
  nameWithType: OpponentManager.ReplaceSpawnOpponent(EncounterData, ref Opponent)
  fullName: InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent(DiskCardGame.EncounterData, ref DiskCardGame.Opponent)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: ReplaceSpawnOpponent
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 71
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyPatch(typeof(Opponent), "SpawnOpponent")]

      [HarmonyPrefix]

      public static bool ReplaceSpawnOpponent(EncounterData encounterData, ref Opponent __result)
    parameters:
    - id: encounterData
      type: DiskCardGame.EncounterData
    - id: __result
      type: DiskCardGame.Opponent
    return:
      type: System.Boolean
    content.vb: >-
      <HarmonyPatch(GetType(Opponent), "SpawnOpponent")>

      <HarmonyPrefix>

      Public Shared Function ReplaceSpawnOpponent(encounterData As EncounterData, ByRef __result As Opponent) As Boolean
  overload: InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.Opponent
    - type: System.String
      value: SpawnOpponent
  - type: HarmonyLib.HarmonyPrefix
    ctor: HarmonyLib.HarmonyPrefix.#ctor
    arguments: []
  nameWithType.vb: OpponentManager.ReplaceSpawnOpponent(EncounterData, ByRef Opponent)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent(DiskCardGame.EncounterData, ByRef DiskCardGame.Opponent)
  name.vb: ReplaceSpawnOpponent(EncounterData, ByRef Opponent)
- uid: InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss(DiskCardGame.Opponent.Type)
  commentId: M:InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss(DiskCardGame.Opponent.Type)
  id: OriginalGetSequencerIdForBoss(DiskCardGame.Opponent.Type)
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: OriginalGetSequencerIdForBoss(Opponent.Type)
  nameWithType: OpponentManager.OriginalGetSequencerIdForBoss(Opponent.Type)
  fullName: InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss(DiskCardGame.Opponent.Type)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: OriginalGetSequencerIdForBoss
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 97
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyReversePatch(HarmonyReversePatchType.Original)]

      [HarmonyPatch(typeof(BossBattleSequencer), "GetSequencerIdForBoss")]

      public static string OriginalGetSequencerIdForBoss(Opponent.Type bossType)
    parameters:
    - id: bossType
      type: DiskCardGame.Opponent.Type
    return:
      type: System.String
    content.vb: >-
      <HarmonyReversePatch(HarmonyReversePatchType.Original)>

      <HarmonyPatch(GetType(BossBattleSequencer), "GetSequencerIdForBoss")>

      Public Shared Function OriginalGetSequencerIdForBoss(bossType As Opponent.Type) As String
  overload: InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss*
  attributes:
  - type: HarmonyLib.HarmonyReversePatch
    ctor: HarmonyLib.HarmonyReversePatch.#ctor(HarmonyLib.HarmonyReversePatchType)
    arguments:
    - type: HarmonyLib.HarmonyReversePatchType
      value: 0
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.BossBattleSequencer
    - type: System.String
      value: GetSequencerIdForBoss
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId(DiskCardGame.Opponent.Type,System.String@)
  commentId: M:InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId(DiskCardGame.Opponent.Type,System.String@)
  id: ReplaceGetSequencerId(DiskCardGame.Opponent.Type,System.String@)
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: ReplaceGetSequencerId(Opponent.Type, ref String)
  nameWithType: OpponentManager.ReplaceGetSequencerId(Opponent.Type, ref String)
  fullName: InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId(DiskCardGame.Opponent.Type, ref System.String)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: ReplaceGetSequencerId
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 102
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyPatch(typeof(BossBattleSequencer), "GetSequencerIdForBoss")]

      [HarmonyPrefix]

      public static bool ReplaceGetSequencerId(Opponent.Type bossType, ref string __result)
    parameters:
    - id: bossType
      type: DiskCardGame.Opponent.Type
    - id: __result
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <HarmonyPatch(GetType(BossBattleSequencer), "GetSequencerIdForBoss")>

      <HarmonyPrefix>

      Public Shared Function ReplaceGetSequencerId(bossType As Opponent.Type, ByRef __result As String) As Boolean
  overload: InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.BossBattleSequencer
    - type: System.String
      value: GetSequencerIdForBoss
  - type: HarmonyLib.HarmonyPrefix
    ctor: HarmonyLib.HarmonyPrefix.#ctor
    arguments: []
  nameWithType.vb: OpponentManager.ReplaceGetSequencerId(Opponent.Type, ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId(DiskCardGame.Opponent.Type, ByRef System.String)
  name.vb: ReplaceGetSequencerId(Opponent.Type, ByRef String)
- uid: InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath(System.String@,DiskCardGame.Opponent.Type)
  commentId: M:InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath(System.String@,DiskCardGame.Opponent.Type)
  id: ReplacePrefabPath(System.String@,DiskCardGame.Opponent.Type)
  parent: InscryptionAPI.Encounters.OpponentManager
  langs:
  - csharp
  - vb
  name: ReplacePrefabPath(ref String, Opponent.Type)
  nameWithType: OpponentManager.ReplacePrefabPath(ref String, Opponent.Type)
  fullName: InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath(ref System.String, DiskCardGame.Opponent.Type)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/OpponentManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: ReplacePrefabPath
    path: ../InscryptionAPI/Encounters/OpponentManager.cs
    startLine: 110
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyPatch(typeof(BossBattleNodeData), "PrefabPath", MethodType.Getter)]

      [HarmonyPrefix]

      public static bool ReplacePrefabPath(ref string __result, Opponent.Type ___bossType)
    parameters:
    - id: __result
      type: System.String
    - id: ___bossType
      type: DiskCardGame.Opponent.Type
    return:
      type: System.Boolean
    content.vb: >-
      <HarmonyPatch(GetType(BossBattleNodeData), "PrefabPath", MethodType.Getter)>

      <HarmonyPrefix>

      Public Shared Function ReplacePrefabPath(ByRef __result As String, ___bossType As Opponent.Type) As Boolean
  overload: InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String,HarmonyLib.MethodType)
    arguments:
    - type: System.Type
      value: DiskCardGame.BossBattleNodeData
    - type: System.String
      value: PrefabPath
    - type: HarmonyLib.MethodType
      value: 1
  - type: HarmonyLib.HarmonyPrefix
    ctor: HarmonyLib.HarmonyPrefix.#ctor
    arguments: []
  nameWithType.vb: OpponentManager.ReplacePrefabPath(ByRef String, Opponent.Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath(ByRef System.String, DiskCardGame.Opponent.Type)
  name.vb: ReplacePrefabPath(ByRef String, Opponent.Type)
references:
- uid: InscryptionAPI.Encounters
  commentId: N:InscryptionAPI.Encounters
  name: InscryptionAPI.Encounters
  nameWithType: InscryptionAPI.Encounters
  fullName: InscryptionAPI.Encounters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.ReadOnlyCollection{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<OpponentManager.FullOpponent>
  nameWithType: ReadOnlyCollection<OpponentManager.FullOpponent>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<InscryptionAPI.Encounters.OpponentManager.FullOpponent>
  nameWithType.vb: ReadOnlyCollection(Of OpponentManager.FullOpponent)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of InscryptionAPI.Encounters.OpponentManager.FullOpponent)
  name.vb: ReadOnlyCollection(Of OpponentManager.FullOpponent)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    name: OpponentManager.FullOpponent
    nameWithType: OpponentManager.FullOpponent
    fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    name: OpponentManager.FullOpponent
    nameWithType: OpponentManager.FullOpponent
    fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: InscryptionAPI.Encounters.OpponentManager.AllOpponents*
  commentId: Overload:InscryptionAPI.Encounters.OpponentManager.AllOpponents
  name: AllOpponents
  nameWithType: OpponentManager.AllOpponents
  fullName: InscryptionAPI.Encounters.OpponentManager.AllOpponents
- uid: List{InscryptionAPI.Encounters.OpponentManager.FullOpponent}
  commentId: '!:List{InscryptionAPI.Encounters.OpponentManager.FullOpponent}'
  definition: List`1
  name: List<OpponentManager.FullOpponent>
  nameWithType: List<OpponentManager.FullOpponent>
  fullName: List<InscryptionAPI.Encounters.OpponentManager.FullOpponent>
  nameWithType.vb: List(Of OpponentManager.FullOpponent)
  fullName.vb: List(Of InscryptionAPI.Encounters.OpponentManager.FullOpponent)
  name.vb: List(Of OpponentManager.FullOpponent)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    name: OpponentManager.FullOpponent
    nameWithType: OpponentManager.FullOpponent
    fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
    name: OpponentManager.FullOpponent
    nameWithType: OpponentManager.FullOpponent
    fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Encounters.OpponentManager.Add*
  commentId: Overload:InscryptionAPI.Encounters.OpponentManager.Add
  name: Add
  nameWithType: OpponentManager.Add
  fullName: InscryptionAPI.Encounters.OpponentManager.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: InscryptionAPI.Encounters.OpponentManager.FullOpponent
  commentId: T:InscryptionAPI.Encounters.OpponentManager.FullOpponent
  parent: InscryptionAPI.Encounters
  name: OpponentManager.FullOpponent
  nameWithType: OpponentManager.FullOpponent
  fullName: InscryptionAPI.Encounters.OpponentManager.FullOpponent
- uid: InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent*
  commentId: Overload:InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent
  name: ReplaceSpawnOpponent
  nameWithType: OpponentManager.ReplaceSpawnOpponent
  fullName: InscryptionAPI.Encounters.OpponentManager.ReplaceSpawnOpponent
- uid: DiskCardGame.EncounterData
  commentId: T:DiskCardGame.EncounterData
  parent: DiskCardGame
  isExternal: true
  name: EncounterData
  nameWithType: EncounterData
  fullName: DiskCardGame.EncounterData
- uid: DiskCardGame.Opponent
  commentId: T:DiskCardGame.Opponent
  parent: DiskCardGame
  isExternal: true
  name: Opponent
  nameWithType: Opponent
  fullName: DiskCardGame.Opponent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DiskCardGame
  commentId: N:DiskCardGame
  isExternal: true
  name: DiskCardGame
  nameWithType: DiskCardGame
  fullName: DiskCardGame
- uid: InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss*
  commentId: Overload:InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss
  name: OriginalGetSequencerIdForBoss
  nameWithType: OpponentManager.OriginalGetSequencerIdForBoss
  fullName: InscryptionAPI.Encounters.OpponentManager.OriginalGetSequencerIdForBoss
- uid: DiskCardGame.Opponent.Type
  commentId: T:DiskCardGame.Opponent.Type
  parent: DiskCardGame
  isExternal: true
  name: Opponent.Type
  nameWithType: Opponent.Type
  fullName: DiskCardGame.Opponent.Type
- uid: InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId*
  commentId: Overload:InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId
  name: ReplaceGetSequencerId
  nameWithType: OpponentManager.ReplaceGetSequencerId
  fullName: InscryptionAPI.Encounters.OpponentManager.ReplaceGetSequencerId
- uid: InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath*
  commentId: Overload:InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath
  name: ReplacePrefabPath
  nameWithType: OpponentManager.ReplacePrefabPath
  fullName: InscryptionAPI.Encounters.OpponentManager.ReplacePrefabPath
