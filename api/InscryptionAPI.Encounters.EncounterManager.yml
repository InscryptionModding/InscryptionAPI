### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Encounters.EncounterManager
  commentId: T:InscryptionAPI.Encounters.EncounterManager
  id: EncounterManager
  parent: InscryptionAPI.Encounters
  children:
  - InscryptionAPI.Encounters.EncounterManager.Add(DiskCardGame.EncounterBlueprintData)
  - InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy
  - InscryptionAPI.Encounters.EncounterManager.BaseGameEncounters
  - InscryptionAPI.Encounters.EncounterManager.ModifyEncountersList
  - InscryptionAPI.Encounters.EncounterManager.New(System.String,System.Boolean)
  - InscryptionAPI.Encounters.EncounterManager.Remove(DiskCardGame.EncounterBlueprintData)
  - InscryptionAPI.Encounters.EncounterManager.SyncEncounterList
  langs:
  - csharp
  - vb
  name: EncounterManager
  nameWithType: EncounterManager
  fullName: InscryptionAPI.Encounters.EncounterManager
  type: Class
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: EncounterManager
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 8
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyPatch]

      public static class EncounterManager
    content.vb: >-
      <HarmonyPatch>

      Public Module EncounterManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Encounters.EncounterManager.BaseGameEncounters
  commentId: F:InscryptionAPI.Encounters.EncounterManager.BaseGameEncounters
  id: BaseGameEncounters
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: BaseGameEncounters
  nameWithType: EncounterManager.BaseGameEncounters
  fullName: InscryptionAPI.Encounters.EncounterManager.BaseGameEncounters
  type: Field
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: BaseGameEncounters
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 11
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static readonly ReadOnlyCollection<EncounterBlueprintData> BaseGameEncounters
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{DiskCardGame.EncounterBlueprintData}
    content.vb: Public Shared ReadOnly BaseGameEncounters As ReadOnlyCollection(Of EncounterBlueprintData)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Encounters.EncounterManager.ModifyEncountersList
  commentId: E:InscryptionAPI.Encounters.EncounterManager.ModifyEncountersList
  id: ModifyEncountersList
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: ModifyEncountersList
  nameWithType: EncounterManager.ModifyEncountersList
  fullName: InscryptionAPI.Encounters.EncounterManager.ModifyEncountersList
  type: Event
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: ModifyEncountersList
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 14
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static event Func<List<EncounterBlueprintData>, List<EncounterBlueprintData>> ModifyEncountersList
    return:
      type: Func{List{DiskCardGame.EncounterBlueprintData},List{DiskCardGame.EncounterBlueprintData}}
    content.vb: Public Shared Event ModifyEncountersList As Func(Of List(Of EncounterBlueprintData), List(Of EncounterBlueprintData))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterManager.SyncEncounterList
  commentId: M:InscryptionAPI.Encounters.EncounterManager.SyncEncounterList
  id: SyncEncounterList
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: SyncEncounterList()
  nameWithType: EncounterManager.SyncEncounterList()
  fullName: InscryptionAPI.Encounters.EncounterManager.SyncEncounterList()
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SyncEncounterList
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 41
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static void SyncEncounterList()
    content.vb: Public Shared Sub SyncEncounterList
  overload: InscryptionAPI.Encounters.EncounterManager.SyncEncounterList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy
  commentId: P:InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy
  id: AllEncountersCopy
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: AllEncountersCopy
  nameWithType: EncounterManager.AllEncountersCopy
  fullName: InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy
  type: Property
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AllEncountersCopy
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 63
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static List<EncounterBlueprintData> AllEncountersCopy { get; }
    parameters: []
    return:
      type: List{DiskCardGame.EncounterBlueprintData}
    content.vb: Public Shared ReadOnly Property AllEncountersCopy As List(Of EncounterBlueprintData)
  overload: InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Encounters.EncounterManager.Add(DiskCardGame.EncounterBlueprintData)
  commentId: M:InscryptionAPI.Encounters.EncounterManager.Add(DiskCardGame.EncounterBlueprintData)
  id: Add(DiskCardGame.EncounterBlueprintData)
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: Add(EncounterBlueprintData)
  nameWithType: EncounterManager.Add(EncounterBlueprintData)
  fullName: InscryptionAPI.Encounters.EncounterManager.Add(DiskCardGame.EncounterBlueprintData)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Add
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 65
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static void Add(EncounterBlueprintData newEncounter)
    parameters:
    - id: newEncounter
      type: DiskCardGame.EncounterBlueprintData
    content.vb: Public Shared Sub Add(newEncounter As EncounterBlueprintData)
  overload: InscryptionAPI.Encounters.EncounterManager.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterManager.Remove(DiskCardGame.EncounterBlueprintData)
  commentId: M:InscryptionAPI.Encounters.EncounterManager.Remove(DiskCardGame.EncounterBlueprintData)
  id: Remove(DiskCardGame.EncounterBlueprintData)
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: Remove(EncounterBlueprintData)
  nameWithType: EncounterManager.Remove(EncounterBlueprintData)
  fullName: InscryptionAPI.Encounters.EncounterManager.Remove(DiskCardGame.EncounterBlueprintData)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Remove
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 66
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static void Remove(EncounterBlueprintData encounter)
    parameters:
    - id: encounter
      type: DiskCardGame.EncounterBlueprintData
    content.vb: Public Shared Sub Remove(encounter As EncounterBlueprintData)
  overload: InscryptionAPI.Encounters.EncounterManager.Remove*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Encounters.EncounterManager.New(System.String,System.Boolean)
  commentId: M:InscryptionAPI.Encounters.EncounterManager.New(System.String,System.Boolean)
  id: New(System.String,System.Boolean)
  parent: InscryptionAPI.Encounters.EncounterManager
  langs:
  - csharp
  - vb
  name: New(String, Boolean)
  nameWithType: EncounterManager.New(String, Boolean)
  fullName: InscryptionAPI.Encounters.EncounterManager.New(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/EncounterManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: New
    path: ../InscryptionAPI/Encounters/EncounterManager.cs
    startLine: 68
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public static EncounterBlueprintData New(string name, bool addToPool = true)
    parameters:
    - id: name
      type: System.String
    - id: addToPool
      type: System.Boolean
    return:
      type: DiskCardGame.EncounterBlueprintData
    content.vb: Public Shared Function New(name As String, addToPool As Boolean = True) As EncounterBlueprintData
  overload: InscryptionAPI.Encounters.EncounterManager.New*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: InscryptionAPI.Encounters
  commentId: N:InscryptionAPI.Encounters
  name: InscryptionAPI.Encounters
  nameWithType: InscryptionAPI.Encounters
  fullName: InscryptionAPI.Encounters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.ReadOnlyCollection{DiskCardGame.EncounterBlueprintData}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{DiskCardGame.EncounterBlueprintData}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<EncounterBlueprintData>
  nameWithType: ReadOnlyCollection<EncounterBlueprintData>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<DiskCardGame.EncounterBlueprintData>
  nameWithType.vb: ReadOnlyCollection(Of EncounterBlueprintData)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of DiskCardGame.EncounterBlueprintData)
  name.vb: ReadOnlyCollection(Of EncounterBlueprintData)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Func{List{DiskCardGame.EncounterBlueprintData},List{DiskCardGame.EncounterBlueprintData}}
  commentId: '!:Func{List{DiskCardGame.EncounterBlueprintData},List{DiskCardGame.EncounterBlueprintData}}'
  definition: Func`2
  name: Func<List<EncounterBlueprintData>, List<EncounterBlueprintData>>
  nameWithType: Func<List<EncounterBlueprintData>, List<EncounterBlueprintData>>
  fullName: Func<List<DiskCardGame.EncounterBlueprintData>, List<DiskCardGame.EncounterBlueprintData>>
  nameWithType.vb: Func(Of List(Of EncounterBlueprintData), List(Of EncounterBlueprintData))
  fullName.vb: Func(Of List(Of DiskCardGame.EncounterBlueprintData), List(Of DiskCardGame.EncounterBlueprintData))
  name.vb: Func(Of List(Of EncounterBlueprintData), List(Of EncounterBlueprintData))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Encounters.EncounterManager.SyncEncounterList*
  commentId: Overload:InscryptionAPI.Encounters.EncounterManager.SyncEncounterList
  name: SyncEncounterList
  nameWithType: EncounterManager.SyncEncounterList
  fullName: InscryptionAPI.Encounters.EncounterManager.SyncEncounterList
- uid: InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy*
  commentId: Overload:InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy
  name: AllEncountersCopy
  nameWithType: EncounterManager.AllEncountersCopy
  fullName: InscryptionAPI.Encounters.EncounterManager.AllEncountersCopy
- uid: List{DiskCardGame.EncounterBlueprintData}
  commentId: '!:List{DiskCardGame.EncounterBlueprintData}'
  definition: List`1
  name: List<EncounterBlueprintData>
  nameWithType: List<EncounterBlueprintData>
  fullName: List<DiskCardGame.EncounterBlueprintData>
  nameWithType.vb: List(Of EncounterBlueprintData)
  fullName.vb: List(Of DiskCardGame.EncounterBlueprintData)
  name.vb: List(Of EncounterBlueprintData)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.EncounterBlueprintData
    name: EncounterBlueprintData
    nameWithType: EncounterBlueprintData
    fullName: DiskCardGame.EncounterBlueprintData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Encounters.EncounterManager.Add*
  commentId: Overload:InscryptionAPI.Encounters.EncounterManager.Add
  name: Add
  nameWithType: EncounterManager.Add
  fullName: InscryptionAPI.Encounters.EncounterManager.Add
- uid: DiskCardGame.EncounterBlueprintData
  commentId: T:DiskCardGame.EncounterBlueprintData
  parent: DiskCardGame
  isExternal: true
  name: EncounterBlueprintData
  nameWithType: EncounterBlueprintData
  fullName: DiskCardGame.EncounterBlueprintData
- uid: DiskCardGame
  commentId: N:DiskCardGame
  isExternal: true
  name: DiskCardGame
  nameWithType: DiskCardGame
  fullName: DiskCardGame
- uid: InscryptionAPI.Encounters.EncounterManager.Remove*
  commentId: Overload:InscryptionAPI.Encounters.EncounterManager.Remove
  name: Remove
  nameWithType: EncounterManager.Remove
  fullName: InscryptionAPI.Encounters.EncounterManager.Remove
- uid: InscryptionAPI.Encounters.EncounterManager.New*
  commentId: Overload:InscryptionAPI.Encounters.EncounterManager.New
  name: New
  nameWithType: EncounterManager.New
  fullName: InscryptionAPI.Encounters.EncounterManager.New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
