### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Encounters.NodeManager
  commentId: T:InscryptionAPI.Encounters.NodeManager
  id: NodeManager
  parent: InscryptionAPI.Encounters
  children:
  - InscryptionAPI.Encounters.NodeManager.Add``1(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  - InscryptionAPI.Encounters.NodeManager.Add``2(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  langs:
  - csharp
  - vb
  name: NodeManager
  nameWithType: NodeManager
  fullName: InscryptionAPI.Encounters.NodeManager
  type: Class
  source:
    remote:
      path: InscryptionAPI/Encounters/NodeManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: NodeManager
    path: ../InscryptionAPI/Encounters/NodeManager.cs
    startLine: 6
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: >-
      [HarmonyPatch]

      public static class NodeManager
    content.vb: >-
      <HarmonyPatch>

      Public Module NodeManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Encounters.NodeManager.Add``1(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  commentId: M:InscryptionAPI.Encounters.NodeManager.Add``1(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  id: Add``1(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  parent: InscryptionAPI.Encounters.NodeManager
  langs:
  - csharp
  - vb
  name: Add<S>(Texture2D[], NodeManager.NodePosition)
  nameWithType: NodeManager.Add<S>(Texture2D[], NodeManager.NodePosition)
  fullName: InscryptionAPI.Encounters.NodeManager.Add<S>(UnityEngine.Texture2D[], InscryptionAPI.Encounters.NodeManager.NodePosition)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/NodeManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Add
    path: ../InscryptionAPI/Encounters/NodeManager.cs
    startLine: 73
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nRegisters a new custom node and conditionally adds it to the map pool based on the nodeType\n"
  example: []
  syntax:
    content: >-
      public static NodeManager.NodeInfo Add<S>(Texture2D[] animatedMapNode, NodeManager.NodePosition nodeType)
          where S : MonoBehaviour, ICustomNodeSequence
    parameters:
    - id: animatedMapNode
      type: UnityEngine.Texture2D[]
      description: An array of exactly four textures containing the node&apos;s animation
    - id: nodeType
      type: InscryptionAPI.Encounters.NodeManager.NodePosition
      description: Flags to indicate where the node should appear on the map
    typeParameters:
    - id: S
      description: Implements the sequence logic for the special node
    return:
      type: InscryptionAPI.Encounters.NodeManager.NodeInfo
      description: The internal representation of this node
    content.vb: Public Shared Function Add(Of S As {MonoBehaviour, ICustomNodeSequence})(animatedMapNode As Texture2D(), nodeType As NodeManager.NodePosition) As NodeManager.NodeInfo
  overload: InscryptionAPI.Encounters.NodeManager.Add*
  nameWithType.vb: NodeManager.Add(Of S)(Texture2D(), NodeManager.NodePosition)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.NodeManager.Add(Of S)(UnityEngine.Texture2D(), InscryptionAPI.Encounters.NodeManager.NodePosition)
  name.vb: Add(Of S)(Texture2D(), NodeManager.NodePosition)
- uid: InscryptionAPI.Encounters.NodeManager.Add``2(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  commentId: M:InscryptionAPI.Encounters.NodeManager.Add``2(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  id: Add``2(UnityEngine.Texture2D[],InscryptionAPI.Encounters.NodeManager.NodePosition)
  parent: InscryptionAPI.Encounters.NodeManager
  langs:
  - csharp
  - vb
  name: Add<S, N>(Texture2D[], NodeManager.NodePosition)
  nameWithType: NodeManager.Add<S, N>(Texture2D[], NodeManager.NodePosition)
  fullName: InscryptionAPI.Encounters.NodeManager.Add<S, N>(UnityEngine.Texture2D[], InscryptionAPI.Encounters.NodeManager.NodePosition)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/NodeManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Add
    path: ../InscryptionAPI/Encounters/NodeManager.cs
    startLine: 86
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nRegisters a new custom node and conditionally adds it to the map pool based on the nodeType\n"
  example: []
  syntax:
    content: >-
      public static NodeManager.NodeInfo Add<S, N>(Texture2D[] animatedMapNode, NodeManager.NodePosition nodeType)
          where S : MonoBehaviour, ICustomNodeSequence where N : CustomNodeData
    parameters:
    - id: animatedMapNode
      type: UnityEngine.Texture2D[]
      description: An array of exactly four textures containing the node&apos;s animation
    - id: nodeType
      type: InscryptionAPI.Encounters.NodeManager.NodePosition
      description: Flags to indicate where the node should appear on the map
    typeParameters:
    - id: S
      description: Implements the sequence logic for the special node
    - id: N
      description: Implements the custom data and map generation logic for the special node
    return:
      type: InscryptionAPI.Encounters.NodeManager.NodeInfo
      description: The internal representation of this node
    content.vb: Public Shared Function Add(Of S As {MonoBehaviour, ICustomNodeSequence}, N As CustomNodeData)(animatedMapNode As Texture2D(), nodeType As NodeManager.NodePosition) As NodeManager.NodeInfo
  overload: InscryptionAPI.Encounters.NodeManager.Add*
  nameWithType.vb: NodeManager.Add(Of S, N)(Texture2D(), NodeManager.NodePosition)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Encounters.NodeManager.Add(Of S, N)(UnityEngine.Texture2D(), InscryptionAPI.Encounters.NodeManager.NodePosition)
  name.vb: Add(Of S, N)(Texture2D(), NodeManager.NodePosition)
references:
- uid: InscryptionAPI.Encounters
  commentId: N:InscryptionAPI.Encounters
  name: InscryptionAPI.Encounters
  nameWithType: InscryptionAPI.Encounters
  fullName: InscryptionAPI.Encounters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InscryptionAPI.Encounters.NodeManager.Add*
  commentId: Overload:InscryptionAPI.Encounters.NodeManager.Add
  name: Add
  nameWithType: NodeManager.Add
  fullName: InscryptionAPI.Encounters.NodeManager.Add
- uid: UnityEngine.Texture2D[]
  isExternal: true
  name: Texture2D[]
  nameWithType: Texture2D[]
  fullName: UnityEngine.Texture2D[]
  nameWithType.vb: Texture2D()
  fullName.vb: UnityEngine.Texture2D()
  name.vb: Texture2D()
  spec.csharp:
  - uid: UnityEngine.Texture2D
    name: Texture2D
    nameWithType: Texture2D
    fullName: UnityEngine.Texture2D
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: UnityEngine.Texture2D
    name: Texture2D
    nameWithType: Texture2D
    fullName: UnityEngine.Texture2D
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: InscryptionAPI.Encounters.NodeManager.NodePosition
  commentId: T:InscryptionAPI.Encounters.NodeManager.NodePosition
  parent: InscryptionAPI.Encounters
  name: NodeManager.NodePosition
  nameWithType: NodeManager.NodePosition
  fullName: InscryptionAPI.Encounters.NodeManager.NodePosition
- uid: InscryptionAPI.Encounters.NodeManager.NodeInfo
  commentId: T:InscryptionAPI.Encounters.NodeManager.NodeInfo
  parent: InscryptionAPI.Encounters
  name: NodeManager.NodeInfo
  nameWithType: NodeManager.NodeInfo
  fullName: InscryptionAPI.Encounters.NodeManager.NodeInfo
