### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Card.AbilityManager
  commentId: T:InscryptionAPI.Card.AbilityManager
  id: AbilityManager
  parent: InscryptionAPI.Card
  children:
  - InscryptionAPI.Card.AbilityManager.Add(System.String,DiskCardGame.AbilityInfo,Type,UnityEngine.Texture)
  - InscryptionAPI.Card.AbilityManager.AllAbilities
  - InscryptionAPI.Card.AbilityManager.AllAbilityInfos
  - InscryptionAPI.Card.AbilityManager.BaseGameAbilities
  - InscryptionAPI.Card.AbilityManager.FixRulebook(DiskCardGame.AbilityMetaCategory,DiskCardGame.RuleBookInfo,List{DiskCardGame.RuleBookPageInfo}@)
  - InscryptionAPI.Card.AbilityManager.ModifyAbilityList
  - InscryptionAPI.Card.AbilityManager.New(System.String,System.String,System.String,Type,System.String)
  - InscryptionAPI.Card.AbilityManager.New(System.String,System.String,System.String,Type,UnityEngine.Texture)
  - InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon(System.String,System.Boolean,System.Boolean)
  - InscryptionAPI.Card.AbilityManager.Remove(DiskCardGame.Ability)
  - InscryptionAPI.Card.AbilityManager.Remove(InscryptionAPI.Card.AbilityManager.FullAbility)
  - InscryptionAPI.Card.AbilityManager.SyncAbilityList
  - InscryptionAPI.Card.AbilityManager.WaterborneFix(System.Collections.IEnumerator,DiskCardGame.Trigger,System.Boolean,System.Object[])
  langs:
  - csharp
  - vb
  name: AbilityManager
  nameWithType: AbilityManager
  fullName: InscryptionAPI.Card.AbilityManager
  type: Class
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AbilityManager
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 12
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: >-
      [HarmonyPatch]

      public static class AbilityManager
    content.vb: >-
      <HarmonyPatch>

      Public Module AbilityManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Card.AbilityManager.BaseGameAbilities
  commentId: F:InscryptionAPI.Card.AbilityManager.BaseGameAbilities
  id: BaseGameAbilities
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: BaseGameAbilities
  nameWithType: AbilityManager.BaseGameAbilities
  fullName: InscryptionAPI.Card.AbilityManager.BaseGameAbilities
  type: Field
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: BaseGameAbilities
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 63
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static readonly ReadOnlyCollection<AbilityManager.FullAbility> BaseGameAbilities
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{InscryptionAPI.Card.AbilityManager.FullAbility}
    content.vb: Public Shared ReadOnly BaseGameAbilities As ReadOnlyCollection(Of AbilityManager.FullAbility)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Card.AbilityManager.AllAbilities
  commentId: P:InscryptionAPI.Card.AbilityManager.AllAbilities
  id: AllAbilities
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: AllAbilities
  nameWithType: AbilityManager.AllAbilities
  fullName: InscryptionAPI.Card.AbilityManager.AllAbilities
  type: Property
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AllAbilities
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 66
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static List<AbilityManager.FullAbility> AllAbilities { get; }
    parameters: []
    return:
      type: List{InscryptionAPI.Card.AbilityManager.FullAbility}
    content.vb: Public Shared ReadOnly Property AllAbilities As List(Of AbilityManager.FullAbility)
  overload: InscryptionAPI.Card.AbilityManager.AllAbilities*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Card.AbilityManager.AllAbilityInfos
  commentId: P:InscryptionAPI.Card.AbilityManager.AllAbilityInfos
  id: AllAbilityInfos
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: AllAbilityInfos
  nameWithType: AbilityManager.AllAbilityInfos
  fullName: InscryptionAPI.Card.AbilityManager.AllAbilityInfos
  type: Property
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AllAbilityInfos
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 67
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static List<AbilityInfo> AllAbilityInfos { get; }
    parameters: []
    return:
      type: List{DiskCardGame.AbilityInfo}
    content.vb: Public Shared ReadOnly Property AllAbilityInfos As List(Of AbilityInfo)
  overload: InscryptionAPI.Card.AbilityManager.AllAbilityInfos*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: InscryptionAPI.Card.AbilityManager.ModifyAbilityList
  commentId: E:InscryptionAPI.Card.AbilityManager.ModifyAbilityList
  id: ModifyAbilityList
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: ModifyAbilityList
  nameWithType: AbilityManager.ModifyAbilityList
  fullName: InscryptionAPI.Card.AbilityManager.ModifyAbilityList
  type: Event
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: ModifyAbilityList
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 69
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static event Func<List<AbilityManager.FullAbility>, List<AbilityManager.FullAbility>> ModifyAbilityList
    return:
      type: Func{List{InscryptionAPI.Card.AbilityManager.FullAbility},List{InscryptionAPI.Card.AbilityManager.FullAbility}}
    content.vb: Public Shared Event ModifyAbilityList As Func(Of List(Of AbilityManager.FullAbility), List(Of AbilityManager.FullAbility))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.SyncAbilityList
  commentId: M:InscryptionAPI.Card.AbilityManager.SyncAbilityList
  id: SyncAbilityList
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: SyncAbilityList()
  nameWithType: AbilityManager.SyncAbilityList()
  fullName: InscryptionAPI.Card.AbilityManager.SyncAbilityList()
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: SyncAbilityList
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 71
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static void SyncAbilityList()
    content.vb: Public Shared Sub SyncAbilityList
  overload: InscryptionAPI.Card.AbilityManager.SyncAbilityList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.Add(System.String,DiskCardGame.AbilityInfo,Type,UnityEngine.Texture)
  commentId: M:InscryptionAPI.Card.AbilityManager.Add(System.String,DiskCardGame.AbilityInfo,Type,UnityEngine.Texture)
  id: Add(System.String,DiskCardGame.AbilityInfo,Type,UnityEngine.Texture)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: Add(String, AbilityInfo, Type, Texture)
  nameWithType: AbilityManager.Add(String, AbilityInfo, Type, Texture)
  fullName: InscryptionAPI.Card.AbilityManager.Add(System.String, DiskCardGame.AbilityInfo, Type, UnityEngine.Texture)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Add
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 121
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static AbilityManager.FullAbility Add(string guid, AbilityInfo info, Type behavior, Texture tex)
    parameters:
    - id: guid
      type: System.String
    - id: info
      type: DiskCardGame.AbilityInfo
    - id: behavior
      type: Type
    - id: tex
      type: UnityEngine.Texture
    return:
      type: InscryptionAPI.Card.AbilityManager.FullAbility
    content.vb: Public Shared Function Add(guid As String, info As AbilityInfo, behavior As Type, tex As Texture) As AbilityManager.FullAbility
  overload: InscryptionAPI.Card.AbilityManager.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.New(System.String,System.String,System.String,Type,System.String)
  commentId: M:InscryptionAPI.Card.AbilityManager.New(System.String,System.String,System.String,Type,System.String)
  id: New(System.String,System.String,System.String,Type,System.String)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: New(String, String, String, Type, String)
  nameWithType: AbilityManager.New(String, String, String, Type, String)
  fullName: InscryptionAPI.Card.AbilityManager.New(System.String, System.String, System.String, Type, System.String)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: New
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 129
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static AbilityInfo New(string guid, string rulebookName, string rulebookDescription, Type behavior, string pathToArt)
    parameters:
    - id: guid
      type: System.String
    - id: rulebookName
      type: System.String
    - id: rulebookDescription
      type: System.String
    - id: behavior
      type: Type
    - id: pathToArt
      type: System.String
    return:
      type: DiskCardGame.AbilityInfo
    content.vb: Public Shared Function New(guid As String, rulebookName As String, rulebookDescription As String, behavior As Type, pathToArt As String) As AbilityInfo
  overload: InscryptionAPI.Card.AbilityManager.New*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.New(System.String,System.String,System.String,Type,UnityEngine.Texture)
  commentId: M:InscryptionAPI.Card.AbilityManager.New(System.String,System.String,System.String,Type,UnityEngine.Texture)
  id: New(System.String,System.String,System.String,Type,UnityEngine.Texture)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: New(String, String, String, Type, Texture)
  nameWithType: AbilityManager.New(String, String, String, Type, Texture)
  fullName: InscryptionAPI.Card.AbilityManager.New(System.String, System.String, System.String, Type, UnityEngine.Texture)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: New
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 134
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static AbilityInfo New(string guid, string rulebookName, string rulebookDescription, Type behavior, Texture tex)
    parameters:
    - id: guid
      type: System.String
    - id: rulebookName
      type: System.String
    - id: rulebookDescription
      type: System.String
    - id: behavior
      type: Type
    - id: tex
      type: UnityEngine.Texture
    return:
      type: DiskCardGame.AbilityInfo
    content.vb: Public Shared Function New(guid As String, rulebookName As String, rulebookDescription As String, behavior As Type, tex As Texture) As AbilityInfo
  overload: InscryptionAPI.Card.AbilityManager.New*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.Remove(DiskCardGame.Ability)
  commentId: M:InscryptionAPI.Card.AbilityManager.Remove(DiskCardGame.Ability)
  id: Remove(DiskCardGame.Ability)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: Remove(Ability)
  nameWithType: AbilityManager.Remove(Ability)
  fullName: InscryptionAPI.Card.AbilityManager.Remove(DiskCardGame.Ability)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Remove
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 143
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static void Remove(Ability id)
    parameters:
    - id: id
      type: DiskCardGame.Ability
    content.vb: Public Shared Sub Remove(id As Ability)
  overload: InscryptionAPI.Card.AbilityManager.Remove*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.Remove(InscryptionAPI.Card.AbilityManager.FullAbility)
  commentId: M:InscryptionAPI.Card.AbilityManager.Remove(InscryptionAPI.Card.AbilityManager.FullAbility)
  id: Remove(InscryptionAPI.Card.AbilityManager.FullAbility)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: Remove(AbilityManager.FullAbility)
  nameWithType: AbilityManager.Remove(AbilityManager.FullAbility)
  fullName: InscryptionAPI.Card.AbilityManager.Remove(InscryptionAPI.Card.AbilityManager.FullAbility)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Remove
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 144
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: public static void Remove(AbilityManager.FullAbility ability)
    parameters:
    - id: ability
      type: InscryptionAPI.Card.AbilityManager.FullAbility
    content.vb: Public Shared Sub Remove(ability As AbilityManager.FullAbility)
  overload: InscryptionAPI.Card.AbilityManager.Remove*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon(System.String,System.Boolean,System.Boolean)
  commentId: M:InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon(System.String,System.Boolean,System.Boolean)
  id: OriginalLoadAbilityIcon(System.String,System.Boolean,System.Boolean)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: OriginalLoadAbilityIcon(String, Boolean, Boolean)
  nameWithType: AbilityManager.OriginalLoadAbilityIcon(String, Boolean, Boolean)
  fullName: InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: OriginalLoadAbilityIcon
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 146
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: >-
      [HarmonyReversePatch(HarmonyReversePatchType.Original)]

      [HarmonyPatch(typeof(AbilitiesUtil), "LoadAbilityIcon")]

      public static Texture OriginalLoadAbilityIcon(string abilityName, bool fillerAbility = false, bool something = false)
    parameters:
    - id: abilityName
      type: System.String
    - id: fillerAbility
      type: System.Boolean
    - id: something
      type: System.Boolean
    return:
      type: UnityEngine.Texture
    content.vb: >-
      <HarmonyReversePatch(HarmonyReversePatchType.Original)>

      <HarmonyPatch(GetType(AbilitiesUtil), "LoadAbilityIcon")>

      Public Shared Function OriginalLoadAbilityIcon(abilityName As String, fillerAbility As Boolean = False, something As Boolean = False) As Texture
  overload: InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon*
  attributes:
  - type: HarmonyLib.HarmonyReversePatch
    ctor: HarmonyLib.HarmonyReversePatch.#ctor(HarmonyLib.HarmonyReversePatchType)
    arguments:
    - type: HarmonyLib.HarmonyReversePatchType
      value: 0
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.AbilitiesUtil
    - type: System.String
      value: LoadAbilityIcon
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Card.AbilityManager.FixRulebook(DiskCardGame.AbilityMetaCategory,DiskCardGame.RuleBookInfo,List{DiskCardGame.RuleBookPageInfo}@)
  commentId: M:InscryptionAPI.Card.AbilityManager.FixRulebook(DiskCardGame.AbilityMetaCategory,DiskCardGame.RuleBookInfo,List{DiskCardGame.RuleBookPageInfo}@)
  id: FixRulebook(DiskCardGame.AbilityMetaCategory,DiskCardGame.RuleBookInfo,List{DiskCardGame.RuleBookPageInfo}@)
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: FixRulebook(AbilityMetaCategory, RuleBookInfo, ref List<RuleBookPageInfo>)
  nameWithType: AbilityManager.FixRulebook(AbilityMetaCategory, RuleBookInfo, ref List<RuleBookPageInfo>)
  fullName: InscryptionAPI.Card.AbilityManager.FixRulebook(DiskCardGame.AbilityMetaCategory, DiskCardGame.RuleBookInfo, ref List<DiskCardGame.RuleBookPageInfo>)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: FixRulebook
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 223
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: >-
      [HarmonyPostfix]

      public static void FixRulebook(AbilityMetaCategory metaCategory, RuleBookInfo __instance, ref List<RuleBookPageInfo> __result)
    parameters:
    - id: metaCategory
      type: DiskCardGame.AbilityMetaCategory
    - id: __instance
      type: DiskCardGame.RuleBookInfo
    - id: __result
      type: List{DiskCardGame.RuleBookPageInfo}
    content.vb: >-
      <HarmonyPostfix>

      Public Shared Sub FixRulebook(metaCategory As AbilityMetaCategory, __instance As RuleBookInfo, ByRef __result As List(Of RuleBookPageInfo))
  overload: InscryptionAPI.Card.AbilityManager.FixRulebook*
  attributes:
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  nameWithType.vb: AbilityManager.FixRulebook(AbilityMetaCategory, RuleBookInfo, ByRef List(Of RuleBookPageInfo))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Card.AbilityManager.FixRulebook(DiskCardGame.AbilityMetaCategory, DiskCardGame.RuleBookInfo, ByRef List(Of DiskCardGame.RuleBookPageInfo))
  name.vb: FixRulebook(AbilityMetaCategory, RuleBookInfo, ByRef List(Of RuleBookPageInfo))
- uid: InscryptionAPI.Card.AbilityManager.WaterborneFix(System.Collections.IEnumerator,DiskCardGame.Trigger,System.Boolean,System.Object[])
  commentId: M:InscryptionAPI.Card.AbilityManager.WaterborneFix(System.Collections.IEnumerator,DiskCardGame.Trigger,System.Boolean,System.Object[])
  id: WaterborneFix(System.Collections.IEnumerator,DiskCardGame.Trigger,System.Boolean,System.Object[])
  parent: InscryptionAPI.Card.AbilityManager
  langs:
  - csharp
  - vb
  name: WaterborneFix(IEnumerator, Trigger, Boolean, Object[])
  nameWithType: AbilityManager.WaterborneFix(IEnumerator, Trigger, Boolean, Object[])
  fullName: InscryptionAPI.Card.AbilityManager.WaterborneFix(System.Collections.IEnumerator, DiskCardGame.Trigger, System.Boolean, System.Object[])
  type: Method
  source:
    remote:
      path: InscryptionAPI/Card/AbilityManager.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: WaterborneFix
    path: ../InscryptionAPI/Card/AbilityManager.cs
    startLine: 254
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Card
  syntax:
    content: >-
      [HarmonyPatch(typeof(GlobalTriggerHandler), "TriggerCardsOnBoard")]

      [HarmonyPostfix]

      public static IEnumerator WaterborneFix(IEnumerator result, Trigger trigger, bool triggerFacedown, params object[] otherArgs)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: trigger
      type: DiskCardGame.Trigger
    - id: triggerFacedown
      type: System.Boolean
    - id: otherArgs
      type: System.Object[]
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(GlobalTriggerHandler), "TriggerCardsOnBoard")>

      <HarmonyPostfix>

      Public Shared Function WaterborneFix(result As IEnumerator, trigger As Trigger, triggerFacedown As Boolean, ParamArray otherArgs As Object()) As IEnumerator
  overload: InscryptionAPI.Card.AbilityManager.WaterborneFix*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.GlobalTriggerHandler
    - type: System.String
      value: TriggerCardsOnBoard
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  nameWithType.vb: AbilityManager.WaterborneFix(IEnumerator, Trigger, Boolean, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: InscryptionAPI.Card.AbilityManager.WaterborneFix(System.Collections.IEnumerator, DiskCardGame.Trigger, System.Boolean, System.Object())
  name.vb: WaterborneFix(IEnumerator, Trigger, Boolean, Object())
references:
- uid: InscryptionAPI.Card
  commentId: N:InscryptionAPI.Card
  name: InscryptionAPI.Card
  nameWithType: InscryptionAPI.Card
  fullName: InscryptionAPI.Card
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.ReadOnlyCollection{InscryptionAPI.Card.AbilityManager.FullAbility}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{InscryptionAPI.Card.AbilityManager.FullAbility}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<AbilityManager.FullAbility>
  nameWithType: ReadOnlyCollection<AbilityManager.FullAbility>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<InscryptionAPI.Card.AbilityManager.FullAbility>
  nameWithType.vb: ReadOnlyCollection(Of AbilityManager.FullAbility)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of InscryptionAPI.Card.AbilityManager.FullAbility)
  name.vb: ReadOnlyCollection(Of AbilityManager.FullAbility)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: InscryptionAPI.Card.AbilityManager.AllAbilities*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.AllAbilities
  name: AllAbilities
  nameWithType: AbilityManager.AllAbilities
  fullName: InscryptionAPI.Card.AbilityManager.AllAbilities
- uid: List{InscryptionAPI.Card.AbilityManager.FullAbility}
  commentId: '!:List{InscryptionAPI.Card.AbilityManager.FullAbility}'
  definition: List`1
  name: List<AbilityManager.FullAbility>
  nameWithType: List<AbilityManager.FullAbility>
  fullName: List<InscryptionAPI.Card.AbilityManager.FullAbility>
  nameWithType.vb: List(Of AbilityManager.FullAbility)
  fullName.vb: List(Of InscryptionAPI.Card.AbilityManager.FullAbility)
  name.vb: List(Of AbilityManager.FullAbility)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Card.AbilityManager.AllAbilityInfos*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.AllAbilityInfos
  name: AllAbilityInfos
  nameWithType: AbilityManager.AllAbilityInfos
  fullName: InscryptionAPI.Card.AbilityManager.AllAbilityInfos
- uid: List{DiskCardGame.AbilityInfo}
  commentId: '!:List{DiskCardGame.AbilityInfo}'
  definition: List`1
  name: List<AbilityInfo>
  nameWithType: List<AbilityInfo>
  fullName: List<DiskCardGame.AbilityInfo>
  nameWithType.vb: List(Of AbilityInfo)
  fullName.vb: List(Of DiskCardGame.AbilityInfo)
  name.vb: List(Of AbilityInfo)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.AbilityInfo
    name: AbilityInfo
    nameWithType: AbilityInfo
    fullName: DiskCardGame.AbilityInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.AbilityInfo
    name: AbilityInfo
    nameWithType: AbilityInfo
    fullName: DiskCardGame.AbilityInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{List{InscryptionAPI.Card.AbilityManager.FullAbility},List{InscryptionAPI.Card.AbilityManager.FullAbility}}
  commentId: '!:Func{List{InscryptionAPI.Card.AbilityManager.FullAbility},List{InscryptionAPI.Card.AbilityManager.FullAbility}}'
  definition: Func`2
  name: Func<List<AbilityManager.FullAbility>, List<AbilityManager.FullAbility>>
  nameWithType: Func<List<AbilityManager.FullAbility>, List<AbilityManager.FullAbility>>
  fullName: Func<List<InscryptionAPI.Card.AbilityManager.FullAbility>, List<InscryptionAPI.Card.AbilityManager.FullAbility>>
  nameWithType.vb: Func(Of List(Of AbilityManager.FullAbility), List(Of AbilityManager.FullAbility))
  fullName.vb: Func(Of List(Of InscryptionAPI.Card.AbilityManager.FullAbility), List(Of InscryptionAPI.Card.AbilityManager.FullAbility))
  name.vb: Func(Of List(Of AbilityManager.FullAbility), List(Of AbilityManager.FullAbility))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: InscryptionAPI.Card.AbilityManager.FullAbility
    name: AbilityManager.FullAbility
    nameWithType: AbilityManager.FullAbility
    fullName: InscryptionAPI.Card.AbilityManager.FullAbility
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Card.AbilityManager.SyncAbilityList*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.SyncAbilityList
  name: SyncAbilityList
  nameWithType: AbilityManager.SyncAbilityList
  fullName: InscryptionAPI.Card.AbilityManager.SyncAbilityList
- uid: InscryptionAPI.Card.AbilityManager.Add*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.Add
  name: Add
  nameWithType: AbilityManager.Add
  fullName: InscryptionAPI.Card.AbilityManager.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DiskCardGame.AbilityInfo
  commentId: T:DiskCardGame.AbilityInfo
  parent: DiskCardGame
  isExternal: true
  name: AbilityInfo
  nameWithType: AbilityInfo
  fullName: DiskCardGame.AbilityInfo
- uid: Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: UnityEngine.Texture
  commentId: T:UnityEngine.Texture
  parent: UnityEngine
  isExternal: true
  name: Texture
  nameWithType: Texture
  fullName: UnityEngine.Texture
- uid: InscryptionAPI.Card.AbilityManager.FullAbility
  commentId: T:InscryptionAPI.Card.AbilityManager.FullAbility
  parent: InscryptionAPI.Card
  name: AbilityManager.FullAbility
  nameWithType: AbilityManager.FullAbility
  fullName: InscryptionAPI.Card.AbilityManager.FullAbility
- uid: DiskCardGame
  commentId: N:DiskCardGame
  isExternal: true
  name: DiskCardGame
  nameWithType: DiskCardGame
  fullName: DiskCardGame
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: InscryptionAPI.Card.AbilityManager.New*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.New
  name: New
  nameWithType: AbilityManager.New
  fullName: InscryptionAPI.Card.AbilityManager.New
- uid: InscryptionAPI.Card.AbilityManager.Remove*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.Remove
  name: Remove
  nameWithType: AbilityManager.Remove
  fullName: InscryptionAPI.Card.AbilityManager.Remove
- uid: DiskCardGame.Ability
  commentId: T:DiskCardGame.Ability
  parent: DiskCardGame
  isExternal: true
  name: Ability
  nameWithType: Ability
  fullName: DiskCardGame.Ability
- uid: InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon
  name: OriginalLoadAbilityIcon
  nameWithType: AbilityManager.OriginalLoadAbilityIcon
  fullName: InscryptionAPI.Card.AbilityManager.OriginalLoadAbilityIcon
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InscryptionAPI.Card.AbilityManager.FixRulebook*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.FixRulebook
  name: FixRulebook
  nameWithType: AbilityManager.FixRulebook
  fullName: InscryptionAPI.Card.AbilityManager.FixRulebook
- uid: DiskCardGame.AbilityMetaCategory
  commentId: T:DiskCardGame.AbilityMetaCategory
  parent: DiskCardGame
  isExternal: true
  name: AbilityMetaCategory
  nameWithType: AbilityMetaCategory
  fullName: DiskCardGame.AbilityMetaCategory
- uid: DiskCardGame.RuleBookInfo
  commentId: T:DiskCardGame.RuleBookInfo
  parent: DiskCardGame
  isExternal: true
  name: RuleBookInfo
  nameWithType: RuleBookInfo
  fullName: DiskCardGame.RuleBookInfo
- uid: List{DiskCardGame.RuleBookPageInfo}
  commentId: '!:List{DiskCardGame.RuleBookPageInfo}'
  definition: List`1
  name: List<RuleBookPageInfo>
  nameWithType: List<RuleBookPageInfo>
  fullName: List<DiskCardGame.RuleBookPageInfo>
  nameWithType.vb: List(Of RuleBookPageInfo)
  fullName.vb: List(Of DiskCardGame.RuleBookPageInfo)
  name.vb: List(Of RuleBookPageInfo)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.RuleBookPageInfo
    name: RuleBookPageInfo
    nameWithType: RuleBookPageInfo
    fullName: DiskCardGame.RuleBookPageInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.RuleBookPageInfo
    name: RuleBookPageInfo
    nameWithType: RuleBookPageInfo
    fullName: DiskCardGame.RuleBookPageInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Card.AbilityManager.WaterborneFix*
  commentId: Overload:InscryptionAPI.Card.AbilityManager.WaterborneFix
  name: WaterborneFix
  nameWithType: AbilityManager.WaterborneFix
  fullName: InscryptionAPI.Card.AbilityManager.WaterborneFix
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: DiskCardGame.Trigger
  commentId: T:DiskCardGame.Trigger
  parent: DiskCardGame
  isExternal: true
  name: Trigger
  nameWithType: Trigger
  fullName: DiskCardGame.Trigger
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
