### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Encounters.CustomNodeData
  commentId: T:InscryptionAPI.Encounters.CustomNodeData
  id: CustomNodeData
  parent: InscryptionAPI.Encounters
  children:
  - InscryptionAPI.Encounters.CustomNodeData.#ctor
  - InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(Func{System.Boolean})
  - InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  - InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(Func{System.Boolean})
  - InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  - InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions
  - InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions
  - InscryptionAPI.Encounters.CustomNodeData.Initialize
  - InscryptionAPI.Encounters.CustomNodeData.PrefabPath
  langs:
  - csharp
  - vb
  name: CustomNodeData
  nameWithType: CustomNodeData
  fullName: InscryptionAPI.Encounters.CustomNodeData
  type: Class
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: CustomNodeData
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 8
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nRepresents a node on the map that has been placed by the Inscryption API\n"
  example: []
  syntax:
    content: 'public class CustomNodeData : SpecialNodeData'
    content.vb: >-
      Public Class CustomNodeData
          Inherits SpecialNodeData
  inheritance:
  - System.Object
  - DiskCardGame.MapElementData
  - DiskCardGame.NodeData
  - DiskCardGame.SpecialNodeData
  inheritedMembers:
  - DiskCardGame.NodeData.PREFABS_ROOT
  - DiskCardGame.NodeData.gridX
  - DiskCardGame.NodeData.gridY
  - DiskCardGame.NodeData.connectedNodes
  - DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
  - DiskCardGame.NodeData.ForceMapGeneration(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
  - DiskCardGame.MapElementData.id
  - DiskCardGame.MapElementData.position
  - DiskCardGame.MapElementData.prefabPath
  - DiskCardGame.MapElementData.SetPrefabPath(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions
  commentId: P:InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions
  id: GenerationPrerequisiteConditions
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: GenerationPrerequisiteConditions
  nameWithType: CustomNodeData.GenerationPrerequisiteConditions
  fullName: InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions
  type: Property
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: GenerationPrerequisiteConditions
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 24
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAll prerequisite conditions must return TRUE for the node to be eligible to be added to the map\n"
  example: []
  syntax:
    content: public override List<NodeData.SelectionCondition> GenerationPrerequisiteConditions { get; }
    parameters: []
    return:
      type: List{DiskCardGame.NodeData.SelectionCondition}
    content.vb: Public Overrides ReadOnly Property GenerationPrerequisiteConditions As List(Of NodeData.SelectionCondition)
  overridden: DiskCardGame.NodeData.GenerationPrerequisiteConditions
  overload: InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions
  commentId: P:InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions
  id: ForceGenerationConditions
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: ForceGenerationConditions
  nameWithType: CustomNodeData.ForceGenerationConditions
  fullName: InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions
  type: Property
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: ForceGenerationConditions
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 31
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nIf even a single one of these conditions returns TRUE, the node will be added to the map.\n"
  example: []
  syntax:
    content: public override List<NodeData.SelectionCondition> ForceGenerationConditions { get; }
    parameters: []
    return:
      type: List{DiskCardGame.NodeData.SelectionCondition}
    content.vb: Public Overrides ReadOnly Property ForceGenerationConditions As List(Of NodeData.SelectionCondition)
  overridden: DiskCardGame.NodeData.ForceGenerationConditions
  overload: InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: InscryptionAPI.Encounters.CustomNodeData.#ctor
  commentId: M:InscryptionAPI.Encounters.CustomNodeData.#ctor
  id: '#ctor'
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: CustomNodeData()
  nameWithType: CustomNodeData.CustomNodeData()
  fullName: InscryptionAPI.Encounters.CustomNodeData.CustomNodeData()
  type: Constructor
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: .ctor
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 33
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  syntax:
    content: public CustomNodeData()
    content.vb: Public Sub New
  overload: InscryptionAPI.Encounters.CustomNodeData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: InscryptionAPI.Encounters.CustomNodeData.Initialize
  commentId: M:InscryptionAPI.Encounters.CustomNodeData.Initialize
  id: Initialize
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: CustomNodeData.Initialize()
  fullName: InscryptionAPI.Encounters.CustomNodeData.Initialize()
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: Initialize
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 41
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nHandles the initialization of the node. This is where conditions should be created.\n"
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize
  overload: InscryptionAPI.Encounters.CustomNodeData.Initialize*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(Func{System.Boolean})
  commentId: M:InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(Func{System.Boolean})
  id: AddGenerationPrerequisite(Func{System.Boolean})
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: AddGenerationPrerequisite(Func<Boolean>)
  nameWithType: CustomNodeData.AddGenerationPrerequisite(Func<Boolean>)
  fullName: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddGenerationPrerequisite
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 47
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds a simple prerequisite condition that does not depend on the current state of the map.\n"
  example: []
  syntax:
    content: protected void AddGenerationPrerequisite(Func<bool> condition)
    parameters:
    - id: condition
      type: Func{System.Boolean}
      description: Returns TRUE if the map node can be generated
    content.vb: Protected Sub AddGenerationPrerequisite(condition As Func(Of Boolean))
  overload: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite*
  nameWithType.vb: CustomNodeData.AddGenerationPrerequisite(Func(Of Boolean))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(Func(Of System.Boolean))
  name.vb: AddGenerationPrerequisite(Func(Of Boolean))
- uid: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  commentId: M:InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  id: AddGenerationPrerequisite(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: AddGenerationPrerequisite(CustomNodeData.NodeGenerationCondition)
  nameWithType: CustomNodeData.AddGenerationPrerequisite(CustomNodeData.NodeGenerationCondition)
  fullName: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddGenerationPrerequisite
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 56
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds a prerequisite condition that depends on the current state of the map.\n"
  example: []
  syntax:
    content: protected void AddGenerationPrerequisite(CustomNodeData.NodeGenerationCondition condition)
    parameters:
    - id: condition
      type: InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
      description: Returns TRUE if the map node can be generated
    content.vb: Protected Sub AddGenerationPrerequisite(condition As CustomNodeData.NodeGenerationCondition)
  overload: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(Func{System.Boolean})
  commentId: M:InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(Func{System.Boolean})
  id: AddForceGenerationCondition(Func{System.Boolean})
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: AddForceGenerationCondition(Func<Boolean>)
  nameWithType: CustomNodeData.AddForceGenerationCondition(Func<Boolean>)
  fullName: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddForceGenerationCondition
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 65
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds a simple forced generation condition that does not depend on the current state of the map.\n"
  example: []
  syntax:
    content: protected void AddForceGenerationCondition(Func<bool> condition)
    parameters:
    - id: condition
      type: Func{System.Boolean}
      description: Returns TRUE if the map node must be generated
    content.vb: Protected Sub AddForceGenerationCondition(condition As Func(Of Boolean))
  overload: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition*
  nameWithType.vb: CustomNodeData.AddForceGenerationCondition(Func(Of Boolean))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(Func(Of System.Boolean))
  name.vb: AddForceGenerationCondition(Func(Of Boolean))
- uid: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  commentId: M:InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  id: AddForceGenerationCondition(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: AddForceGenerationCondition(CustomNodeData.NodeGenerationCondition)
  nameWithType: CustomNodeData.AddForceGenerationCondition(CustomNodeData.NodeGenerationCondition)
  fullName: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition(InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: AddForceGenerationCondition
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 74
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nAdds a forced generation condition that depends on the current state of the map.\n"
  example: []
  syntax:
    content: protected void AddForceGenerationCondition(CustomNodeData.NodeGenerationCondition condition)
    parameters:
    - id: condition
      type: InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
      description: Returns TRUE if the map node must be generated
    content.vb: Protected Sub AddForceGenerationCondition(condition As CustomNodeData.NodeGenerationCondition)
  overload: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: InscryptionAPI.Encounters.CustomNodeData.PrefabPath
  commentId: P:InscryptionAPI.Encounters.CustomNodeData.PrefabPath
  id: PrefabPath
  parent: InscryptionAPI.Encounters.CustomNodeData
  langs:
  - csharp
  - vb
  name: PrefabPath
  nameWithType: CustomNodeData.PrefabPath
  fullName: InscryptionAPI.Encounters.CustomNodeData.PrefabPath
  type: Property
  source:
    remote:
      path: InscryptionAPI/Encounters/CustomNodeData.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: PrefabPath
    path: ../InscryptionAPI/Encounters/CustomNodeData.cs
    startLine: 85
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Encounters
  summary: "\nThis prefab path has been specially formatted to work with the custom patches created by the API.\n"
  example: []
  syntax:
    content: public sealed override string PrefabPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public NotOverridable Overrides ReadOnly Property PrefabPath As String
  overridden: DiskCardGame.NodeData.PrefabPath
  overload: InscryptionAPI.Encounters.CustomNodeData.PrefabPath*
  modifiers.csharp:
  - public
  - sealed
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
references:
- uid: InscryptionAPI.Encounters
  commentId: N:InscryptionAPI.Encounters
  name: InscryptionAPI.Encounters
  nameWithType: InscryptionAPI.Encounters
  fullName: InscryptionAPI.Encounters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DiskCardGame.MapElementData
  commentId: T:DiskCardGame.MapElementData
  parent: DiskCardGame
  isExternal: true
  name: MapElementData
  nameWithType: MapElementData
  fullName: DiskCardGame.MapElementData
- uid: DiskCardGame.NodeData
  commentId: T:DiskCardGame.NodeData
  parent: DiskCardGame
  isExternal: true
  name: NodeData
  nameWithType: NodeData
  fullName: DiskCardGame.NodeData
- uid: DiskCardGame.SpecialNodeData
  commentId: T:DiskCardGame.SpecialNodeData
  parent: DiskCardGame
  isExternal: true
  name: SpecialNodeData
  nameWithType: SpecialNodeData
  fullName: DiskCardGame.SpecialNodeData
- uid: DiskCardGame.NodeData.PREFABS_ROOT
  commentId: F:DiskCardGame.NodeData.PREFABS_ROOT
  parent: DiskCardGame.NodeData
  isExternal: true
  name: PREFABS_ROOT
  nameWithType: NodeData.PREFABS_ROOT
  fullName: DiskCardGame.NodeData.PREFABS_ROOT
- uid: DiskCardGame.NodeData.gridX
  commentId: F:DiskCardGame.NodeData.gridX
  parent: DiskCardGame.NodeData
  isExternal: true
  name: gridX
  nameWithType: NodeData.gridX
  fullName: DiskCardGame.NodeData.gridX
- uid: DiskCardGame.NodeData.gridY
  commentId: F:DiskCardGame.NodeData.gridY
  parent: DiskCardGame.NodeData
  isExternal: true
  name: gridY
  nameWithType: NodeData.gridY
  fullName: DiskCardGame.NodeData.gridY
- uid: DiskCardGame.NodeData.connectedNodes
  commentId: F:DiskCardGame.NodeData.connectedNodes
  parent: DiskCardGame.NodeData
  isExternal: true
  name: connectedNodes
  nameWithType: NodeData.connectedNodes
  fullName: DiskCardGame.NodeData.connectedNodes
- uid: DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
  commentId: M:DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
  parent: DiskCardGame.NodeData
  isExternal: true
  name: MapGenerationPrequisitesMet(Int32, List<NodeData>)
  nameWithType: NodeData.MapGenerationPrequisitesMet(Int32, List<NodeData>)
  fullName: DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32, System.Collections.Generic.List<DiskCardGame.NodeData>)
  nameWithType.vb: NodeData.MapGenerationPrequisitesMet(Int32, List(Of NodeData))
  fullName.vb: DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32, System.Collections.Generic.List(Of DiskCardGame.NodeData))
  name.vb: MapGenerationPrequisitesMet(Int32, List(Of NodeData))
  spec.csharp:
  - uid: DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
    name: MapGenerationPrequisitesMet
    nameWithType: NodeData.MapGenerationPrequisitesMet
    fullName: DiskCardGame.NodeData.MapGenerationPrequisitesMet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.NodeData
    name: NodeData
    nameWithType: NodeData
    fullName: DiskCardGame.NodeData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiskCardGame.NodeData.MapGenerationPrequisitesMet(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
    name: MapGenerationPrequisitesMet
    nameWithType: NodeData.MapGenerationPrequisitesMet
    fullName: DiskCardGame.NodeData.MapGenerationPrequisitesMet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.NodeData
    name: NodeData
    nameWithType: NodeData
    fullName: DiskCardGame.NodeData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DiskCardGame.NodeData.ForceMapGeneration(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
  commentId: M:DiskCardGame.NodeData.ForceMapGeneration(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
  parent: DiskCardGame.NodeData
  isExternal: true
  name: ForceMapGeneration(Int32, List<NodeData>)
  nameWithType: NodeData.ForceMapGeneration(Int32, List<NodeData>)
  fullName: DiskCardGame.NodeData.ForceMapGeneration(System.Int32, System.Collections.Generic.List<DiskCardGame.NodeData>)
  nameWithType.vb: NodeData.ForceMapGeneration(Int32, List(Of NodeData))
  fullName.vb: DiskCardGame.NodeData.ForceMapGeneration(System.Int32, System.Collections.Generic.List(Of DiskCardGame.NodeData))
  name.vb: ForceMapGeneration(Int32, List(Of NodeData))
  spec.csharp:
  - uid: DiskCardGame.NodeData.ForceMapGeneration(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
    name: ForceMapGeneration
    nameWithType: NodeData.ForceMapGeneration
    fullName: DiskCardGame.NodeData.ForceMapGeneration
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.NodeData
    name: NodeData
    nameWithType: NodeData
    fullName: DiskCardGame.NodeData
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiskCardGame.NodeData.ForceMapGeneration(System.Int32,System.Collections.Generic.List{DiskCardGame.NodeData})
    name: ForceMapGeneration
    nameWithType: NodeData.ForceMapGeneration
    fullName: DiskCardGame.NodeData.ForceMapGeneration
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.NodeData
    name: NodeData
    nameWithType: NodeData
    fullName: DiskCardGame.NodeData
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DiskCardGame.MapElementData.id
  commentId: F:DiskCardGame.MapElementData.id
  parent: DiskCardGame.MapElementData
  isExternal: true
  name: id
  nameWithType: MapElementData.id
  fullName: DiskCardGame.MapElementData.id
- uid: DiskCardGame.MapElementData.position
  commentId: F:DiskCardGame.MapElementData.position
  parent: DiskCardGame.MapElementData
  isExternal: true
  name: position
  nameWithType: MapElementData.position
  fullName: DiskCardGame.MapElementData.position
- uid: DiskCardGame.MapElementData.prefabPath
  commentId: F:DiskCardGame.MapElementData.prefabPath
  parent: DiskCardGame.MapElementData
  isExternal: true
  name: prefabPath
  nameWithType: MapElementData.prefabPath
  fullName: DiskCardGame.MapElementData.prefabPath
- uid: DiskCardGame.MapElementData.SetPrefabPath(System.String)
  commentId: M:DiskCardGame.MapElementData.SetPrefabPath(System.String)
  parent: DiskCardGame.MapElementData
  isExternal: true
  name: SetPrefabPath(String)
  nameWithType: MapElementData.SetPrefabPath(String)
  fullName: DiskCardGame.MapElementData.SetPrefabPath(System.String)
  spec.csharp:
  - uid: DiskCardGame.MapElementData.SetPrefabPath(System.String)
    name: SetPrefabPath
    nameWithType: MapElementData.SetPrefabPath
    fullName: DiskCardGame.MapElementData.SetPrefabPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DiskCardGame.MapElementData.SetPrefabPath(System.String)
    name: SetPrefabPath
    nameWithType: MapElementData.SetPrefabPath
    fullName: DiskCardGame.MapElementData.SetPrefabPath
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DiskCardGame
  commentId: N:DiskCardGame
  isExternal: true
  name: DiskCardGame
  nameWithType: DiskCardGame
  fullName: DiskCardGame
- uid: DiskCardGame.NodeData.GenerationPrerequisiteConditions
  commentId: P:DiskCardGame.NodeData.GenerationPrerequisiteConditions
  parent: DiskCardGame.NodeData
  isExternal: true
  name: GenerationPrerequisiteConditions
  nameWithType: NodeData.GenerationPrerequisiteConditions
  fullName: DiskCardGame.NodeData.GenerationPrerequisiteConditions
- uid: InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions
  name: GenerationPrerequisiteConditions
  nameWithType: CustomNodeData.GenerationPrerequisiteConditions
  fullName: InscryptionAPI.Encounters.CustomNodeData.GenerationPrerequisiteConditions
- uid: List{DiskCardGame.NodeData.SelectionCondition}
  commentId: '!:List{DiskCardGame.NodeData.SelectionCondition}'
  definition: List`1
  name: List<NodeData.SelectionCondition>
  nameWithType: List<NodeData.SelectionCondition>
  fullName: List<DiskCardGame.NodeData.SelectionCondition>
  nameWithType.vb: List(Of NodeData.SelectionCondition)
  fullName.vb: List(Of DiskCardGame.NodeData.SelectionCondition)
  name.vb: List(Of NodeData.SelectionCondition)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DiskCardGame.NodeData.SelectionCondition
    name: NodeData.SelectionCondition
    nameWithType: NodeData.SelectionCondition
    fullName: DiskCardGame.NodeData.SelectionCondition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DiskCardGame.NodeData.SelectionCondition
    name: NodeData.SelectionCondition
    nameWithType: NodeData.SelectionCondition
    fullName: DiskCardGame.NodeData.SelectionCondition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DiskCardGame.NodeData.ForceGenerationConditions
  commentId: P:DiskCardGame.NodeData.ForceGenerationConditions
  parent: DiskCardGame.NodeData
  isExternal: true
  name: ForceGenerationConditions
  nameWithType: NodeData.ForceGenerationConditions
  fullName: DiskCardGame.NodeData.ForceGenerationConditions
- uid: InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions
  name: ForceGenerationConditions
  nameWithType: CustomNodeData.ForceGenerationConditions
  fullName: InscryptionAPI.Encounters.CustomNodeData.ForceGenerationConditions
- uid: InscryptionAPI.Encounters.CustomNodeData.#ctor*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.#ctor
  name: CustomNodeData
  nameWithType: CustomNodeData.CustomNodeData
  fullName: InscryptionAPI.Encounters.CustomNodeData.CustomNodeData
- uid: InscryptionAPI.Encounters.CustomNodeData.Initialize*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.Initialize
  name: Initialize
  nameWithType: CustomNodeData.Initialize
  fullName: InscryptionAPI.Encounters.CustomNodeData.Initialize
- uid: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite
  name: AddGenerationPrerequisite
  nameWithType: CustomNodeData.AddGenerationPrerequisite
  fullName: InscryptionAPI.Encounters.CustomNodeData.AddGenerationPrerequisite
- uid: Func{System.Boolean}
  commentId: '!:Func{System.Boolean}'
  definition: Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
  commentId: T:InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
  parent: InscryptionAPI.Encounters
  name: CustomNodeData.NodeGenerationCondition
  nameWithType: CustomNodeData.NodeGenerationCondition
  fullName: InscryptionAPI.Encounters.CustomNodeData.NodeGenerationCondition
- uid: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition
  name: AddForceGenerationCondition
  nameWithType: CustomNodeData.AddForceGenerationCondition
  fullName: InscryptionAPI.Encounters.CustomNodeData.AddForceGenerationCondition
- uid: DiskCardGame.NodeData.PrefabPath
  commentId: P:DiskCardGame.NodeData.PrefabPath
  parent: DiskCardGame.NodeData
  isExternal: true
  name: PrefabPath
  nameWithType: NodeData.PrefabPath
  fullName: DiskCardGame.NodeData.PrefabPath
- uid: InscryptionAPI.Encounters.CustomNodeData.PrefabPath*
  commentId: Overload:InscryptionAPI.Encounters.CustomNodeData.PrefabPath
  name: PrefabPath
  nameWithType: CustomNodeData.PrefabPath
  fullName: InscryptionAPI.Encounters.CustomNodeData.PrefabPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
