### YamlMime:ManagedReference
items:
- uid: InscryptionAPI.Triggers.CustomTriggerPatches
  commentId: T:InscryptionAPI.Triggers.CustomTriggerPatches
  id: CustomTriggerPatches
  parent: InscryptionAPI.Triggers
  children:
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean,DiskCardGame.PlayableCard)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung(System.Collections.IEnumerator,System.Boolean)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot(System.Collections.IEnumerator,DiskCardGame.CardSlot,DiskCardGame.CardSlot)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged(System.Collections.IEnumerator,System.Int32,System.Boolean)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence(System.Collections.IEnumerator,DiskCardGame.CardSlot)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent(System.Collections.IEnumerator,DiskCardGame.TurnManager)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator,DiskCardGame.PlayableCard,DiskCardGame.PlayableCard)
  - InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand(System.Collections.IEnumerator,System.Boolean)
  langs:
  - csharp
  - vb
  name: CustomTriggerPatches
  nameWithType: CustomTriggerPatches
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches
  type: Class
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: CustomTriggerPatches
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 11
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch]

      public static class CustomTriggerPatches
    content.vb: >-
      <HarmonyPatch>

      Public Module CustomTriggerPatches
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard)
  id: TriggerOnAddedToHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnAddedToHand(IEnumerator, PlayableCard)
  nameWithType: CustomTriggerPatches.TriggerOnAddedToHand(IEnumerator, PlayableCard)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand(System.Collections.IEnumerator, DiskCardGame.PlayableCard)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnAddedToHand
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 14
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(PlayerHand), "AddCardToHand")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnAddedToHand(IEnumerator result, PlayableCard card)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: card
      type: DiskCardGame.PlayableCard
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(PlayerHand), "AddCardToHand")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnAddedToHand(result As IEnumerator, card As PlayableCard) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.PlayerHand
    - type: System.String
      value: AddCardToHand
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung(System.Collections.IEnumerator,System.Boolean)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung(System.Collections.IEnumerator,System.Boolean)
  id: TriggerOnBellRung(System.Collections.IEnumerator,System.Boolean)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnBellRung(IEnumerator, Boolean)
  nameWithType: CustomTriggerPatches.TriggerOnBellRung(IEnumerator, Boolean)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung(System.Collections.IEnumerator, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnBellRung
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 27
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(CombatPhaseManager), "DoCombatPhase")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnBellRung(IEnumerator result, bool playerIsAttacker)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: playerIsAttacker
      type: System.Boolean
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(CombatPhaseManager), "DoCombatPhase")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnBellRung(result As IEnumerator, playerIsAttacker As Boolean) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.CombatPhaseManager
    - type: System.String
      value: DoCombatPhase
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence(System.Collections.IEnumerator,DiskCardGame.CardSlot)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence(System.Collections.IEnumerator,DiskCardGame.CardSlot)
  id: TriggerOnSlotAttackSequence(System.Collections.IEnumerator,DiskCardGame.CardSlot)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnSlotAttackSequence(IEnumerator, CardSlot)
  nameWithType: CustomTriggerPatches.TriggerOnSlotAttackSequence(IEnumerator, CardSlot)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence(System.Collections.IEnumerator, DiskCardGame.CardSlot)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnSlotAttackSequence
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 36
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(CombatPhaseManager), "SlotAttackSequence")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnSlotAttackSequence(IEnumerator result, CardSlot slot)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: slot
      type: DiskCardGame.CardSlot
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(CombatPhaseManager), "SlotAttackSequence")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnSlotAttackSequence(result As IEnumerator, slot As CardSlot) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.CombatPhaseManager
    - type: System.String
      value: SlotAttackSequence
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot(System.Collections.IEnumerator,DiskCardGame.CardSlot,DiskCardGame.CardSlot)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot(System.Collections.IEnumerator,DiskCardGame.CardSlot,DiskCardGame.CardSlot)
  id: TriggerOnPostSingularSlotAttackSlot(System.Collections.IEnumerator,DiskCardGame.CardSlot,DiskCardGame.CardSlot)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnPostSingularSlotAttackSlot(IEnumerator, CardSlot, CardSlot)
  nameWithType: CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot(IEnumerator, CardSlot, CardSlot)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot(System.Collections.IEnumerator, DiskCardGame.CardSlot, DiskCardGame.CardSlot)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnPostSingularSlotAttackSlot
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 46
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(CombatPhaseManager), "SlotAttackSlot")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnPostSingularSlotAttackSlot(IEnumerator result, CardSlot attackingSlot, CardSlot opposingSlot)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: attackingSlot
      type: DiskCardGame.CardSlot
    - id: opposingSlot
      type: DiskCardGame.CardSlot
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(CombatPhaseManager), "SlotAttackSlot")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnPostSingularSlotAttackSlot(result As IEnumerator, attackingSlot As CardSlot, opposingSlot As CardSlot) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.CombatPhaseManager
    - type: System.String
      value: SlotAttackSlot
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged(System.Collections.IEnumerator,System.Int32,System.Boolean)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged(System.Collections.IEnumerator,System.Int32,System.Boolean)
  id: TriggerOnScalesChanged(System.Collections.IEnumerator,System.Int32,System.Boolean)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnScalesChanged(IEnumerator, Int32, Boolean)
  nameWithType: CustomTriggerPatches.TriggerOnScalesChanged(IEnumerator, Int32, Boolean)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged(System.Collections.IEnumerator, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnScalesChanged
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 55
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(LifeManager), "ShowDamageSequence")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnScalesChanged(IEnumerator result, int damage, bool toPlayer)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: damage
      type: System.Int32
    - id: toPlayer
      type: System.Boolean
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(LifeManager), "ShowDamageSequence")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnScalesChanged(result As IEnumerator, damage As Integer, toPlayer As Boolean) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.LifeManager
    - type: System.String
      value: ShowDamageSequence
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand(System.Collections.IEnumerator,System.Boolean)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand(System.Collections.IEnumerator,System.Boolean)
  id: TriggerOnUpkeepInHand(System.Collections.IEnumerator,System.Boolean)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnUpkeepInHand(IEnumerator, Boolean)
  nameWithType: CustomTriggerPatches.TriggerOnUpkeepInHand(IEnumerator, Boolean)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand(System.Collections.IEnumerator, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnUpkeepInHand
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 65
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(TurnManager), "DoUpkeepPhase")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnUpkeepInHand(IEnumerator result, bool playerUpkeep)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: playerUpkeep
      type: System.Boolean
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(TurnManager), "DoUpkeepPhase")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnUpkeepInHand(result As IEnumerator, playerUpkeep As Boolean) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.TurnManager
    - type: System.String
      value: DoUpkeepPhase
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  id: TriggerOnOtherCardResolveInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnOtherCardResolveInHand(IEnumerator, PlayableCard, Boolean)
  nameWithType: CustomTriggerPatches.TriggerOnOtherCardResolveInHand(IEnumerator, PlayableCard, Boolean)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand(System.Collections.IEnumerator, DiskCardGame.PlayableCard, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnOtherCardResolveInHand
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 74
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(BoardManager), "ResolveCardOnBoard")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnOtherCardResolveInHand(IEnumerator result, PlayableCard card, bool resolveTriggers = true)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: card
      type: DiskCardGame.PlayableCard
    - id: resolveTriggers
      type: System.Boolean
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(BoardManager), "ResolveCardOnBoard")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnOtherCardResolveInHand(result As IEnumerator, card As PlayableCard, resolveTriggers As Boolean = True) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.BoardManager
    - type: System.String
      value: ResolveCardOnBoard
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator)
  id: TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnTurnEndInHandPlayer(IEnumerator)
  nameWithType: CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(IEnumerator)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnTurnEndInHandPlayer
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 86
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(TurnManager), "PlayerTurn")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnTurnEndInHandPlayer(IEnumerator result)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(TurnManager), "PlayerTurn")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnTurnEndInHandPlayer(result As IEnumerator) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.TurnManager
    - type: System.String
      value: PlayerTurn
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent(System.Collections.IEnumerator,DiskCardGame.TurnManager)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent(System.Collections.IEnumerator,DiskCardGame.TurnManager)
  id: TriggerOnTurnEndInHandOpponent(System.Collections.IEnumerator,DiskCardGame.TurnManager)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnTurnEndInHandOpponent(IEnumerator, TurnManager)
  nameWithType: CustomTriggerPatches.TriggerOnTurnEndInHandOpponent(IEnumerator, TurnManager)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent(System.Collections.IEnumerator, DiskCardGame.TurnManager)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnTurnEndInHandOpponent
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 95
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(TurnManager), "OpponentTurn")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnTurnEndInHandOpponent(IEnumerator result, TurnManager __instance)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: __instance
      type: DiskCardGame.TurnManager
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(TurnManager), "OpponentTurn")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnTurnEndInHandOpponent(result As IEnumerator, __instance As TurnManager) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.TurnManager
    - type: System.String
      value: OpponentTurn
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  id: TriggerOnOtherCardAssignedToSlotInHand(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnOtherCardAssignedToSlotInHand(IEnumerator, PlayableCard, Boolean)
  nameWithType: CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand(IEnumerator, PlayableCard, Boolean)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand(System.Collections.IEnumerator, DiskCardGame.PlayableCard, System.Boolean)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnOtherCardAssignedToSlotInHand
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 108
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(BoardManager), "AssignCardToSlot")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnOtherCardAssignedToSlotInHand(IEnumerator result, PlayableCard card, bool resolveTriggers)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: card
      type: DiskCardGame.PlayableCard
    - id: resolveTriggers
      type: System.Boolean
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(BoardManager), "AssignCardToSlot")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnOtherCardAssignedToSlotInHand(result As IEnumerator, card As PlayableCard, resolveTriggers As Boolean) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.BoardManager
    - type: System.String
      value: AssignCardToSlot
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean,DiskCardGame.PlayableCard)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean,DiskCardGame.PlayableCard)
  id: TriggerDeathTriggers(System.Collections.IEnumerator,DiskCardGame.PlayableCard,System.Boolean,DiskCardGame.PlayableCard)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerDeathTriggers(IEnumerator, PlayableCard, Boolean, PlayableCard)
  nameWithType: CustomTriggerPatches.TriggerDeathTriggers(IEnumerator, PlayableCard, Boolean, PlayableCard)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers(System.Collections.IEnumerator, DiskCardGame.PlayableCard, System.Boolean, DiskCardGame.PlayableCard)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerDeathTriggers
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 125
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(PlayableCard), "Die")]

      [HarmonyPostfix]

      public static IEnumerator TriggerDeathTriggers(IEnumerator result, PlayableCard __instance, bool wasSacrifice, PlayableCard killer = null)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: __instance
      type: DiskCardGame.PlayableCard
    - id: wasSacrifice
      type: System.Boolean
    - id: killer
      type: DiskCardGame.PlayableCard
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(PlayableCard), "Die")>

      <HarmonyPostfix>

      Public Shared Function TriggerDeathTriggers(result As IEnumerator, __instance As PlayableCard, wasSacrifice As Boolean, killer As PlayableCard = Nothing) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.PlayableCard
    - type: System.String
      value: Die
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator,DiskCardGame.PlayableCard,DiskCardGame.PlayableCard)
  commentId: M:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator,DiskCardGame.PlayableCard,DiskCardGame.PlayableCard)
  id: TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator,DiskCardGame.PlayableCard,DiskCardGame.PlayableCard)
  parent: InscryptionAPI.Triggers.CustomTriggerPatches
  langs:
  - csharp
  - vb
  name: TriggerOnTurnEndInHandPlayer(IEnumerator, PlayableCard, PlayableCard)
  nameWithType: CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(IEnumerator, PlayableCard, PlayableCard)
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer(System.Collections.IEnumerator, DiskCardGame.PlayableCard, DiskCardGame.PlayableCard)
  type: Method
  source:
    remote:
      path: InscryptionAPI/Triggers/CustomTriggerPatches.cs
      branch: patch-7
      repo: https://github.com/xhayper/InscryptionAPI
    id: TriggerOnTurnEndInHandPlayer
    path: ../InscryptionAPI/Triggers/CustomTriggerPatches.cs
    startLine: 154
  assemblies:
  - InscryptionAPI
  namespace: InscryptionAPI.Triggers
  syntax:
    content: >-
      [HarmonyPatch(typeof(PlayableCard), "TakeDamage")]

      [HarmonyPostfix]

      public static IEnumerator TriggerOnTurnEndInHandPlayer(IEnumerator result, PlayableCard __instance, PlayableCard attacker)
    parameters:
    - id: result
      type: System.Collections.IEnumerator
    - id: __instance
      type: DiskCardGame.PlayableCard
    - id: attacker
      type: DiskCardGame.PlayableCard
    return:
      type: System.Collections.IEnumerator
    content.vb: >-
      <HarmonyPatch(GetType(PlayableCard), "TakeDamage")>

      <HarmonyPostfix>

      Public Shared Function TriggerOnTurnEndInHandPlayer(result As IEnumerator, __instance As PlayableCard, attacker As PlayableCard) As IEnumerator
  overload: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer*
  attributes:
  - type: HarmonyLib.HarmonyPatch
    ctor: HarmonyLib.HarmonyPatch.#ctor(System.Type,System.String)
    arguments:
    - type: System.Type
      value: DiskCardGame.PlayableCard
    - type: System.String
      value: TakeDamage
  - type: HarmonyLib.HarmonyPostfix
    ctor: HarmonyLib.HarmonyPostfix.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: InscryptionAPI.Triggers
  commentId: N:InscryptionAPI.Triggers
  name: InscryptionAPI.Triggers
  nameWithType: InscryptionAPI.Triggers
  fullName: InscryptionAPI.Triggers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand
  name: TriggerOnAddedToHand
  nameWithType: CustomTriggerPatches.TriggerOnAddedToHand
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnAddedToHand
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: DiskCardGame.PlayableCard
  commentId: T:DiskCardGame.PlayableCard
  parent: DiskCardGame
  isExternal: true
  name: PlayableCard
  nameWithType: PlayableCard
  fullName: DiskCardGame.PlayableCard
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: DiskCardGame
  commentId: N:DiskCardGame
  isExternal: true
  name: DiskCardGame
  nameWithType: DiskCardGame
  fullName: DiskCardGame
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung
  name: TriggerOnBellRung
  nameWithType: CustomTriggerPatches.TriggerOnBellRung
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnBellRung
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence
  name: TriggerOnSlotAttackSequence
  nameWithType: CustomTriggerPatches.TriggerOnSlotAttackSequence
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnSlotAttackSequence
- uid: DiskCardGame.CardSlot
  commentId: T:DiskCardGame.CardSlot
  parent: DiskCardGame
  isExternal: true
  name: CardSlot
  nameWithType: CardSlot
  fullName: DiskCardGame.CardSlot
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot
  name: TriggerOnPostSingularSlotAttackSlot
  nameWithType: CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnPostSingularSlotAttackSlot
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged
  name: TriggerOnScalesChanged
  nameWithType: CustomTriggerPatches.TriggerOnScalesChanged
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnScalesChanged
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand
  name: TriggerOnUpkeepInHand
  nameWithType: CustomTriggerPatches.TriggerOnUpkeepInHand
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnUpkeepInHand
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand
  name: TriggerOnOtherCardResolveInHand
  nameWithType: CustomTriggerPatches.TriggerOnOtherCardResolveInHand
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardResolveInHand
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer
  name: TriggerOnTurnEndInHandPlayer
  nameWithType: CustomTriggerPatches.TriggerOnTurnEndInHandPlayer
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandPlayer
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent
  name: TriggerOnTurnEndInHandOpponent
  nameWithType: CustomTriggerPatches.TriggerOnTurnEndInHandOpponent
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnTurnEndInHandOpponent
- uid: DiskCardGame.TurnManager
  commentId: T:DiskCardGame.TurnManager
  parent: DiskCardGame
  isExternal: true
  name: TurnManager
  nameWithType: TurnManager
  fullName: DiskCardGame.TurnManager
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand
  name: TriggerOnOtherCardAssignedToSlotInHand
  nameWithType: CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerOnOtherCardAssignedToSlotInHand
- uid: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers*
  commentId: Overload:InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers
  name: TriggerDeathTriggers
  nameWithType: CustomTriggerPatches.TriggerDeathTriggers
  fullName: InscryptionAPI.Triggers.CustomTriggerPatches.TriggerDeathTriggers
